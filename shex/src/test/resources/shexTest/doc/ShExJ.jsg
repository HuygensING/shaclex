# This is a JSON Grammar (JSG) file for the ShEx JSON format.
# The form "OBJNAME  { property:PROPTYPE ... }" matches an object of type OBJTYPE
# The form "RULENAME = NAME1 | NAME2 ..." matches any of NAMEn.
# the form "TERMNAME : "RegExp" matches any literal matching RegExp
# A PROPETYPE can be:
#   TERMINAL - a terminal, all caps in this example.
#   [PROPTYPE] - an array of PROPTYPE.
#   {TERMINAL->PROPTYPE} - a map from TERMINAL to PROPTYPE.
#   (PROPTYPE1|PROPTYPE2...) - any of PROPTYPEn.

.TYPE type; # All objects have a type property corresponding to the production name, e.g. "Schema"

Schema           { prefixes:{PREFIX->IRI}? base:IRI? startActs:[SemAct]? start:shapeExpr? shapes:{shapeLabel->shapeExpr}? }
shapeExpr        = ShapeOr | ShapeAnd | ShapeNot | NodeConstraint | Shape | ShapeRef | ShapeExternal;
ShapeAnd         { shapeExprs:[shapeExpr] }
ShapeOr          { shapeExprs:[shapeExpr] }
ShapeNot         { shapeExpr:shapeExpr }
Shape            { virtual:BOOL? closed:BOOL? extra:[IRI]? expression:tripleExpr? inherit:[shapeLabel]? semActs:[SemAct]? }
ShapeExternal    {  }
ShapeRef         { reference:IRI } # should be a TERM or some such
SemAct           { name:IRI code:STRING? }
tripleExpr       = EachOf | SomeOf | TripleConstraint | Inclusion ;
EachOf           { expressions:[tripleExpr] min:INTEGER? max:(INTEGER|"*")? semActs:[SemAct]? annotations:[Annotation]? }
SomeOf           { expressions:[tripleExpr] min:INTEGER? max:(INTEGER|"*")? semActs:[SemAct]? annotations:[Annotation]? }
Inclusion        { include:shapeLabel }
TripleConstraint { inverse:BOOL? negated:BOOL? predicate:IRI valueExpr:shapeExpr? min:INTEGER? max:(INTEGER|"*")? semActs:[SemAct]? annotations:[Annotation]? }
NodeConstraint   { nodeKind:("iri"|"bnode"|"nonliteral"|"literal")? datatype:IRI? xsFacet* values:[valueSetValue]? }
Annotation       { predicate:IRI object:IRI }

xsFacet          = stringFacet | numericFacet ;
stringFacet      = (length|minlength|maxlength):INTEGER | pattern:STRING ;
numericFacet     = (mininclusive|minexclusive|maxinclusive|maxexclusive):numericLiteral
                 | (totaldigits|fractiondigits):INTEGER ;
shapeLabel       = IRI|BNODE ;
numericLiteral   = INTEGER|DECIMAL|DOUBLE ;
valueSetValue    = IRI|STRING|DATATYPE_STRING|LANG_STRING|Stem|StemRange ;
Stem             { stem:IRI } # !! obselete -- use StemRange
StemRange        { stem:(IRI|Wildcard) exclusions:[valueSetValue]? }
Wildcard         {  }

PREFIX           : "^.*$" # <http://www.w3.org/TR/turtle/#grammar-production-PNAME_NS>
IRI              : "^.*$" # <http://www.w3.org/TR/turtle/#grammar-production-IRIREF>
BNODE            : "^.*$" # <http://www.w3.org/TR/turtle/#grammar-production-BLANK_NODE_LABEL>
BOOL             : "^(true"+"|false)$" # JSON boolean tokens
INTEGER          : "^.*$" # <http://www.w3.org/TR/turtle/#grammar-production-INTEGER>
DECIMAL          : "^.*$" # <http://www.w3.org/TR/turtle/#grammar-production-DECIMAL>
DOUBLE           : "^.*$" # <http://www.w3.org/TR/turtle/#grammar-production-DOUBLE>
STRING           : "^.*$" # '"' ([^"] | '\\' '"')* '"' # JSON string with '"' at beginning and end
DATATYPE_STRING  : "^.*$" # '"' ([^"] | '\\' '"')* '"' '^^' IRI # JSON string with '"' at beginning, an unescaped '"' followed by '^^' and an IRI
LANG_STRING      : "^.*$" # '"' ([^"] | '\\' '"')* '"' '@' "^.*$" # <http://www.w3.org/TR/turtle/#grammar-production-LANGTAG> # JSON string with '"' at beginning, an unescaped '"' followed by '@' and a Turtle LANGTAG
