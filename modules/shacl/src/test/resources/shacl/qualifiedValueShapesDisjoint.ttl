prefix :       <http://example.org/> 
prefix sh:     <http://www.w3.org/ns/shacl#> 
prefix xsd:    <http://www.w3.org/2001/XMLSchema#>
prefix schema: <http://schema.org/>
prefix foaf:   <http://xmlns.com/foaf/0.1/>
prefix rdfs:   <http://www.w3.org/2000/01/rdf-schema#>

:Marriage a sh:NodeShape ;
    sh:property :memberMale ;
	sh:property :memberFemale .

:memberMale sh:path :member ;
      sh:qualifiedMinCount 1 ;
      sh:qualifiedValueShape :MaleShape ;
    .

:memberFemale sh:path :member ;
      sh:qualifiedMinCount 1 ;
      sh:qualifiedValueShape :FemaleShape ;
    .

:MarriageDisjoint a sh:NodeShape ;
    sh:property :memberMaleDisjoint ;
	sh:property :memberFemaleDisjoint .

:memberMaleDisjoint sh:path :member ;
      sh:qualifiedMinCount 1 ;
      sh:qualifiedValueShape :MaleShape ;
      sh:qualifiedValueShapesDisjoint true ;
    .

:memberFemaleDisjoint sh:path :member ;
      sh:qualifiedMinCount 1 ;
      sh:qualifiedValueShape :FemaleShape ;
      sh:qualifiedValueShapesDisjoint true ;
    .
	
	
:MaleShape a sh:NodeShape ;
  sh:property [ 
   sh:path :isMale ;
   sh:hasValue true
  ] .
  
:FemaleShape a sh:NodeShape ;
 sh:property [ 
  sh:path :isFemale ;
  sh:hasValue true
] .  

:marriage1 :member :alice, :bob .
:alice :isFemale true .
:bob :isMale true .

:marriageX :member :x1, :x2 .
:x1 :isFemale true; 
    :isMale true .
:x2 :isFemale :true; 
    :isMale true .

#:Marriage sh:targetNode 
#  :marriage1 
#  :marriageX 
#  .
:MarriageDisjoint sh:targetNode 
  # :marriage1 
  :marriageX 
  .
  
#:MaleShape sh:targetNode :bob, :x1 .
#:FemaleShape sh:targetNode :alice .