@prefix ttlTests: <http://www.w3.org/2013/TurtleTests/manifest.ttl#> .
@prefix rdf:   <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .
@prefix doap:  <http://usefulinc.com/ns/doap#> .
@prefix earl:  <http://www.w3.org/ns/earl#> .
@prefix rdfs:  <http://www.w3.org/2000/01/rdf-schema#> .
@prefix foaf:  <http://xmlns.com/foaf/0.1/> .
@prefix dc:    <http://purl.org/dc/terms/> .

<>      dc:issued          "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
        foaf:maker         <http://www.di.uniovi.es/~labra#me> ;
        foaf:primaryTopic  <https://github.com/labra/shaclex/> .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 4.4e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMaxinclusiveINTEGER_pass-double-low> ;
  foaf:name        "1doubleMaxinclusiveINTEGER_pass-double-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Closed shape. But rest <http://a.example/p2> is not in List(Inverse(<http://www.w3.org/ns/shacl#targetNode>)) or List()\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotClosed_fail_higher> ;
  foaf:name        "1dotClosed_fail_higher"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: _:a77510265508ae72c209c66f675c242f is not an Literal\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literal_fail-bnode> ;
  foaf:name        "1literal_fail-bnode"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/ab> is not a BlankNode\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1bnodePattern_fail-iri-match> ;
  foaf:name        "1bnodePattern_fail-iri-match"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: No candidates match. Neighs: List(), Table: CTable { constraints: Map(C1 -> Pos(NodeConstraint(None,None,List(),None)))\n\r\n paths: Map(Direct(<http://a.example/p1>) -> Set(C1))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1cardStar_pass0> ;
  foaf:name        "1cardStar_pass0"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 05 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMininclusiveINTEGER_pass-equalLead> ;
  foaf:name        "1floatMininclusiveINTEGER_pass-equalLead"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: _:46adfabf9420bcd3d6bf6594f2fd655e is a BlankNode\n _:46adfabf9420bcd3d6bf6594f2fd655e satisfies Pattern(ab) with lexical form 46adfabf9420bcd3d6bf6594f2fd655e\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(BNodeKind),None,List(Pattern(ab)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(BNodeKind),None,List(Pattern(ab)),None)),None,None,None,None)),None,None)))))]: _:46adfabf9420bcd3d6bf6594f2fd655e is a BlankNode\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(BNodeKind),None,List(Pattern(ab)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(BNodeKind),None,List(Pattern(ab)),None)),None,None,None,None)),None,None)))))]: _:46adfabf9420bcd3d6bf6594f2fd655e satisfies Pattern(ab) with lexical form 46adfabf9420bcd3d6bf6594f2fd655e" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1bnodePattern_fail-bnode-long> ;
  foaf:name        "1bnodePattern_fail-bnode-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/n1>: +<http://a.example/S1>) -> Evidences: \n(<http://a.example/n2>: +<http://a.example/S2>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotRef1_referrer,referent> ;
  foaf:name        "1dotRef1_referrer,referent"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/s1>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p1>),\"a\"),C1), ((Direct(<http://a.example/p1>),\"c\"),C1), ((Direct(<http://a.example/p1>),\"e\"),C1), ((Direct(<http://a.example/p1>),\"f\"),C1), ((Direct(<http://a.example/p1>),\"d\"),C1), ((Direct(<http://a.example/p1>),\"b\"),C1)) doesn't match regular expression\nBag {| C1 -> 6 |} doesn't match Rbe Symbol(C1,2,5)\nErr: Interval checker failed with value [2;3]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1card25_fail6> ;
  foaf:name        "1card25_fail6"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: TotalDigits(5)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None)))))]: 1234 is a Literal" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalTotaldigits_pass-xsd_integer-short> ;
  foaf:name        "1literalTotaldigits_pass-xsd_integer-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: 0e0 doesn't belong to set List(DatatypeString(0.0,<http://www.w3.org/2001/XMLSchema#decimal>))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1DOUBLE_passUC> ;
  foaf:name        "1val1DOUBLE_passUC"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinExclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinExclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinExclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 6 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMinexclusiveDOUBLEint_pass-integer-high> ;
  foaf:name        "1integerMinexclusiveDOUBLEint_pass-integer-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: ab doesn't belong to set List(LangString(ab,@en-fr))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1LANGTAG_LabLTen-fr-jura> ;
  foaf:name        "1val1LANGTAG_LabLTen-fr-jura"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 5.6 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMaxexclusiveDOUBLE_fail-decimal-high> ;
  foaf:name        "1decimalMaxexclusiveDOUBLE_fail-decimal-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#startCode1startReffail_abort> ;
  foaf:name        "startCode1startReffail_abort"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: TotalDigits(5)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None)))))]: 4.5e0 is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalTotaldigits_fail-double-equal> ;
  foaf:name        "1literalTotaldigits_fail-double-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxInclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 4.4 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMaxinclusiveDOUBLE_pass-float-low> ;
  foaf:name        "1floatMaxinclusiveDOUBLE_pass-float-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: No candidates match. Neighs: List(), Table: CTable { constraints: Map(C1 -> Pos(NodeConstraint(None,None,List(),None)))\n\r\n paths: Map(Direct(<http://a.example/p1>) -> Set(C1))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1card25_fail0> ;
  foaf:name        "1card25_fail0"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt([<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://a.example/dt1>),List(),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://a.example/dt1>),List(),None)),None,None,None,None)),None,None)))))],None) <http://a.example/dt1> doesn't have datatype <http://a.example/dt1> because it is not a literal\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1datatype_nonLiteral> ;
  foaf:name        "1datatype_nonLiteral"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinExclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 4.5 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMinexclusiveDECIMAL_fail-float-equal> ;
  foaf:name        "1floatMinexclusiveDECIMAL_fail-float-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: <http://a.example/s1> is NonLiteral\n <http://a.example/s1> satisfies Length(19) with length 19\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(ShapeAnd(List(NodeConstraint(Some(NonLiteralKind),None,List(Length(19)),None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(NodeConstraint(Some(NonLiteralKind),None,List(Length(19)),None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))]: <http://a.example/s1> is NonLiteral\n[<http://a.example/s1>,ShapeType(ShapeAnd(List(NodeConstraint(Some(NonLiteralKind),None,List(Length(19)),None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(NodeConstraint(Some(NonLiteralKind),None,List(Length(19)),None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))]: <http://a.example/s1> satisfies Length(19) with length 19" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusnonLiteralLength-dot_pass-iri-equal> ;
  foaf:name        "1focusnonLiteralLength-dot_pass-iri-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error es.weso.rdf.parser.RDFParserException: RDFParserException: Value of predicate <http://www.w3.org/ns/shacl/test-suite#focus> must be a IRI but it is: _:d7d6df691f8e377b68495939b3045226" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusPatternB-dot_fail-bnode-short> ;
  foaf:name        "1focusPatternB-dot_fail-bnode-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: TotalDigits(5)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None)))))]: 12345 is a Literal" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalTotaldigits_pass-integer-equal> ;
  foaf:name        "1literalTotaldigits_pass-integer-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: ^ab is a Literal\n ^ab satisfies Pattern(ab) with lexical form ^ab\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab)),None)),None,None,None,None)),None,None)))))]: ^ab is a Literal\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab)),None)),None,None,None,None)),None,None)))))]: ^ab satisfies Pattern(ab) with lexical form ^ab" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalPattern_fail-lit-Startlit> ;
  foaf:name        "1literalPattern_fail-lit-Startlit"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +ex:S1) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotLNexComment_pass-noOthers> ;
  foaf:name        "1dotLNexComment_pass-noOthers"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/o1a> doesn't satisfy facet Length(19) with length 20\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(Length(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(Length(19)),None)),None,None,None,None)),None,None)))))]: <http://a.example/o1a> is NonLiteral" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1nonliteralLength_fail-iri-long> ;
  foaf:name        "1nonliteralLength_fail-iri-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 04.50e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMininclusiveDOUBLE_pass-double-equalLeadTrail> ;
  foaf:name        "1doubleMininclusiveDOUBLE_pass-double-equalLeadTrail"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/n1>: +<http://a.example/S1>) -> Evidences: <http://a.example/n4> passes OR\n(<http://a.example/n4>: +<http://a.example/S4>) -> Evidences: \n----------------------------log-----------------------\n[<http://a.example/n1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/S2>)), ShapeRef(IRILabel(<http://a.example/S3>)), ShapeRef(IRILabel(<http://a.example/S4>))))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/S2>)), ShapeRef(IRILabel(<http://a.example/S3>)), ShapeRef(IRILabel(<http://a.example/S4>))))),None,None,None,None)),None,None), IRILabel(<http://a.example/S2>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), IRILabel(<http://a.example/S3>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), IRILabel(<http://a.example/S4>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))]: <http://a.example/n4> passes OR" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotRefOR3_passShape3> ;
  foaf:name        "1dotRefOR3_passShape3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/n3>, shape: <http://a.example/S2> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotRefAND3_failShape1Shape3> ;
  foaf:name        "1dotRefAND3_failShape1Shape3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: _:95d1055be92f07d964a110b8f123a7d0 doesn't satisfy facet MaxLength(5) with length 32\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(BNodeKind),None,List(MaxLength(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(BNodeKind),None,List(MaxLength(5)),None)),None,None,None,None)),None,None)))))]: _:95d1055be92f07d964a110b8f123a7d0 is a BlankNode" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1bnodeMaxlength_fail-bnode-long> ;
  foaf:name        "1bnodeMaxlength_fail-bnode-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: ab passes OR\n(\"ab\": +<http://a.example/vc1>) -> Evidences: ab is a Literal\n ab satisfies Pattern(ab.*) with lexical form ab\n----------------------------log-----------------------\n[\"ab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: ab is a Literal\n[\"ab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: ab satisfies Pattern(ab.*) with lexical form ab\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: ab passes OR" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExpr1OR1OR1Ref3_passvc1> ;
  foaf:name        "1val1vExpr1OR1OR1Ref3_passvc1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/o1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1inversedotCode1_pass> ;
  foaf:name        "1inversedotCode1_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error es.weso.rdf.parser.RDFParserException: RDFParserException: Value of predicate <http://www.w3.org/ns/shacl/test-suite#focus> must be a IRI but it is: _:cd3026580384f802547ca7089f31bdec" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusPatternB-dot_pass-bnode-match> ;
  foaf:name        "1focusPatternB-dot_pass-bnode-match"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: ex:s, shape: ex:S1 Candidate line List(((Direct(<http://a.example/p3>),<http://a.example/o3>),C3), ((Direct(<http://a.example/p3>),<http://a.example/o3a>),C3), ((Direct(<http://a.example/p1>),<http://a.example/o1a>),C1), ((Direct(<http://a.example/p2>),<http://a.example/o2a>),C2), ((Direct(<http://a.example/p1>),<http://a.example/o1>),C1), ((Direct(<http://a.example/p2>),<http://a.example/o2>),C2)) doesn't match regular expression\nBag {| C1 -> 2, C2 -> 2, C3 -> 2 |} doesn't match Rbe And(And(Symbol(C1,1,1),Symbol(C2,1,1)),Symbol(C3,1,1))\nErr: Interval checker failed with value [2;2]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#3groupdotExtra3NLex_pass-iri2> ;
  foaf:name        "3groupdotExtra3NLex_pass-iri2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1Adot_pass> ;
  foaf:name        "1Adot_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: No candidates match. Neighs: List(), Table: CTable { constraints: Map(C1 -> Pos(NodeConstraint(None,None,List(),None)))\n\r\n paths: Map(Direct(<http://a.example/p1>) -> Set(C1))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(ShapeAnd(List(NodeConstraint(None,None,List(Pattern(http://a.example/s1)),None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(NodeConstraint(None,None,List(Pattern(http://a.example/s1)),None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))]: <http://a.example/s1> satisfies Pattern(http://a.example/s1) with lexical form http://a.example/s1" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusPattern-dot_fail-iri-match> ;
  foaf:name        "1focusPattern-dot_fail-iri-match"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1cardPlus_pass1> ;
  foaf:name        "1cardPlus_pass1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinExclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinExclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinExclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 5.6 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMinexclusiveINTEGER_pass-float-high> ;
  foaf:name        "1floatMinexclusiveINTEGER_pass-float-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1cardOpt_pass1> ;
  foaf:name        "1cardOpt_pass1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error es.weso.rdf.parser.RDFParserException: RDFParserException: objectFromPredicate: Not found triples with subject _:25dfe67537d483276a08179ff035cb80 and predicate <http://www.w3.org/ns/shacl/test-suite#shape>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#startInline_fail-missing> ;
  foaf:name        "startInline_fail-missing"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: abcdef doesn't satisfy facet MaxLength(5) with length 6\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None)),None,None,None,None)),None,None)))))]: abcdef is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalMaxlength_fail-lit-long> ;
  foaf:name        "1literalMaxlength_fail-lit-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/12345> is not an Literal\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalFractiondigits_fail-iri> ;
  foaf:name        "1literalFractiondigits_fail-iri"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(5.00))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(5.00))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(5.00))),None)),None,None,None,None)),None,None)))))]: 5 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveDECIMALintLeadTrail_pass-integer-equalLead> ;
  foaf:name        "1integerMininclusiveDECIMALintLeadTrail_pass-integer-equalLead"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxExclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxExclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 5 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMaxexclusiveDOUBLEint_fail-integer-equal> ;
  foaf:name        "1integerMaxexclusiveDOUBLEint_fail-integer-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: ab doesn't belong to set List(DatatypeString(ab,<http://a.example/bloodType>))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1IRIREFDatatype_LabDTbloodType999> ;
  foaf:name        "1val1IRIREFDatatype_LabDTbloodType999"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error es.weso.rdf.parser.RDFParserException: RDFParserException: Value of predicate <http://www.w3.org/ns/shacl/test-suite#focus> must be a IRI but it is: _:d7d6df691f8e377b68495939b3045226" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusMaxLength-dot_pass-bnode-short> ;
  foaf:name        "1focusMaxLength-dot_pass-bnode-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: <http://a.example/o2> == <http://a.example/o2>\n <http://a.example/o1> == <http://a.example/o1>\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),Some(List(<http://a.example/p1>)),Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o1>), IRIValue(<http://a.example/o2>))))),Some(1),Some(Star),None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),Some(List(<http://a.example/p1>)),Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o1>), IRIValue(<http://a.example/o2>))))),Some(1),Some(Star),None,None)),None,None)))))]: <http://a.example/o2> == <http://a.example/o2>\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),Some(List(<http://a.example/p1>)),Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o1>), IRIValue(<http://a.example/o2>))))),Some(1),Some(Star),None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),Some(List(<http://a.example/p1>)),Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o1>), IRIValue(<http://a.example/o2>))))),Some(1),Some(Star),None,None)),None,None)))))]: <http://a.example/o1> == <http://a.example/o1>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val2IRIREFPlusExtra1_pass-iri2> ;
  foaf:name        "1val2IRIREFPlusExtra1_pass-iri2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/x>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p2>),\"p2-0\"),C2), ((Direct(<http://a.example/p1>),\"p1-0\"),C1)) doesn't match regular expression\nBag {| C1 -> 1, C2 -> 1 |} doesn't match Rbe And(Or(Symbol(C1,1,1),Symbol(C2,1,1)),Symbol(C3,1,1))\nErr: Interval checker failed with value <empty(2;0)>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#openopen1dotSome1dotclose1dotclose_fail_p1p2> ;
  foaf:name        "openopen1dotSome1dotclose1dotclose_fail_p1p2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxInclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 4.4e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMaxinclusiveDOUBLE_pass-double-low> ;
  foaf:name        "1doubleMaxinclusiveDOUBLE_pass-double-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error java.lang.Exception: Not implemented Any yet" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#0focusBNODE_empty_fail-iriFocusLabel> ;
  foaf:name        "0focusBNODE_empty_fail-iriFocusLabel"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(5.00))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(5.00))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(5.00))),None)),None,None,None,None)),None,None)))))]: 4.4 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMininclusiveDECIMALintLeadTrail_fail-decimal-low> ;
  foaf:name        "1decimalMininclusiveDECIMALintLeadTrail_fail-decimal-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotAnnot3_pass> ;
  foaf:name        "1dotAnnot3_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 4 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusivexsd-integer_fail-integer-low> ;
  foaf:name        "1integerMininclusivexsd-integer_fail-integer-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotCode3fail_abort> ;
  foaf:name        "1dotCode3fail_abort"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/x>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#open1dotSomeopen2dotcloseclose_pass_p1> ;
  foaf:name        "open1dotSomeopen2dotcloseclose_pass_p1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: abab passes OR\n(\"abab\": +<http://a.example/vc2>) -> Evidences: abab is a Literal\n abab satisfies MaxLength(5) with length 4\n(\"abab\": +<http://a.example/vc1>) -> Evidences: abab is a Literal\n abab satisfies MinLength(4) with length 4\n----------------------------log-----------------------\n[\"abab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: abab is a Literal\n[\"abab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: abab satisfies MinLength(4) with length 4\n[\"abab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None),Some(IRILabel(<http://a.example/vc2>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: abab is a Literal\n[\"abab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None),Some(IRILabel(<http://a.example/vc2>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: abab satisfies MaxLength(5) with length 4\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: abab passes OR" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExpr1AND1OR1Ref3_pass-vc1vc2vc3> ;
  foaf:name        "1val1vExpr1AND1OR1Ref3_pass-vc1vc2vc3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: abcd is a Literal\n abcd satisfies MaxLength(5) with length 4\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None)),None,None,None,None)),None,None)))))]: abcd is a Literal\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None)),None,None,None,None)),None,None)))))]: abcd satisfies MaxLength(5) with length 4" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalMaxlength_pass-lit-short> ;
  foaf:name        "1literalMaxlength_pass-lit-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxExclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxExclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 6 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMaxexclusiveDECIMALint_fail-integer-high> ;
  foaf:name        "1integerMaxexclusiveDECIMALint_fail-integer-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxInclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 4.4e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMaxinclusiveDECIMAL_pass-double-low> ;
  foaf:name        "1doubleMaxinclusiveDECIMAL_pass-double-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: _:58ad03527ceef733b0ca342c33b31f27 doesn't satisfy facet Length(5) with length 32\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(BNodeKind),None,List(Length(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(BNodeKind),None,List(Length(5)),None)),None,None,None,None)),None,None)))))]: _:58ad03527ceef733b0ca342c33b31f27 is a BlankNode" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1bnodeLength_fail-bnode-short> ;
  foaf:name        "1bnodeLength_fail-bnode-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: TotalDigits(6)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(6)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(6)),None)),None,None,None,None)),None,None)))))]: 123450 is a Literal" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalTotaldigits_pass-integer-equalLeadTrail> ;
  foaf:name        "1literalTotaldigits_pass-integer-equalLeadTrail"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/s> doesn't satisfy facet Length(19) with length 18\n----------------------------log-----------------------\n[<http://a.example/s>,ShapeType(ShapeAnd(List(NodeConstraint(Some(IRIKind),None,List(Length(19)),None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(NodeConstraint(Some(IRIKind),None,List(Length(19)),None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))]: <http://a.example/s> is an IRI" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusIRILength_dot_fail-short> ;
  foaf:name        "1focusIRILength_dot_fail-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: ababab doesn't satisfy facet MaxLength(5) with length 6\n----------------------------log-----------------------\n[\"ababab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: ababab is a Literal\n[\"ababab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: ababab satisfies MinLength(4) with length 6\n[\"ababab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None),Some(IRILabel(<http://a.example/vc2>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: ababab is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExpr1AND1AND1Ref3_failvc2> ;
  foaf:name        "1val1vExpr1AND1AND1Ref3_failvc2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/o1> is not an Literal\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(),None)),Some(1),Some(Star),None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(),None)),Some(1),Some(Star),None,None)),None,None)))))]: a is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalPlus_Is1_Ip1_La,Io1> ;
  foaf:name        "1literalPlus_Is1_Ip1_La,Io1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: FractionDigits(4)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(FractionDigits(4)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(FractionDigits(4)),None)),None,None,None,None)),None,None)))))]: 1.2345 is a Literal" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalFractiondigits_pass-decimal-equalLead> ;
  foaf:name        "1literalFractiondigits_pass-decimal-equalLead"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: TotalDigits(2)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(2)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(2)),None)),None,None,None,None)),None,None)))))]: 128 is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalTotaldigits_fail-byte-long> ;
  foaf:name        "1literalTotaldigits_fail-byte-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 5 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusivexsd-integer_pass-integer-equal> ;
  foaf:name        "1integerMininclusivexsd-integer_pass-integer-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n(\"abcde\": +<http://a.example/vc1>) -> Evidences: abcde is a Literal\n abcde satisfies MinLength(5) with length 5\n----------------------------log-----------------------\n[\"abcde\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc1>))),None,None,None,None)),None,None)))))]: abcde is a Literal\n[\"abcde\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc1>))),None,None,None,None)),None,None)))))]: abcde satisfies MinLength(5) with length 5" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExprRefIRIREF1_pass-lit-equal> ;
  foaf:name        "1val1vExprRefIRIREF1_pass-lit-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: abcd doesn't satisfy facet MinLength(5) with length 4\n----------------------------log-----------------------\n[\"abcd\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc1>))),None,None,None,None)),None,None)))))]: abcd is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExprRefIRIREF1_fail-lit-short> ;
  foaf:name        "1val1vExprRefIRIREF1_fail-lit-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n(\"baba\": +<http://a.example/vc2>) -> Evidences: baba is a Literal\n baba satisfies MaxLength(5) with length 4\n(\"baba\": +<http://a.example/vc1>) -> Evidences: baba is a Literal\n baba satisfies MinLength(4) with length 4\n(\"baba\": +<http://a.example/vc3>) -> Evidences: baba is a Literal\n baba satisfies Pattern((ab)+) with lexical form baba\n----------------------------log-----------------------\n[\"baba\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: baba is a Literal\n[\"baba\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: baba satisfies MinLength(4) with length 4\n[\"baba\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None),Some(IRILabel(<http://a.example/vc2>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: baba is a Literal\n[\"baba\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None),Some(IRILabel(<http://a.example/vc2>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: baba satisfies MaxLength(5) with length 4\n[\"baba\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None),Some(IRILabel(<http://a.example/vc3>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: baba is a Literal\n[\"baba\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None),Some(IRILabel(<http://a.example/vc3>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: baba satisfies Pattern((ab)+) with lexical form baba" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExpr1AND1AND1Ref3_failvc3> ;
  foaf:name        "1val1vExpr1AND1AND1Ref3_failvc3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/x>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#open3Somedotclosecard2_pass-p1p2> ;
  foaf:name        "open3Somedotclosecard2_pass-p1p2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/v1> doesn't belong to set List(StemRange(Wildcard(),Some(List(IRIValue(<http://a.example/v1>), IRIValue(<http://a.example/v2>), IRIValue(<http://a.example/v3>)))))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1dotMinusiri3_v1> ;
  foaf:name        "1val1dotMinusiri3_v1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 4 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveDOUBLELeadTrail_fail-integer-low> ;
  foaf:name        "1integerMininclusiveDOUBLELeadTrail_fail-integer-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: FractionDigits(5)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(FractionDigits(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(FractionDigits(5)),None)),None,None,None,None)),None,None)))))]: 12345 is a Literal" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalFractiondigits_pass-xsd_integer-short> ;
  foaf:name        "1literalFractiondigits_pass-xsd_integer-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/o> doesn't satisfy facet MinLength(19) with length 18\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(MinLength(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(MinLength(19)),None)),None,None,None,None)),None,None)))))]: <http://a.example/o> is an IRI" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1iriMinlength_fail-iri-short> ;
  foaf:name        "1iriMinlength_fail-iri-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/o1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1inversedot_pass-noOthers> ;
  foaf:name        "1inversedot_pass-noOthers"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1card25_pass4> ;
  foaf:name        "1card25_pass4"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: _:844fe496eb798667ec02a52780dc02b1 doesn't match Pattern(.*ab) with lexical form 844fe496eb798667ec02a52780dc02b1\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(Pattern(.*ab)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(Pattern(.*ab)),None)),None,None,None,None)),None,None)))))]: _:844fe496eb798667ec02a52780dc02b1 is NonLiteral" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1nonliteralPattern_fail-bnode-short> ;
  foaf:name        "1nonliteralPattern_fail-bnode-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/s> doesn't satisfy facet MinLength(19) with length 18\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusMinLength-dot_fail-iri-short> ;
  foaf:name        "1focusMinLength-dot_fail-iri-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 5.6 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMininclusiveDOUBLEintLeadTrail_pass-float-high> ;
  foaf:name        "1floatMininclusiveDOUBLEintLeadTrail_pass-float-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: abcd doesn't satisfy facet Length(5) with length 4\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1Length_fail-lit-short> ;
  foaf:name        "1Length_fail-lit-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.50))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(4.50))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(4.50))),None)),None,None,None,None)),None,None)))))]: 4 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveDECIMALLeadTrail_fail-integer-low> ;
  foaf:name        "1integerMininclusiveDECIMALLeadTrail_fail-integer-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/o1> is not an Literal\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literal_fail-iri> ;
  foaf:name        "1literal_fail-iri"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxInclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 5.5 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMaxinclusiveDECIMAL_pass-decimal-equal> ;
  foaf:name        "1decimalMaxinclusiveDECIMAL_pass-decimal-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dot_pass-others_lexicallyEarlier> ;
  foaf:name        "1dot_pass-others_lexicallyEarlier"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinExclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 5.6 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMinexclusiveDOUBLE_pass-float-high> ;
  foaf:name        "1floatMinexclusiveDOUBLE_pass-float-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/x>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotSome2dot_pass_p2p3> ;
  foaf:name        "1dotSome2dot_pass_p2p3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error java.lang.Exception: Error at 4:17 mismatched input ',' expecting {'}', ';', '//', '%'}\n\nError at 4:30 extraneous input '}' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n\nError at 5:17 mismatched input ',' expecting {'{', '}', ';', '//', '*', '+', '?', '%', KW_AND, KW_OR}\n\nError at 5:27 mismatched input '*' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n\nError at 6:17 mismatched input ',' expecting {'}', ';', '//', '%'}\n\nError at 6:27 mismatched input '*' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n\nError at 7:17 mismatched input ',' expecting {'}', ';', '//', '%'}\n\nError at 7:27 mismatched input '{' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#PTstar-greedy-fail> ;
  foaf:name        "PTstar-greedy-fail"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: _:7cac6160256ed215d25b80a838a82c17 doesn't satisfy facet Length(19) with length 32\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(Length(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(Length(19)),None)),None,None,None,None)),None,None)))))]: _:7cac6160256ed215d25b80a838a82c17 is NonLiteral" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1nonliteralLength_pass-bnode-equal> ;
  foaf:name        "1nonliteralLength_pass-bnode-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: <http://a.example/o1> is an IRI\n <http://a.example/o1> satisfies MaxLength(19) with length 19\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(MaxLength(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(MaxLength(19)),None)),None,None,None,None)),None,None)))))]: <http://a.example/o1> is an IRI\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(MaxLength(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(MaxLength(19)),None)),None,None,None,None)),None,None)))))]: <http://a.example/o1> satisfies MaxLength(19) with length 19" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1iriMaxlength_pass-iri-equal> ;
  foaf:name        "1iriMaxlength_pass-iri-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDouble(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDouble(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDouble(4.5))),None)),None,None,None,None)),None,None)))))]: 4.4e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMininclusivexsd-double_fail-double-low> ;
  foaf:name        "1doubleMininclusivexsd-double_fail-double-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: 4.5 doesn't have datatype <http://www.w3.org/2001/XMLSchema#double>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMinexclusiveDECIMAL_fail-float-equal> ;
  foaf:name        "1doubleMinexclusiveDECIMAL_fail-float-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#startCode1startRef_pass> ;
  foaf:name        "startCode1startRef_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinExclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinExclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinExclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 5.6e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMinexclusiveINTEGER_pass-double-high> ;
  foaf:name        "1doubleMinexclusiveINTEGER_pass-double-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MaxExclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MaxExclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 5.6 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMaxexclusiveINTEGER_fail-float-high> ;
  foaf:name        "1floatMaxexclusiveINTEGER_fail-float-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/n1>, shape: <http://a.example/S1> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotInline1_missingReferent> ;
  foaf:name        "1dotInline1_missingReferent"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinExclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 5.6e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMinexclusiveDECIMAL_pass-double-high> ;
  foaf:name        "1doubleMinexclusiveDECIMAL_pass-double-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: TotalDigits(6)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(6)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(6)),None)),None,None,None,None)),None,None)))))]: 123450 is a Literal" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalTotaldigits_pass-integer-equalTrail> ;
  foaf:name        "1literalTotaldigits_pass-integer-equalTrail"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/o> doesn't satisfy facet Length(19) with length 18\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(IRIKind),None,List(Length(19)),None), ShapeRef(IRILabel(<http://a.example/S2>))))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(IRIKind),None,List(Length(19)),None), ShapeRef(IRILabel(<http://a.example/S2>))))),None,None,None,None)),None,None), IRILabel(<http://a.example/S2>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))]: <http://a.example/o> is an IRI" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1iriRefLength1_fail-iri-short> ;
  foaf:name        "1iriRefLength1_fail-iri-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: <http://a.example/s1> is an IRI\n <http://a.example/s1> satisfies Length(19) with length 19\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(ShapeAnd(List(NodeConstraint(Some(IRIKind),None,List(Length(19)),None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(NodeConstraint(Some(IRIKind),None,List(Length(19)),None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))]: <http://a.example/s1> is an IRI\n[<http://a.example/s1>,ShapeType(ShapeAnd(List(NodeConstraint(Some(IRIKind),None,List(Length(19)),None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(NodeConstraint(Some(IRIKind),None,List(Length(19)),None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))]: <http://a.example/s1> satisfies Length(19) with length 19" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusIRILength_dot_pass> ;
  foaf:name        "1focusIRILength_dot_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: 0 == 0\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(DatatypeString(0,<http://www.w3.org/2001/XMLSchema#integer>))))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(DatatypeString(0,<http://www.w3.org/2001/XMLSchema#integer>))))),None,None,None,None)),None,None)))))]: 0 == 0" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1INTEGER_pass> ;
  foaf:name        "1val1INTEGER_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: ab doesn't have datatype <http://a.example/dt1>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1datatype_langString> ;
  foaf:name        "1datatype_langString"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/v2> doesn't belong to set List(StemRange(Wildcard(),Some(List(IRIValue(<http://a.example/v1>), IRIValue(<http://a.example/v2>), IRIValue(<http://a.example/v3>)))))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1dotMinusiriStem3_v2> ;
  foaf:name        "1val1dotMinusiriStem3_v2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 4.5 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMininclusiveDECIMAL_pass-decimal-equalLeadTrail> ;
  foaf:name        "1decimalMininclusiveDECIMAL_pass-decimal-equalLeadTrail"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 4 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveDOUBLEintLeadTrail_fail-integer-low> ;
  foaf:name        "1integerMininclusiveDOUBLEintLeadTrail_fail-integer-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 5.5e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMaxexclusiveDOUBLE_fail-double-equal> ;
  foaf:name        "1doubleMaxexclusiveDOUBLE_fail-double-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: cd passes OR\n(\"cd\": +<http://a.example/vc2>) -> Evidences: cd is a Literal\n cd satisfies Pattern(.*cd.*) with lexical form cd\n----------------------------log-----------------------\n[\"cd\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: cd is a Literal\n[\"cd\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None),Some(IRILabel(<http://a.example/vc2>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: cd is a Literal\n[\"cd\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None),Some(IRILabel(<http://a.example/vc2>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: cd satisfies Pattern(.*cd.*) with lexical form cd\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: cd passes OR" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExpr1OR1OR1Ref3_passvc2> ;
  foaf:name        "1val1vExpr1OR1OR1Ref3_passvc2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: abab is a Literal\n abab satisfies MinLength(4) with length 4\n abab is a Literal\n abab satisfies MaxLength(5) with length 4\n abab is a Literal\n abab satisfies Pattern((ab)+) with lexical form abab\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(ShapeAnd(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)),None,None,None,None)),None,None))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)),None,None,None,None)),None,None)))))))]: abab is a Literal\n[<http://a.example/s1>,ShapeType(ShapeAnd(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)),None,None,None,None)),None,None))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)),None,None,None,None)),None,None)))))))]: abab satisfies MinLength(4) with length 4\n[<http://a.example/s1>,ShapeType(ShapeAnd(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)),None,None,None,None)),None,None))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)),None,None,None,None)),None,None)))))))]: abab is a Literal\n[<http://a.example/s1>,ShapeType(ShapeAnd(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)),None,None,None,None)),None,None))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)),None,None,None,None)),None,None)))))))]: abab satisfies MaxLength(5) with length 4\n[<http://a.example/s1>,ShapeType(ShapeAnd(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)),None,None,None,None)),None,None))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)),None,None,None,None)),None,None)))))))]: abab is a Literal\n[<http://a.example/s1>,ShapeType(ShapeAnd(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)),None,None,None,None)),None,None))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)),None,None,None,None)),None,None)))))))]: abab satisfies Pattern((ab)+) with lexical form abab" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vShapeANDRef3_pass> ;
  foaf:name        "1val1vShapeANDRef3_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/v2> doesn't belong to set List(StemRange(IRIStem(<http://a.example/v>),Some(List(IRIValue(<http://a.example/v1>), IRIValue(<http://a.example/v2>), IRIValue(<http://a.example/v3>)))))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1iriStemMinusiri3_v2> ;
  foaf:name        "1val1iriStemMinusiri3_v2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/s1>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p1>),\"a\"),C1)) doesn't match regular expression\nBag {| C1 -> 1 |} doesn't match Rbe Symbol(C1,2,-)\nErr: Interval checker failed with value <empty(1;0)>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1card2Star_fail1> ;
  foaf:name        "1card2Star_fail1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: FractionDigits(5)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(FractionDigits(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(FractionDigits(5)),None)),None,None,None,None)),None,None)))))]: 12345 is a Literal" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalFractiondigits_pass-integer-short> ;
  foaf:name        "1literalFractiondigits_pass-integer-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: 0e0 doesn't belong to set List(DatatypeString(0.0,<http://www.w3.org/2001/XMLSchema#decimal>))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1DOUBLE_pass> ;
  foaf:name        "1val1DOUBLE_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: ab passes OR\n(\"ab\": +<http://a.example/vc3>) -> Evidences: ab is a Literal\n ab satisfies Pattern((ab)*) with lexical form ab\n(\"ab\": +<http://a.example/vc2>) -> Evidences: ab is a Literal\n ab satisfies MaxLength(3) with length 2\n----------------------------log-----------------------\n[\"ab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(3)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))),None,None,None,None)),None,None)))))]: ab is a Literal\n[\"ab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MaxLength(3)),None),Some(IRILabel(<http://a.example/vc2>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(3)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))),None,None,None,None)),None,None)))))]: ab is a Literal\n[\"ab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MaxLength(3)),None),Some(IRILabel(<http://a.example/vc2>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(3)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))),None,None,None,None)),None,None)))))]: ab satisfies MaxLength(3) with length 2\n[\"ab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None),Some(IRILabel(<http://a.example/vc3>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(3)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))),None,None,None,None)),None,None)))))]: ab is a Literal\n[\"ab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None),Some(IRILabel(<http://a.example/vc3>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(3)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))),None,None,None,None)),None,None)))))]: ab satisfies Pattern((ab)*) with lexical form ab\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(3)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))),None,None,None,None)),None,None)))))]: ab passes OR" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExpr1OR1AND1Ref3_pass-vc2vc3> ;
  foaf:name        "1val1vExpr1OR1AND1Ref3_pass-vc2vc3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error java.lang.Exception: Not implemented Any yet" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#0_other> ;
  foaf:name        "0_other"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: No candidates match. Neighs: List(), Table: CTable { constraints: Map(C1 -> Pos(NodeConstraint(None,None,List(),None)))\n\r\n paths: Map(Direct(<http://a.example/p1>) -> Set(C1))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1card2Star_fail0> ;
  foaf:name        "1card2Star_fail0"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/v3> doesn't belong to set List(StemRange(Wildcard(),Some(List(IRIValue(<http://a.example/v1>), IRIValue(<http://a.example/v2>), IRIValue(<http://a.example/v3>)))))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1dotMinusiri3_v3> ;
  foaf:name        "1val1dotMinusiri3_v3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/v2> doesn't belong to set List(StemRange(Wildcard(),Some(List(IRIValue(<http://a.example/v1>), IRIValue(<http://a.example/v2>), IRIValue(<http://a.example/v3>)))))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1refvsMinusiri3_v2> ;
  foaf:name        "1val1refvsMinusiri3_v2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: abcdef is a Literal\n abcdef satisfies MinLength(5) with length 6\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None)),None,None,None,None)),None,None)))))]: abcdef is a Literal\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None)),None,None,None,None)),None,None)))))]: abcdef satisfies MinLength(5) with length 6" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalMinlength_pass-lit-long> ;
  foaf:name        "1literalMinlength_pass-lit-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: No candidates match. Neighs: List(), Table: CTable { constraints: Map(C1 -> Pos(NodeConstraint(None,None,List(),None)))\n\r\n paths: Map(Direct(<http://a.example/p1>) -> Set(C1))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(ShapeAnd(List(NodeConstraint(None,None,List(Pattern(http://a.example/s1)),None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(NodeConstraint(None,None,List(Pattern(http://a.example/s1)),None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))]: <http://a.example/s1> satisfies Pattern(http://a.example/s1) with lexical form http://a.example/s1" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusPattern-dot_fail-iri-long> ;
  foaf:name        "1focusPattern-dot_fail-iri-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotNSdefault_pass-noOthers> ;
  foaf:name        "1dotNSdefault_pass-noOthers"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/n1>: +<http://a.example/S1>) -> Evidences: <http://a.example/n2> passes OR\n(<http://a.example/n2>: +<http://a.example/S2>) -> Evidences: \n----------------------------log-----------------------\n[<http://a.example/n1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/S2>)), ShapeRef(IRILabel(<http://a.example/S3>)), ShapeRef(IRILabel(<http://a.example/S4>))))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/S2>)), ShapeRef(IRILabel(<http://a.example/S3>)), ShapeRef(IRILabel(<http://a.example/S4>))))),None,None,None,None)),None,None), IRILabel(<http://a.example/S2>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), IRILabel(<http://a.example/S3>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), IRILabel(<http://a.example/S4>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))]: <http://a.example/n2> passes OR" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotRefOR3_passShape1Shape2Shape3> ;
  foaf:name        "1dotRefOR3_passShape1Shape2Shape3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MaxInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MaxInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 5.6 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMaxinclusiveINTEGER_fail-float-high> ;
  foaf:name        "1floatMaxinclusiveINTEGER_fail-float-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: ef is a Literal\n ef satisfies Pattern(.*ef) with lexical form ef\n ef passes OR\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None)))))]: ef is a Literal\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None)))))]: ef is a Literal\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None)))))]: ef is a Literal\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None)))))]: ef satisfies Pattern(.*ef) with lexical form ef\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None)))))]: ef passes OR" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExprOR3_passvc3> ;
  foaf:name        "1val1vExprOR3_passvc3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/n1>: +<http://a.example/S1>) -> Evidences: <http://a.example/n1> passes OR\n <http://a.example/n1> satisfies not(Shape(-, false, -, TripleConstraint(-, -, http://a.example/p3, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -))\n <http://a.example/n1> passes OR\n <http://a.example/n1> satisfies not(Shape(-, false, -, TripleConstraint(-, -, http://a.example/p5, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -))\n <http://a.example/n1> passes OR\n <http://a.example/n1> passes OR\n(<http://a.example/n1>: -Shape(-, false, -, TripleConstraint(-, -, http://a.example/p5, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -)) -> Error: Error: Attempt: node: <http://a.example/n1>, shape: <http://a.example/S1> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0]\n(<http://a.example/n1>: -Shape(-, false, -, TripleConstraint(-, -, http://a.example/p3, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -)) -> Error: Error: Attempt: node: <http://a.example/n1>, shape: <http://a.example/S1> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0]\n----------------------------log-----------------------\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> passes OR\n[<http://a.example/n1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None),None,Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> doesn't satisfy Shape(-, false, -, TripleConstraint(-, -, http://a.example/p3, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -). Negation declared in <http://a.example/S1>. Error: ViolationError(Attempt: node: <http://a.example/n1>, shape: <http://a.example/S1> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0])\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> satisfies not(Shape(-, false, -, TripleConstraint(-, -, http://a.example/p3, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -))\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> passes OR\n[<http://a.example/n1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None),None,Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> doesn't satisfy Shape(-, false, -, TripleConstraint(-, -, http://a.example/p5, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -). Negation declared in <http://a.example/S1>. Error: ViolationError(Attempt: node: <http://a.example/n1>, shape: <http://a.example/S1> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0])\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> satisfies not(Shape(-, false, -, TripleConstraint(-, -, http://a.example/p5, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -))\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> passes OR\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> passes OR" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#NOT1dotOR2dotX3AND1_pass-Shape2> ;
  foaf:name        "NOT1dotOR2dotX3AND1_pass-Shape2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error java.lang.Exception: CTable: Not implemented table generation for inclusion" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#2SomeInclude1-after_pass> ;
  foaf:name        "2SomeInclude1-after_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error java.lang.Exception: Error at 4:12 no viable alternative at input '(:a.,'\n\nError at 4:12 extraneous input ',' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n\nError at 4:19 mismatched input ')' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n\nError at 4:32 extraneous input '}' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#repeated-group> ;
  foaf:name        "repeated-group"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: _:e3464f05dabdef2b339a89f5de492f9f doesn't satisfy facet MaxLength(19) with length 32\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MaxLength(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MaxLength(19)),None)),None,None,None,None)),None,None)))))]: _:e3464f05dabdef2b339a89f5de492f9f is NonLiteral" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1nonliteralMaxlength_fail-bnode-long> ;
  foaf:name        "1nonliteralMaxlength_fail-bnode-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: None of the alternatives of OR(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))) is valid for node <http://a.example/n1>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#NOT1dotOR2dot_fail-Shape2> ;
  foaf:name        "NOT1dotOR2dot_fail-Shape2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: <http://a.example/o1a> is NonLiteral\n <http://a.example/o1a> satisfies MinLength(19) with length 20\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MinLength(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MinLength(19)),None)),None,None,None,None)),None,None)))))]: <http://a.example/o1a> is NonLiteral\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MinLength(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MinLength(19)),None)),None,None,None,None)),None,None)))))]: <http://a.example/o1a> satisfies MinLength(19) with length 20" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1nonliteralMinlength_pass-iri-long> ;
  foaf:name        "1nonliteralMinlength_pass-iri-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: _:289fdb27267bb03ae5d6814d38cf42ac is not an IRI\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1iriLength_fail-bnode-equal> ;
  foaf:name        "1iriLength_fail-bnode-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error es.weso.rdf.parser.RDFParserException: RDFParserException: Value of predicate <http://www.w3.org/ns/shacl/test-suite#focus> must be a IRI but it is: _:d7d6df691f8e377b68495939b3045226" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusLength-dot_fail-bnode-short> ;
  foaf:name        "1focusLength-dot_fail-bnode-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/x>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#open3Somedotclosecard23_pass-p1p3> ;
  foaf:name        "open3Somedotclosecard23_pass-p1p3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error es.weso.rdf.parser.RDFParserException: RDFParserException: Value of predicate <http://www.w3.org/ns/shacl/test-suite#focus> must be a IRI but it is: _:cd3026580384f802547ca7089f31bdec" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusBNODE_dot_pass> ;
  foaf:name        "1focusBNODE_dot_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/v3> doesn't belong to set List(StemRange(Wildcard(),Some(List(IRIValue(<http://a.example/v1>), IRIValue(<http://a.example/v2>), IRIValue(<http://a.example/v3>)))))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1refvsMinusiri3_v3> ;
  foaf:name        "1val1refvsMinusiri3_v3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: 5 doesn't have datatype <http://www.w3.org/2001/XMLSchema#decimal>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMaxexclusivexsd-byte_fail-byte-equal> ;
  foaf:name        "1decimalMaxexclusivexsd-byte_fail-byte-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: _:a9a989d37c7d023d26bed6307c3bcfe1 is a BlankNode\n _:a9a989d37c7d023d26bed6307c3bcfe1 satisfies MinLength(5) with length 32\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(BNodeKind),None,List(MinLength(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(BNodeKind),None,List(MinLength(5)),None)),None,None,None,None)),None,None)))))]: _:a9a989d37c7d023d26bed6307c3bcfe1 is a BlankNode\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(BNodeKind),None,List(MinLength(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(BNodeKind),None,List(MinLength(5)),None)),None,None,None,None)),None,None)))))]: _:a9a989d37c7d023d26bed6307c3bcfe1 satisfies MinLength(5) with length 32" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1bnodeMinlength_pass-bnode-equal> ;
  foaf:name        "1bnodeMinlength_pass-bnode-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinExclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 4.4 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMinexclusiveDECIMAL_fail-decimal-low> ;
  foaf:name        "1decimalMinexclusiveDECIMAL_fail-decimal-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: 1.234 doesn't have datatype <http://www.w3.org/2001/XMLSchema#integer>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1datatypeLength_fail-wrongDatatype> ;
  foaf:name        "1datatypeLength_fail-wrongDatatype"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/o1> doesn't belong to set List(StemRange(Wildcard(),Some(List(IRIValue(<http://a.example/v1>), IRIValue(<http://a.example/v2>), IRIValue(<http://a.example/v3>)))))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1dotMinusiriStem3_pass> ;
  foaf:name        "1val1dotMinusiriStem3_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#startNoCode1_pass> ;
  foaf:name        "startNoCode1_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 6 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveDOUBLELeadTrail_pass-integer-high> ;
  foaf:name        "1integerMininclusiveDOUBLELeadTrail_pass-integer-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxInclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 5.6 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMaxinclusiveDECIMAL_fail-float-high> ;
  foaf:name        "1floatMaxinclusiveDECIMAL_fail-float-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 5.6 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMaxexclusiveDECIMAL_fail-decimal-high> ;
  foaf:name        "1decimalMaxexclusiveDECIMAL_fail-decimal-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 5.5e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMaxexclusiveDOUBLELeadTrail_fail-double-equal> ;
  foaf:name        "1doubleMaxexclusiveDOUBLELeadTrail_fail-double-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 5.1 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMininclusiveINTEGER_pass-high> ;
  foaf:name        "1floatMininclusiveINTEGER_pass-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxInclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 5.6 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMaxinclusiveDOUBLE_fail-float-high> ;
  foaf:name        "1floatMaxinclusiveDOUBLE_fail-float-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/v4> doesn't belong to set List(StemRange(IRIStem(<http://a.example/v>),Some(List(IRIValue(<http://a.example/v1>), IRIValue(<http://a.example/v2>), IRIValue(<http://a.example/v3>)))))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1iriStemMinusiriStem3_passIv4> ;
  foaf:name        "1val1iriStemMinusiriStem3_passIv4"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: TotalDigits(5)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None)))))]: 1.2345ab is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalTotaldigits_fail-malformedxsd_decimal-1_2345ab> ;
  foaf:name        "1literalTotaldigits_fail-malformedxsd_decimal-1_2345ab"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxInclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 5.5 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMaxinclusiveDOUBLE_pass-decimal-equal> ;
  foaf:name        "1decimalMaxinclusiveDOUBLE_pass-decimal-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +:S1) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotLNdefault_pass-noOthers> ;
  foaf:name        "1dotLNdefault_pass-noOthers"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: ababab passes OR\n(\"ababab\": +<http://a.example/vc1>) -> Evidences: ababab is a Literal\n ababab satisfies MinLength(5) with length 6\n----------------------------log-----------------------\n[\"ababab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(3)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))),None,None,None,None)),None,None)))))]: ababab is a Literal\n[\"ababab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(3)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))),None,None,None,None)),None,None)))))]: ababab satisfies MinLength(5) with length 6\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(3)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))),None,None,None,None)),None,None)))))]: ababab passes OR" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExpr1OR1AND1Ref3_pass-vc1vc3> ;
  foaf:name        "1val1vExpr1OR1AND1Ref3_pass-vc1vc3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 4.4 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMaxexclusiveDECIMAL_pass-decimal-low> ;
  foaf:name        "1decimalMaxexclusiveDECIMAL_pass-decimal-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 4.4 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMininclusiveDOUBLEintLeadTrail_fail-float-low> ;
  foaf:name        "1floatMininclusiveDOUBLEintLeadTrail_fail-float-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(5.00))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDecimal(5.00))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDecimal(5.00))),None)),None,None,None,None)),None,None)))))]: 4.4e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMininclusiveDECIMALintLeadTrail_fail-double-low> ;
  foaf:name        "1doubleMininclusiveDECIMALintLeadTrail_fail-double-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error es.weso.rdf.parser.RDFParserException: RDFParserException: Value of predicate <http://www.w3.org/ns/shacl/test-suite#focus> must be a IRI but it is: _:d7d6df691f8e377b68495939b3045226" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusIRI_dot_fail-bnodeFocusLabel> ;
  foaf:name        "1focusIRI_dot_fail-bnodeFocusLabel"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: a passes OR\n(\"a\": +<http://a.example/vc3>) -> Evidences: a is a Literal\n a satisfies Pattern((ab)*) with lexical form a\n----------------------------log-----------------------\n[\"a\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: a is a Literal\n[\"a\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None),Some(IRILabel(<http://a.example/vc3>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: a is a Literal\n[\"a\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None),Some(IRILabel(<http://a.example/vc3>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: a satisfies Pattern((ab)*) with lexical form a\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: a passes OR" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExpr1AND1OR1Ref3_failvc1vc2vc3> ;
  foaf:name        "1val1vExpr1AND1OR1Ref3_failvc1vc2vc3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: <http://a.example/s1> satisfies MaxLength(19) with length 19\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(ShapeAnd(List(NodeConstraint(None,None,List(MaxLength(19)),None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(NodeConstraint(None,None,List(MaxLength(19)),None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))]: <http://a.example/s1> satisfies MaxLength(19) with length 19" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusMaxLength-dot_pass-iri-equal> ;
  foaf:name        "1focusMaxLength-dot_pass-iri-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: _:271457ae8ed42759cfbe5c7e0a4ddb23 is not an IRI\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1iriRefLength1_fail-bnode-equal> ;
  foaf:name        "1iriRefLength1_fail-bnode-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: 5.5 doesn't have datatype <http://www.w3.org/2001/XMLSchema#float>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMaxinclusivexsd-float_fail-decimal-equal> ;
  foaf:name        "1floatMaxinclusivexsd-float_fail-decimal-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/o1> doesn't belong to set List(StemRange(Wildcard(),Some(List(IRIValue(<http://a.example/v1>), IRIValue(<http://a.example/v2>), IRIValue(<http://a.example/v3>)))))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1dotMinusiri3_pass> ;
  foaf:name        "1val1dotMinusiri3_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/v1a> doesn't belong to set List(StemRange(IRIStem(<http://a.example/v>),Some(List())))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1iriStem_passv1a> ;
  foaf:name        "1val1iriStem_passv1a"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/x>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p3>),\"p3-0\"),C3), ((Direct(<http://a.example/p4>),\"p4-0\"),C4), ((Direct(<http://a.example/p2>),\"p2-0\"),C2), ((Direct(<http://a.example/p1>),\"p1-0\"),C1)) doesn't match regular expression\nBag {| C1 -> 1, C2 -> 1, C3 -> 1, C4 -> 1 |} doesn't match Rbe Repeat(Or(Or(Or(Symbol(C1,1,1),Symbol(C2,1,1)),Symbol(C3,1,1)),Symbol(C4,1,1)),2,3)\nErr: symbol: Unexpected C1 doesn't match Symbol(C4,0,0). open: false, controlled: List(C1, C2, C3, C4)\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#open4Somedotclosecard23_fail-p1p2p3p4> ;
  foaf:name        "open4Somedotclosecard23_fail-p1p2p3p4"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: <http://a.example/o1> is an IRI\n <http://a.example/o1> satisfies Length(19) with length 19\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(Length(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(Length(19)),None)),None,None,None,None)),None,None)))))]: <http://a.example/o1> is an IRI\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(Length(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(Length(19)),None)),None,None,None,None)),None,None)))))]: <http://a.example/o1> satisfies Length(19) with length 19" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1iriLength_pass-iri-equal> ;
  foaf:name        "1iriLength_pass-iri-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.50))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(4.50))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(4.50))),None)),None,None,None,None)),None,None)))))]: 4.5 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMininclusiveDECIMALLeadTrail_pass-decimal-equalLeadTrail> ;
  foaf:name        "1decimalMininclusiveDECIMALLeadTrail_pass-decimal-equalLeadTrail"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.50))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(4.50))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(4.50))),None)),None,None,None,None)),None,None)))))]: 4.5 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMininclusiveDECIMALLeadTrail_pass-decimal-equal> ;
  foaf:name        "1decimalMininclusiveDECIMALLeadTrail_pass-decimal-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 5 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveINTEGERLead_pass-integer-equal> ;
  foaf:name        "1integerMininclusiveINTEGERLead_pass-integer-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: None of the alternatives of OR(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>)))))) is valid for node abcd\n----------------------------log-----------------------\n[\"abcd\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(3)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))),None,None,None,None)),None,None)))))]: abcd is a Literal\n[\"abcd\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MaxLength(3)),None),Some(IRILabel(<http://a.example/vc2>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(3)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))),None,None,None,None)),None,None)))))]: abcd is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExpr1OR1AND1Ref3_failvc1vc2vc3> ;
  foaf:name        "1val1vExpr1OR1AND1Ref3_failvc1vc2vc3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: TotalDigits(6)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(6)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(6)),None)),None,None,None,None)),None,None)))))]: 1234560 is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalTotaldigits_fail-integer-longTrail> ;
  foaf:name        "1literalTotaldigits_fail-integer-longTrail"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MaxInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MaxInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 4.4 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMaxinclusiveINTEGER_pass-decimal-low> ;
  foaf:name        "1decimalMaxinclusiveINTEGER_pass-decimal-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/x>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#open3Somedotclosecard23_pass-p1p2> ;
  foaf:name        "open3Somedotclosecard23_pass-p1p2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n(\"baba\": +<http://a.example/vc4>) -> Evidences: \n(\"baba\": +<http://a.example/vc2>) -> Evidences: baba is a Literal\n baba satisfies MaxLength(5) with length 4\n(\"baba\": +<http://a.example/vc1>) -> Evidences: baba is a Literal\n baba satisfies MinLength(4) with length 4\n(\"baba\": +<http://a.example/vc3>) -> Evidences: baba is a Literal\n baba satisfies Pattern((ab)+) with lexical form baba\n----------------------------log-----------------------\n[\"baba\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc4>))),None,None,None,None)),None,None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None), IRILabel(<http://a.example/vc4>) -> ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))))]: baba is a Literal\n[\"baba\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc4>))),None,None,None,None)),None,None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None), IRILabel(<http://a.example/vc4>) -> ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))))]: baba satisfies MinLength(4) with length 4\n[\"baba\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None),Some(IRILabel(<http://a.example/vc2>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc4>))),None,None,None,None)),None,None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None), IRILabel(<http://a.example/vc4>) -> ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))))]: baba is a Literal\n[\"baba\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None),Some(IRILabel(<http://a.example/vc2>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc4>))),None,None,None,None)),None,None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None), IRILabel(<http://a.example/vc4>) -> ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))))]: baba satisfies MaxLength(5) with length 4\n[\"baba\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None),Some(IRILabel(<http://a.example/vc3>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc4>))),None,None,None,None)),None,None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None), IRILabel(<http://a.example/vc4>) -> ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))))]: baba is a Literal\n[\"baba\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None),Some(IRILabel(<http://a.example/vc3>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc4>))),None,None,None,None)),None,None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None), IRILabel(<http://a.example/vc4>) -> ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))))]: baba satisfies Pattern((ab)+) with lexical form baba" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExprRefAND3_failvc3> ;
  foaf:name        "1val1vExprRefAND3_failvc3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#startCode1_pass> ;
  foaf:name        "startCode1_pass"
] .

<https://github.com/labra/shaclex/>
        a                          earl:TestSubject , doap:Project , earl:Software ;
        dc:creator                 <http://www.di.uniovi.es/~labra#me> ;
        dc:date                    "2017-01-04T07:28:17.747Z"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
        dc:description             "shaclex"@en ;
        dc:title                   "shaclex" ;
        doap:developer             <http://www.di.uniovi.es/~labra#me> ;
        doap:documenter            <http://www.di.uniovi.es/~labra#me> ;
        doap:download-page         "https://github.com/labra/shaclex/" ;
        doap:homepage              "https://github.com/labra/shaclex/" ;
        doap:implements            "http://www.w3.org/TR/turtle/" ;
        doap:maintainer            <http://www.di.uniovi.es/~labra#me> ;
        doap:maker                 <http://www.di.uniovi.es/~labra#me> ;
        doap:name                  "shaclex" ;
        doap:programming-language  "Scala" ;
        doap:release               [ a             doap:Version ;
                                     doap:created  "2013-08-28"^^<http://www.w3.org/2001/XMLSchema#date> ;
                                     doap:name     "shaclex"
                                   ] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/n4>, shape: <http://a.example/S2> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotRefAND3_failShape1Shape2> ;
  foaf:name        "1dotRefAND3_failShape1Shape2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: ^ab$ doesn't match Pattern(^ab$) with lexical form ^ab$\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(^ab$)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(^ab$)),None)),None,None,None,None)),None,None)))))]: ^ab$ is a Literal" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalPattern_pass-StartlitEnd-match> ;
  foaf:name        "1literalPattern_pass-StartlitEnd-match"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.50))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDecimal(4.50))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDecimal(4.50))),None)),None,None,None,None)),None,None)))))]: 04.50e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMininclusiveDECIMALLeadTrail_pass-double-equalLeadTrail> ;
  foaf:name        "1doubleMininclusiveDECIMALLeadTrail_pass-double-equalLeadTrail"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MaxInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MaxInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 5.6 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMaxinclusiveINTEGER_fail-decimal-high> ;
  foaf:name        "1decimalMaxinclusiveINTEGER_fail-decimal-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/o> doesn't satisfy facet MinLength(19) with length 18\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MinLength(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MinLength(19)),None)),None,None,None,None)),None,None)))))]: <http://a.example/o> is NonLiteral" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1nonliteralMinlength_fail-iri-short> ;
  foaf:name        "1nonliteralMinlength_fail-iri-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 5.6e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMininclusiveDOUBLELeadTrail_pass-double-high> ;
  foaf:name        "1doubleMininclusiveDOUBLELeadTrail_pass-double-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: TotalDigits(5)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None)))))]: 1.23456 is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalTotaldigits_fail-decimal-longLead> ;
  foaf:name        "1literalTotaldigits_fail-decimal-longLead"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 5 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveDOUBLEint_pass-integer-equal> ;
  foaf:name        "1integerMininclusiveDOUBLEint_pass-integer-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/n2>, shape: _:S2 Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1refbnode1_fail-g2-arc> ;
  foaf:name        "1refbnode1_fail-g2-arc"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/x>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#open3Somedotclosecard2_pass-p1p3> ;
  foaf:name        "open3Somedotclosecard2_pass-p1p3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: ab has datatype <http://www.w3.org/1999/02/22-rdf-syntax-ns#langString>\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString>),List(),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/1999/02/22-rdf-syntax-ns#langString>),List(),None)),None,None,None,None)),None,None)))))]: ab has datatype <http://www.w3.org/1999/02/22-rdf-syntax-ns#langString>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1datatypelangString_pass> ;
  foaf:name        "1datatypelangString_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/x>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p3>),\"p3-0\"),C3), ((Direct(<http://a.example/p2>),\"p2-0\"),C2), ((Direct(<http://a.example/p1>),\"p1-0\"),C1)) doesn't match regular expression\nBag {| C1 -> 1, C2 -> 1, C3 -> 1 |} doesn't match Rbe Or(Symbol(C1,1,1),And(Symbol(C2,1,1),Symbol(C3,1,1)))\nErr: Interval checker failed with value [2;2]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotSome2dotExtra-someOf_pass_p1p2p3> ;
  foaf:name        "1dotSome2dotExtra-someOf_pass_p1p2p3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error es.weso.rdf.parser.RDFParserException: RDFParserException: Value of predicate <http://www.w3.org/ns/shacl/test-suite#focus> must be a IRI but it is: _:496d0773e9bb207e007709e5e54b5cf8" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusBNODELength_dot_fail-long> ;
  foaf:name        "1focusBNODELength_dot_fail-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1a>: +<http://a.example/S1>) -> Evidences: <http://a.example/s1a> satisfies MinLength(19) with length 20\n----------------------------log-----------------------\n[<http://a.example/s1a>,ShapeType(ShapeAnd(List(NodeConstraint(None,None,List(MinLength(19)),None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(NodeConstraint(None,None,List(MinLength(19)),None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))]: <http://a.example/s1a> satisfies MinLength(19) with length 20" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusMinLength-dot_pass-iri-long> ;
  foaf:name        "1focusMinLength-dot_pass-iri-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error java.lang.Exception: Error at 4:17 mismatched input ',' expecting {'}', ';', '//', '%'}\n\nError at 4:30 extraneous input '}' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n\nError at 5:17 mismatched input ',' expecting {'{', '}', ';', '//', '*', '+', '?', '%', KW_AND, KW_OR}\n\nError at 5:27 mismatched input '*' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n\nError at 6:17 mismatched input ',' expecting {'}', ';', '//', '%'}\n\nError at 6:27 mismatched input '*' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n\nError at 7:17 mismatched input ',' expecting {'}', ';', '//', '%'}\n\nError at 7:27 mismatched input '{' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#PstarT> ;
  foaf:name        "PstarT"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxInclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 5.6 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMaxinclusiveDOUBLE_fail-decimal-high> ;
  foaf:name        "1decimalMaxinclusiveDOUBLE_fail-decimal-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: abcdef passes OR\n(\"abcdef\": +<http://a.example/vc1>) -> Evidences: abcdef is a Literal\n abcdef satisfies Pattern(ab.*) with lexical form abcdef\n----------------------------log-----------------------\n[\"abcdef\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: abcdef is a Literal\n[\"abcdef\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: abcdef satisfies Pattern(ab.*) with lexical form abcdef\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: abcdef passes OR" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExpr1OR1OR1Ref3_passvc1vc2vc3> ;
  foaf:name        "1val1vExpr1OR1OR1Ref3_passvc1vc2vc3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/x>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#open3groupdotclosecard23_pass-p1p2p3X3> ;
  foaf:name        "open3groupdotclosecard23_pass-p1p2p3X3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 4.4e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMininclusiveDOUBLELeadTrail_fail-double-low> ;
  foaf:name        "1doubleMininclusiveDOUBLELeadTrail_fail-double-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: <http://a.example/o1> is an IRI\n <http://a.example/o1> satisfies Length(19) with length 19\n(<http://a.example/o1>: +<http://a.example/S2>) -> Evidences: \n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(IRIKind),None,List(Length(19)),None), ShapeRef(IRILabel(<http://a.example/S2>))))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(IRIKind),None,List(Length(19)),None), ShapeRef(IRILabel(<http://a.example/S2>))))),None,None,None,None)),None,None), IRILabel(<http://a.example/S2>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))]: <http://a.example/o1> is an IRI\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(IRIKind),None,List(Length(19)),None), ShapeRef(IRILabel(<http://a.example/S2>))))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(IRIKind),None,List(Length(19)),None), ShapeRef(IRILabel(<http://a.example/S2>))))),None,None,None,None)),None,None), IRILabel(<http://a.example/S2>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))]: <http://a.example/o1> satisfies Length(19) with length 19" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1iriRefLength1_pass-iri-equal> ;
  foaf:name        "1iriRefLength1_pass-iri-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinExclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 5.6e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMinexclusiveDOUBLE_pass-double-high> ;
  foaf:name        "1doubleMinexclusiveDOUBLE_pass-double-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: a doesn't belong to set List(LangString(ab,@en-fr))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1LANGTAG_LaLTen-fr> ;
  foaf:name        "1val1LANGTAG_LaLTen-fr"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: <http://a.example/o1a> is an IRI\n <http://a.example/o1a> satisfies MinLength(19) with length 20\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(MinLength(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(MinLength(19)),None)),None,None,None,None)),None,None)))))]: <http://a.example/o1a> is an IRI\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(MinLength(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(MinLength(19)),None)),None,None,None,None)),None,None)))))]: <http://a.example/o1a> satisfies MinLength(19) with length 20" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1iriMinlength_pass-iri-long> ;
  foaf:name        "1iriMinlength_pass-iri-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinExclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 4.5e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMinexclusiveDECIMAL_fail-double-equal> ;
  foaf:name        "1doubleMinexclusiveDECIMAL_fail-double-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/s1>, shape: <http://a.example/S1> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotAnnotIRIREF_missing> ;
  foaf:name        "1dotAnnotIRIREF_missing"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/n1>: +<http://a.example/S1>) -> Evidences: \n(<http://a.example/n1>: +<http://a.example/S2>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotRef1_selfReference> ;
  foaf:name        "1dotRef1_selfReference"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/v1a> doesn't belong to set List(StemRange(IRIStem(<http://a.example/v>),Some(List(IRIValue(<http://a.example/v1>), IRIValue(<http://a.example/v2>), IRIValue(<http://a.example/v3>)))))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1iriStemMinusiriStem3_v1a> ;
  foaf:name        "1val1iriStemMinusiriStem3_v1a"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/x>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p1>),\"p1-1\"),C1), ((Direct(<http://a.example/p1>),\"p1-2\"),C1), ((Direct(<http://a.example/p1>),\"p1-0\"),C1)) doesn't match regular expression\nBag {| C1 -> 3 |} doesn't match Rbe Repeat(Or(Or(Symbol(C1,1,1),Symbol(C2,1,1)),Symbol(C3,1,1)),2,2)\nErr: Found C1 but max. cardinality is 0. Current deriv: Symbol(C1,0,0)\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#open3Somedotclosecard2_fail-p1X3> ;
  foaf:name        "open3Somedotclosecard2_fail-p1X3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 04.50e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMininclusiveDOUBLELeadTrail_pass-double-equalLeadTrail> ;
  foaf:name        "1doubleMininclusiveDOUBLELeadTrail_pass-double-equalLeadTrail"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/n1>: +<http://a.example/S1>) -> Evidences: <http://a.example/n1> satisfies not(Shape(-, false, -, TripleConstraint(-, -, http://a.example/p1, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -))\n <http://a.example/n1> passes OR\n <http://a.example/n1> satisfies not(Shape(-, false, -, TripleConstraint(-, -, http://a.example/p3, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -))\n <http://a.example/n1> passes OR\n <http://a.example/n1> satisfies not(Shape(-, false, -, TripleConstraint(-, -, http://a.example/p5, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -))\n <http://a.example/n1> passes OR\n(<http://a.example/n1>: -Shape(-, false, -, TripleConstraint(-, -, http://a.example/p3, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -)) -> Error: Error: Attempt: node: <http://a.example/n1>, shape: <http://a.example/S1> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0]\n(<http://a.example/n1>: -Shape(-, false, -, TripleConstraint(-, -, http://a.example/p1, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -)) -> Error: Error: Attempt: node: <http://a.example/n1>, shape: <http://a.example/S1> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0]\n(<http://a.example/n1>: -Shape(-, false, -, TripleConstraint(-, -, http://a.example/p5, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -)) -> Error: Error: Attempt: node: <http://a.example/n1>, shape: <http://a.example/S1> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0]\n----------------------------log-----------------------\n[<http://a.example/n1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None),None,Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> doesn't satisfy Shape(-, false, -, TripleConstraint(-, -, http://a.example/p1, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -). Negation declared in <http://a.example/S1>. Error: ViolationError(Attempt: node: <http://a.example/n1>, shape: <http://a.example/S1> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0])\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> satisfies not(Shape(-, false, -, TripleConstraint(-, -, http://a.example/p1, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -))\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> passes OR\n[<http://a.example/n1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None),None,Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> doesn't satisfy Shape(-, false, -, TripleConstraint(-, -, http://a.example/p3, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -). Negation declared in <http://a.example/S1>. Error: ViolationError(Attempt: node: <http://a.example/n1>, shape: <http://a.example/S1> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0])\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> satisfies not(Shape(-, false, -, TripleConstraint(-, -, http://a.example/p3, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -))\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> passes OR\n[<http://a.example/n1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None),None,Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> doesn't satisfy Shape(-, false, -, TripleConstraint(-, -, http://a.example/p5, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -). Negation declared in <http://a.example/S1>. Error: ViolationError(Attempt: node: <http://a.example/n1>, shape: <http://a.example/S1> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0])\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> satisfies not(Shape(-, false, -, TripleConstraint(-, -, http://a.example/p5, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -))\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> passes OR" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#NOT1dotOR2dotX3_pass-NoShape1> ;
  foaf:name        "NOT1dotOR2dotX3_pass-NoShape1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Closed shape. But rest <http://a.example/p0> is not in List(Inverse(<http://www.w3.org/ns/shacl#targetNode>)) or List()\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotClosed_fail_lower> ;
  foaf:name        "1dotClosed_fail_lower"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: _:cac86c76218f4fa227c2906f59a69ac4 is NonLiteral\n _:cac86c76218f4fa227c2906f59a69ac4 satisfies MinLength(19) with length 32\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MinLength(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MinLength(19)),None)),None,None,None,None)),None,None)))))]: _:cac86c76218f4fa227c2906f59a69ac4 is NonLiteral\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MinLength(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MinLength(19)),None)),None,None,None,None)),None,None)))))]: _:cac86c76218f4fa227c2906f59a69ac4 satisfies MinLength(19) with length 32" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1nonliteralMinlength_pass-bnode-equal> ;
  foaf:name        "1nonliteralMinlength_pass-bnode-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: _:011222ea4ce4e73e5d6ebf292146c987 doesn't satisfy facet Length(19) with length 32\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(Length(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(Length(19)),None)),None,None,None,None)),None,None)))))]: _:011222ea4ce4e73e5d6ebf292146c987 is NonLiteral" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1nonliteralLength_fail-bnode-short> ;
  foaf:name        "1nonliteralLength_fail-bnode-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/n1>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p1>),<http://a.example/n3>),C1), ((Direct(<http://a.example/p1>),<http://a.example/n2>),C1)) doesn't match regular expression\nBag {| C1 -> 2 |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [2;2]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotRef1_overReferrer> ;
  foaf:name        "1dotRef1_overReferrer"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error java.lang.Exception: Error at 4:15 mismatched input ',' expecting {'}', ';', '//', '%'}\n\nError at 4:27 extraneous input '|' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n\nError at 4:43 mismatched input ')' expecting {<EOF>, '{', '~', '@', '&', KW_BASE, KW_PREFIX, KW_START, KW_CLOSED, KW_EXTRA, KW_PATTERN, KW_AND, KW_OR, KW_MININCLUSIVE, KW_MINEXCLUSIVE, KW_MAXINCLUSIVE, KW_MAXEXCLUSIVE, KW_LENGTH, KW_MINLENGTH, KW_MAXLENGTH, KW_TOTALDIGITS, KW_FRACTIONDIGITS, IRIREF, PNAME_NS, PNAME_LN, ATPNAME_NS, ATPNAME_LN, BLANK_NODE_LABEL}\n\nError at 4:51 extraneous input '}' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#false-lead-excluding-value-shape> ;
  foaf:name        "false-lead-excluding-value-shape"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: _:7b3eb235e3dad9af842acc0aaa774f73 doesn't satisfy facet MaxLength(5) with length 32\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(BNodeKind),None,List(MaxLength(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(BNodeKind),None,List(MaxLength(5)),None)),None,None,None,None)),None,None)))))]: _:7b3eb235e3dad9af842acc0aaa774f73 is a BlankNode" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1bnodeMaxlength_pass-bnode-short> ;
  foaf:name        "1bnodeMaxlength_pass-bnode-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: 5.5e0 doesn't have datatype <http://www.w3.org/2001/XMLSchema#decimal>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMaxinclusiveDECIMAL_fail-double-equal> ;
  foaf:name        "1decimalMaxinclusiveDECIMAL_fail-double-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: abcdef doesn't satisfy facet Length(5) with length 6\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1Length_fail-lit-long> ;
  foaf:name        "1Length_fail-lit-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotSemi_pass-noOthers> ;
  foaf:name        "1dotSemi_pass-noOthers"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/s> doesn't satisfy facet Length(19) with length 18\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusLength-dot_fail-iri-short> ;
  foaf:name        "1focusLength-dot_fail-iri-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinExclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinExclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinExclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 4 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMinexclusiveDOUBLEint_fail-integer-low> ;
  foaf:name        "1integerMinexclusiveDOUBLEint_fail-integer-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: _:0fb36c623c9c5c054143d9139c50cc1b is NonLiteral\n _:0fb36c623c9c5c054143d9139c50cc1b satisfies MinLength(19) with length 32\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MinLength(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MinLength(19)),None)),None,None,None,None)),None,None)))))]: _:0fb36c623c9c5c054143d9139c50cc1b is NonLiteral\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MinLength(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MinLength(19)),None)),None,None,None,None)),None,None)))))]: _:0fb36c623c9c5c054143d9139c50cc1b satisfies MinLength(19) with length 32" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1nonliteralMinlength_fail-bnode-short> ;
  foaf:name        "1nonliteralMinlength_fail-bnode-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotCode1_pass> ;
  foaf:name        "1dotCode1_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinExclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 5.6 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMinexclusiveDECIMAL_pass-decimal-high> ;
  foaf:name        "1decimalMinexclusiveDECIMAL_pass-decimal-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotExtra1_pass-iri1> ;
  foaf:name        "1dotExtra1_pass-iri1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: abcd doesn't satisfy facet Length(5) with length 4\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Length(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Length(5)),None)),None,None,None,None)),None,None)))))]: abcd is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalLength_fail-lit-short> ;
  foaf:name        "1literalLength_fail-lit-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 5 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveDECIMALint_pass-integer-equal> ;
  foaf:name        "1integerMininclusiveDECIMALint_pass-integer-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/s1> is not a BlankNode\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusBNODELength_dot_fail-iriFocusLabel-equal> ;
  foaf:name        "1focusBNODELength_dot_fail-iriFocusLabel-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error java.lang.Exception: Error at 4:17 mismatched input ',' expecting {'}', ';', '//', '%'}\n\nError at 4:30 extraneous input '}' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n\nError at 5:17 mismatched input ',' expecting {'{', '}', ';', '//', '*', '+', '?', '%', KW_AND, KW_OR}\n\nError at 5:27 mismatched input '*' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n\nError at 6:17 mismatched input ',' expecting {'}', ';', '//', '%'}\n\nError at 6:27 mismatched input '*' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n\nError at 7:17 mismatched input ',' expecting {'}', ';', '//', '%'}\n\nError at 7:27 mismatched input '{' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#PTstar> ;
  foaf:name        "PTstar"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 5.6e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMaxexclusiveDOUBLE_fail-double-high> ;
  foaf:name        "1doubleMaxexclusiveDOUBLE_fail-double-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/n1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotInline1_overMatchesReferent> ;
  foaf:name        "1dotInline1_overMatchesReferent"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 5 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveDOUBLE_pass-integer-equal> ;
  foaf:name        "1integerMininclusiveDOUBLE_pass-integer-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: FractionDigits(5)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(FractionDigits(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(FractionDigits(5)),None)),None,None,None,None)),None,None)))))]: 1.234567 is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalFractiondigits_fail-decimal-long> ;
  foaf:name        "1literalFractiondigits_fail-decimal-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: ab has datatype <http://a.example/dt1>\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://a.example/dt1>),List(),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://a.example/dt1>),List(),None)),None,None,None,None)),None,None)))))]: ab has datatype <http://a.example/dt1>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1datatype_pass> ;
  foaf:name        "1datatype_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 5.6e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMininclusiveDOUBLEintLeadTrail_pass-double-high> ;
  foaf:name        "1doubleMininclusiveDOUBLEintLeadTrail_pass-double-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: None of the alternatives of OR(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>)))) is valid for node a\n----------------------------log-----------------------\n[\"a\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: a is a Literal\n[\"a\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None),Some(IRILabel(<http://a.example/vc2>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: a is a Literal\n[\"a\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None),Some(IRILabel(<http://a.example/vc3>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: a is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExpr1OR1OR1Ref3_fail> ;
  foaf:name        "1val1vExpr1OR1OR1Ref3_fail"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: abc is a Literal\n abc satisfies Pattern(ab) with lexical form abc\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab)),None)),None,None,None,None)),None,None)))))]: abc is a Literal\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab)),None)),None,None,None,None)),None,None)))))]: abc satisfies Pattern(ab) with lexical form abc" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalPattern_fail-lit-long> ;
  foaf:name        "1literalPattern_fail-lit-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error java.lang.Exception: CTable: Not implemented table generation for inclusion" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#2SomeInclude1_pass> ;
  foaf:name        "2SomeInclude1_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: ab doesn't belong to set List(DatatypeString(0,<http://www.w3.org/2001/XMLSchema#integer>))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1INTEGER_Lab> ;
  foaf:name        "1val1INTEGER_Lab"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: 4.5 doesn't have datatype <http://www.w3.org/2001/XMLSchema#integer>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveINTEGER_fail-float-equal> ;
  foaf:name        "1integerMininclusiveINTEGER_fail-float-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: ab doesn't satisfy facet MinLength(4) with length 2\n----------------------------log-----------------------\n[\"ab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: ab is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExpr1AND1AND1Ref3_failvc1> ;
  foaf:name        "1val1vExpr1AND1AND1Ref3_failvc1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s>: +ex:S1) -> Evidences: ex:o3 == ex:o3\n ex:o2 == ex:o2\n ex:o1 == ex:o1\n----------------------------log-----------------------\n[<http://a.example/s>,ShapeType(Shape(None,Some(false),Some(List(<http://a.example/p1>, <http://a.example/p2>, <http://a.example/p3>)),Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o1>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o2>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o3>))))),None,None,None,None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(Some(ex: <http://a.example/>|),None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),Some(List(<http://a.example/p1>, <http://a.example/p2>, <http://a.example/p3>)),Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o1>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o2>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o3>))))),None,None,None,None)),None,None,None,None)),None,None)))))]: ex:o3 == ex:o3\n[<http://a.example/s>,ShapeType(Shape(None,Some(false),Some(List(<http://a.example/p1>, <http://a.example/p2>, <http://a.example/p3>)),Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o1>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o2>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o3>))))),None,None,None,None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(Some(ex: <http://a.example/>|),None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),Some(List(<http://a.example/p1>, <http://a.example/p2>, <http://a.example/p3>)),Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o1>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o2>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o3>))))),None,None,None,None)),None,None,None,None)),None,None)))))]: ex:o2 == ex:o2\n[<http://a.example/s>,ShapeType(Shape(None,Some(false),Some(List(<http://a.example/p1>, <http://a.example/p2>, <http://a.example/p3>)),Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o1>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o2>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o3>))))),None,None,None,None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(Some(ex: <http://a.example/>|),None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),Some(List(<http://a.example/p1>, <http://a.example/p2>, <http://a.example/p3>)),Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o1>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o2>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o3>))))),None,None,None,None)),None,None,None,None)),None,None)))))]: ex:o1 == ex:o1" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#3groupdotExtra3NLex_pass-iri1> ;
  foaf:name        "3groupdotExtra3NLex_pass-iri1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(5.00))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(5.00))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(5.00))),None)),None,None,None,None)),None,None)))))]: 4 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveDECIMALintLeadTrail_fail-integer-low> ;
  foaf:name        "1integerMininclusiveDECIMALintLeadTrail_fail-integer-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error es.weso.rdf.parser.RDFParserException: RDFParserException: Value of predicate <http://www.w3.org/ns/shacl/test-suite#shape> must be a IRI but it is: _:ebade3a76448de50895259e5a1726d21" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#bnode1dot_pass-others_lexicallyEarlier> ;
  foaf:name        "bnode1dot_pass-others_lexicallyEarlier"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/x>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p1>),\"p1-3\"),C1), ((Direct(<http://a.example/p1>),\"p1-1\"),C1), ((Direct(<http://a.example/p1>),\"p1-2\"),C1), ((Direct(<http://a.example/p1>),\"p1-0\"),C1)) doesn't match regular expression\nBag {| C1 -> 4 |} doesn't match Rbe Repeat(Or(Or(Symbol(C1,1,1),Symbol(C2,1,1)),Symbol(C3,1,1)),2,2)\nErr: Found C1 but max. cardinality is 0. Current deriv: Symbol(C1,0,0)\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#open3Somedotclosecard2_fail-p1X4> ;
  foaf:name        "open3Somedotclosecard2_fail-p1X4"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/s1a> doesn't satisfy facet Length(19) with length 20\n----------------------------log-----------------------\n[<http://a.example/s1a>,ShapeType(ShapeAnd(List(NodeConstraint(Some(IRIKind),None,List(Length(19)),None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(NodeConstraint(Some(IRIKind),None,List(Length(19)),None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))]: <http://a.example/s1a> is an IRI" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusIRILength_dot_fail-long> ;
  foaf:name        "1focusIRILength_dot_fail-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error es.weso.rdf.parser.RDFParserException: RDFParserException: objectFromPredicate: Not found triples with subject _:1353c1d29cc77ae97463ccb2ba50dd76 and predicate <http://www.w3.org/ns/shacl/test-suite#shape>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#startRefbnode_pass-noOthers> ;
  foaf:name        "startRefbnode_pass-noOthers"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 5.0 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMininclusiveINTEGER_pass-equalTrail> ;
  foaf:name        "1floatMininclusiveINTEGER_pass-equalTrail"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/s1>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p1>),<http://a.example/v2>),C1), ((Direct(<http://a.example/p1>),<http://a.example/v1>),C1)) doesn't match regular expression\nBag {| C1 -> 2 |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [2;2]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1IRIREF_v1v2> ;
  foaf:name        "1val1IRIREF_v1v2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinExclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 4.4 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMinexclusiveDOUBLE_fail-decimal-low> ;
  foaf:name        "1decimalMinexclusiveDOUBLE_fail-decimal-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/n1>: +<http://a.example/S1>) -> Evidences: <http://a.example/n1> satisfies not(Shape(-, false, -, TripleConstraint(-, -, http://a.example/p1, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -))\n <http://a.example/n1> passes OR\n(<http://a.example/n1>: -Shape(-, false, -, TripleConstraint(-, -, http://a.example/p1, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -)) -> Error: Error: No candidates match. Neighs: List(), Table: CTable { constraints: Map(C1 -> Pos(NodeConstraint(None,None,List(),None)))\n\r\n paths: Map(Direct(<http://a.example/p1>) -> Set(C1))\n----------------------------log-----------------------\n[<http://a.example/n1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None),None,Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None)))))))]: <http://a.example/n1> doesn't satisfy Shape(-, false, -, TripleConstraint(-, -, http://a.example/p1, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -). Negation declared in <http://a.example/S1>. Error: ViolationError(No candidates match. Neighs: List(), Table: CTable { constraints: Map(C1 -> Pos(NodeConstraint(None,None,List(),None)))\n\r\n paths: Map(Direct(<http://a.example/p1>) -> Set(C1)))\n[<http://a.example/n1>,ShapeType(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None)))))))]: <http://a.example/n1> satisfies not(Shape(-, false, -, TripleConstraint(-, -, http://a.example/p1, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -))\n[<http://a.example/n1>,ShapeType(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None)))))))]: <http://a.example/n1> passes OR" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#NOT1dotOR2dot_pass-empty> ;
  foaf:name        "NOT1dotOR2dot_pass-empty"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: FractionDigits(4)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(FractionDigits(4)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(FractionDigits(4)),None)),None,None,None,None)),None,None)))))]: 1.23456 is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalFractiondigits_fail-decimal-longTrail> ;
  foaf:name        "1literalFractiondigits_fail-decimal-longTrail"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n(\"abab\": +<http://a.example/vc2>) -> Evidences: abab is a Literal\n abab satisfies MaxLength(5) with length 4\n(\"abab\": +<http://a.example/vc1>) -> Evidences: abab is a Literal\n abab satisfies MinLength(4) with length 4\n(\"abab\": +<http://a.example/vc3>) -> Evidences: abab is a Literal\n abab satisfies Pattern((ab)+) with lexical form abab\n----------------------------log-----------------------\n[\"abab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: abab is a Literal\n[\"abab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: abab satisfies MinLength(4) with length 4\n[\"abab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None),Some(IRILabel(<http://a.example/vc2>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: abab is a Literal\n[\"abab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None),Some(IRILabel(<http://a.example/vc2>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: abab satisfies MaxLength(5) with length 4\n[\"abab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None),Some(IRILabel(<http://a.example/vc3>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: abab is a Literal\n[\"abab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None),Some(IRILabel(<http://a.example/vc3>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: abab satisfies Pattern((ab)+) with lexical form abab" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExpr1AND1AND1Ref3_pass> ;
  foaf:name        "1val1vExpr1AND1AND1Ref3_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: 5.5 doesn't have datatype <http://www.w3.org/2001/XMLSchema#decimal>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMaxinclusiveDECIMAL_fail-float-equal> ;
  foaf:name        "1decimalMaxinclusiveDECIMAL_fail-float-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 4.5 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMininclusivexsd-decimal_pass-decimal-equal> ;
  foaf:name        "1decimalMininclusivexsd-decimal_pass-decimal-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 4.5 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMininclusiveDOUBLELeadTrail_pass-decimal-equalLeadTrail> ;
  foaf:name        "1decimalMininclusiveDOUBLELeadTrail_pass-decimal-equalLeadTrail"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/o1>, shape: <http://a.example/S1> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1inversedot_fail-missing> ;
  foaf:name        "1inversedot_fail-missing"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 04.50 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMininclusiveDOUBLELeadTrail_pass-float-equalLeadTrail> ;
  foaf:name        "1floatMininclusiveDOUBLELeadTrail_pass-float-equalLeadTrail"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/v1a> doesn't belong to set List(StemRange(Wildcard(),Some(List(IRIValue(<http://a.example/v1>), IRIValue(<http://a.example/v2>), IRIValue(<http://a.example/v3>)))))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1dotMinusiriStem3_v1a> ;
  foaf:name        "1val1dotMinusiriStem3_v1a"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s>: +<http://a.example/S1>) -> Evidences: <http://a.example/s> satisfies MaxLength(19) with length 18\n----------------------------log-----------------------\n[<http://a.example/s>,ShapeType(ShapeAnd(List(NodeConstraint(None,None,List(MaxLength(19)),None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(NodeConstraint(None,None,List(MaxLength(19)),None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))]: <http://a.example/s> satisfies MaxLength(19) with length 18" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusMaxLength-dot_pass-iri-short> ;
  foaf:name        "1focusMaxLength-dot_pass-iri-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxInclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 4 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMaxinclusiveDOUBLEint_pass-integer-low> ;
  foaf:name        "1integerMaxinclusiveDOUBLEint_pass-integer-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxExclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxExclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 5.5e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMaxexclusiveDOUBLEint_fail-double-equal> ;
  foaf:name        "1doubleMaxexclusiveDOUBLEint_fail-double-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +ex:S1) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotLNex-HYPHEN_MINUS_pass-noOthers> ;
  foaf:name        "1dotLNex-HYPHEN_MINUS_pass-noOthers"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 5 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveDOUBLELeadTrail_pass-integer-equal> ;
  foaf:name        "1integerMininclusiveDOUBLELeadTrail_pass-integer-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: abcd doesn't satisfy facet MinLength(5) with length 4\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None)),None,None,None,None)),None,None)))))]: abcd is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalMinlength_fail-lit-short> ;
  foaf:name        "1literalMinlength_fail-lit-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: <http://a.example/o1> is NonLiteral\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(),None)),None,None,None,None)),None,None)))))]: <http://a.example/o1> is NonLiteral" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1nonliteral_pass-iri> ;
  foaf:name        "1nonliteral_pass-iri"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 4 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveINTEGERLead_fail-integer-low> ;
  foaf:name        "1integerMininclusiveINTEGERLead_fail-integer-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: <http://a.example/s1> is NonLiteral\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(ShapeAnd(List(NodeConstraint(Some(NonLiteralKind),None,List(),None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(NodeConstraint(Some(NonLiteralKind),None,List(),None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))]: <http://a.example/s1> is NonLiteral" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusnonLiteral-dot_pass-iri-equal> ;
  foaf:name        "1focusnonLiteral-dot_pass-iri-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: 2015-12-25T01:23:45Z doesn't have datatype <http://www.w3.org/2001/XMLSchema#integer>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveINTEGER_fail-dateTime-equal> ;
  foaf:name        "1integerMininclusiveINTEGER_fail-dateTime-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/v> doesn't belong to set List(StemRange(IRIStem(<http://a.example/v>),Some(List(IRIValue(<http://a.example/v1>), IRIValue(<http://a.example/v2>), IRIValue(<http://a.example/v3>)))))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1iriStemMinusiri3_passIv> ;
  foaf:name        "1val1iriStemMinusiri3_passIv"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.50))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(4.50))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(4.50))),None)),None,None,None,None)),None,None)))))]: 4.4 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMininclusiveDECIMALLeadTrail_fail-decimal-low> ;
  foaf:name        "1decimalMininclusiveDECIMALLeadTrail_fail-decimal-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: abcdef doesn't satisfy facet Length(5) with length 6\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Length(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Length(5)),None)),None,None,None,None)),None,None)))))]: abcdef is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalLength_fail-lit-long> ;
  foaf:name        "1literalLength_fail-lit-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 5.5 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMaxexclusiveDOUBLE_fail-decimal-equal> ;
  foaf:name        "1decimalMaxexclusiveDOUBLE_fail-decimal-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#startCode3fail_abort> ;
  foaf:name        "startCode3fail_abort"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.50))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDecimal(4.50))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDecimal(4.50))),None)),None,None,None,None)),None,None)))))]: 4.4 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMininclusiveDECIMALLeadTrail_fail-float-low> ;
  foaf:name        "1floatMininclusiveDECIMALLeadTrail_fail-float-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.50))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(4.50))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(4.50))),None)),None,None,None,None)),None,None)))))]: 5 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveDECIMALLeadTrail_pass-integer-equal> ;
  foaf:name        "1integerMininclusiveDECIMALLeadTrail_pass-integer-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error es.weso.rdf.parser.RDFParserException: RDFParserException: Value of predicate <http://www.w3.org/ns/shacl/test-suite#focus> must be a IRI but it is: _:cd3026580384f802547ca7089f31bdec" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusMaxLength-dot_pass-bnode-equal> ;
  foaf:name        "1focusMaxLength-dot_pass-bnode-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: TotalDigits(6)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(6)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(6)),None)),None,None,None,None)),None,None)))))]: 1234560 is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalTotaldigits_fail-integer-longLeadTrail> ;
  foaf:name        "1literalTotaldigits_fail-integer-longLeadTrail"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 4.5 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMininclusiveDOUBLELeadTrail_pass-decimal-equal> ;
  foaf:name        "1decimalMininclusiveDOUBLELeadTrail_pass-decimal-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDouble(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDouble(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDouble(4.5))),None)),None,None,None,None)),None,None)))))]: 4.4 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMininclusivexsd-float_fail-float-low> ;
  foaf:name        "1floatMininclusivexsd-float_fail-float-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: TotalDigits(5)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None)))))]: 12345 is a Literal" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalTotaldigits_pass-integer-equalLead> ;
  foaf:name        "1literalTotaldigits_pass-integer-equalLead"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxInclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 6 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMaxinclusiveDOUBLEint_fail-integer-high> ;
  foaf:name        "1integerMaxinclusiveDOUBLEint_fail-integer-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: ababab passes OR\n(\"ababab\": +<http://a.example/vc3>) -> Evidences: ababab is a Literal\n ababab satisfies Pattern((ab)*) with lexical form ababab\n----------------------------log-----------------------\n[\"ababab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: ababab is a Literal\n[\"ababab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: ababab satisfies MinLength(4) with length 6\n[\"ababab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None),Some(IRILabel(<http://a.example/vc2>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: ababab is a Literal\n[\"ababab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None),Some(IRILabel(<http://a.example/vc3>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: ababab is a Literal\n[\"ababab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None),Some(IRILabel(<http://a.example/vc3>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: ababab satisfies Pattern((ab)*) with lexical form ababab\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: ababab passes OR" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExpr1AND1OR1Ref3_pass-vc1vc3> ;
  foaf:name        "1val1vExpr1AND1OR1Ref3_pass-vc1vc3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/v3> doesn't belong to set List(StemRange(IRIStem(<http://a.example/v>),Some(List(IRIValue(<http://a.example/v1>), IRIValue(<http://a.example/v2>), IRIValue(<http://a.example/v3>)))))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1iriStemMinusiriStem3_v3> ;
  foaf:name        "1val1iriStemMinusiriStem3_v3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error es.weso.rdf.parser.RDFParserException: RDFParserException: Value of predicate <http://www.w3.org/ns/shacl/test-suite#focus> must be a IRI but it is: _:d7d6df691f8e377b68495939b3045226" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#0_otherbnode> ;
  foaf:name        "0_otherbnode"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: true doesn't belong to set List(DatatypeString(false,<http://www.w3.org/2001/XMLSchema#boolean>))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1false_true> ;
  foaf:name        "1val1false_true"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error es.weso.rdf.parser.RDFParserException: RDFParserException: Value of predicate <http://www.w3.org/ns/shacl/test-suite#focus> must be a IRI but it is: _:d7d6df691f8e377b68495939b3045226" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#0focusBNODE_empty> ;
  foaf:name        "0focusBNODE_empty"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/x>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#open3groupdotcloseCode1-p1p2p3> ;
  foaf:name        "open3groupdotcloseCode1-p1p2p3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 4.5e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMininclusiveDOUBLE_pass-double-equal> ;
  foaf:name        "1doubleMininclusiveDOUBLE_pass-double-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxExclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxExclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 4 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMaxexclusiveINTEGER_pass-integer-low> ;
  foaf:name        "1integerMaxexclusiveINTEGER_pass-integer-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n(\"abcde\": +_:vc1) -> Evidences: abcde is a Literal\n abcde satisfies MinLength(5) with length 5\n----------------------------log-----------------------\n[\"abcde\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None),Some(BNodeLabel(_:vc1)),Schema(None,None,None,None,Some(Map(BNodeLabel(_:vc1) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(BNodeLabel(_:vc1))),None,None,None,None)),None,None)))))]: abcde is a Literal\n[\"abcde\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None),Some(BNodeLabel(_:vc1)),Schema(None,None,None,None,Some(Map(BNodeLabel(_:vc1) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(BNodeLabel(_:vc1))),None,None,None,None)),None,None)))))]: abcde satisfies MinLength(5) with length 5" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExprRefbnode1_pass-lit-equal> ;
  foaf:name        "1val1vExprRefbnode1_pass-lit-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: No candidates match. Neighs: List(), Table: CTable { constraints: Map(C1 -> Pos(NodeConstraint(None,None,List(),None)))\n\r\n paths: Map(Direct(<http://a.example/p1>) -> Set(C1))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dot-base_fail-empty> ;
  foaf:name        "1dot-base_fail-empty"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/n1>: +<http://a.example/S1>) -> Evidences: _:df51a63738329109807f9072a70ed25e is a BlankNode\n(_:df51a63738329109807f9072a70ed25e: +<http://a.example/S2>) -> Evidences: \n----------------------------log-----------------------\n[<http://a.example/n1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(BNodeKind),None,List(),None), ShapeRef(IRILabel(<http://a.example/S2>))))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(BNodeKind),None,List(),None), ShapeRef(IRILabel(<http://a.example/S2>))))),None,None,None,None)),None,None), IRILabel(<http://a.example/S2>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))]: _:df51a63738329109807f9072a70ed25e is a BlankNode" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1bnodeRef1_pass-bnode> ;
  foaf:name        "1bnodeRef1_pass-bnode"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: _:51f86c4f4d85d21d1233ee01dd457b52 doesn't satisfy facet Length(5) with length 32\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(BNodeKind),None,List(Length(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(BNodeKind),None,List(Length(5)),None)),None,None,None,None)),None,None)))))]: _:51f86c4f4d85d21d1233ee01dd457b52 is a BlankNode" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1bnodeLength_fail-bnode-long> ;
  foaf:name        "1bnodeLength_fail-bnode-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 4 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMaxinclusiveINTEGER_pass-integer-low> ;
  foaf:name        "1integerMaxinclusiveINTEGER_pass-integer-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error es.weso.rdf.parser.RDFParserException: RDFParserException: Value of predicate <http://www.w3.org/ns/shacl/test-suite#focus> must be a IRI but it is: _:496d0773e9bb207e007709e5e54b5cf8" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusPatternB-dot_fail-bnode-long> ;
  foaf:name        "1focusPatternB-dot_fail-bnode-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error es.weso.rdf.parser.RDFParserException: RDFParserException: objectFromPredicate: Not found triples with subject _:2aae1e462aa4f97b1902800252c67c61 and predicate <http://www.w3.org/ns/shacl/test-suite#shape>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#startRefIRIREF_fail-missing> ;
  foaf:name        "startRefIRIREF_fail-missing"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error es.weso.rdf.parser.RDFParserException: RDFParserException: Value of predicate <http://www.w3.org/ns/shacl/test-suite#focus> must be a IRI but it is: _:496d0773e9bb207e007709e5e54b5cf8" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusLength-dot_fail-bnode-long> ;
  foaf:name        "1focusLength-dot_fail-bnode-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 5.6e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMininclusiveINTEGERLead_pass-double-high> ;
  foaf:name        "1doubleMininclusiveINTEGERLead_pass-double-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/x>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#open3Somedotclosecard23_pass-p1X3> ;
  foaf:name        "open3Somedotclosecard23_pass-p1X3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: 4.5e0 doesn't have datatype <http://www.w3.org/2001/XMLSchema#decimal>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMininclusiveDECIMAL_fail-double-equal> ;
  foaf:name        "1decimalMininclusiveDECIMAL_fail-double-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/v2> doesn't belong to set List(StemRange(IRIStem(<http://a.example/v>),Some(List(IRIValue(<http://a.example/v1>), IRIValue(<http://a.example/v2>), IRIValue(<http://a.example/v3>)))))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1iriStemMinusiriStem3_v2> ;
  foaf:name        "1val1iriStemMinusiriStem3_v2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 6 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveINTEGERLead_pass-integer-high> ;
  foaf:name        "1integerMininclusiveINTEGERLead_pass-integer-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: _:8a34b6c78eb283564018dd65b20d6a49 is not an Literal\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalPattern_fail-bnode-match> ;
  foaf:name        "1literalPattern_fail-bnode-match"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.50))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDecimal(4.50))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDecimal(4.50))),None)),None,None,None,None)),None,None)))))]: 4.5 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMininclusiveDECIMALLeadTrail_pass-float-equal> ;
  foaf:name        "1floatMininclusiveDECIMALLeadTrail_pass-float-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: <http://a.example/o1> is an IRI\n <http://a.example/o1> satisfies MinLength(19) with length 19\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(MinLength(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(MinLength(19)),None)),None,None,None,None)),None,None)))))]: <http://a.example/o1> is an IRI\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(MinLength(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(MinLength(19)),None)),None,None,None,None)),None,None)))))]: <http://a.example/o1> satisfies MinLength(19) with length 19" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1iriMinlength_pass-iri-equal> ;
  foaf:name        "1iriMinlength_pass-iri-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s>: +<http://a.example/S1>) -> Evidences: <http://a.example/o3> == <http://a.example/o3>\n <http://a.example/o2> == <http://a.example/o2>\n <http://a.example/o1> == <http://a.example/o1>\n----------------------------log-----------------------\n[<http://a.example/s>,ShapeType(Shape(None,Some(false),Some(List(<http://a.example/p1>, <http://a.example/p2>, <http://a.example/p3>)),Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o1>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o2>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o3>))))),None,None,None,None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),Some(List(<http://a.example/p1>, <http://a.example/p2>, <http://a.example/p3>)),Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o1>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o2>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o3>))))),None,None,None,None)),None,None,None,None)),None,None)))))]: <http://a.example/o3> == <http://a.example/o3>\n[<http://a.example/s>,ShapeType(Shape(None,Some(false),Some(List(<http://a.example/p1>, <http://a.example/p2>, <http://a.example/p3>)),Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o1>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o2>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o3>))))),None,None,None,None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),Some(List(<http://a.example/p1>, <http://a.example/p2>, <http://a.example/p3>)),Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o1>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o2>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o3>))))),None,None,None,None)),None,None,None,None)),None,None)))))]: <http://a.example/o2> == <http://a.example/o2>\n[<http://a.example/s>,ShapeType(Shape(None,Some(false),Some(List(<http://a.example/p1>, <http://a.example/p2>, <http://a.example/p3>)),Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o1>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o2>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o3>))))),None,None,None,None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),Some(List(<http://a.example/p1>, <http://a.example/p2>, <http://a.example/p3>)),Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o1>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o2>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o3>))))),None,None,None,None)),None,None,None,None)),None,None)))))]: <http://a.example/o1> == <http://a.example/o1>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#3groupdotExtra3_pass-iri1> ;
  foaf:name        "3groupdotExtra3_pass-iri1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/> doesn't belong to set List(StemRange(IRIStem(<http://a.example/v>),Some(List())))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1iriStem_fail> ;
  foaf:name        "1val1iriStem_fail"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: a doesn't belong to set List(DatatypeString(ab,<http://a.example/bloodType>))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1IRIREFDatatype_LaDTbloodType> ;
  foaf:name        "1val1IRIREFDatatype_LaDTbloodType"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/x>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p3>),\"p3-0\"),C3), ((Direct(<http://a.example/p2>),\"p2-0\"),C2), ((Direct(<http://a.example/p1>),\"p1-0\"),C1)) doesn't match regular expression\nBag {| C1 -> 1, C2 -> 1, C3 -> 1 |} doesn't match Rbe Repeat(Or(Or(Symbol(C1,1,1),Symbol(C2,1,1)),Symbol(C3,1,1)),2,2)\nErr: symbol: Unexpected C1 doesn't match Symbol(C3,0,0). open: false, controlled: List(C1, C2, C3)\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#open3Somedotclosecard2_fail-p1p2p3> ;
  foaf:name        "open3Somedotclosecard2_fail-p1p2p3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 4.5 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMininclusiveDOUBLE_pass-decimal-equalLeadTrail> ;
  foaf:name        "1decimalMininclusiveDOUBLE_pass-decimal-equalLeadTrail"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: TotalDigits(5)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None)))))]: 1.2345 is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalTotaldigits_fail-float-equal> ;
  foaf:name        "1literalTotaldigits_fail-float-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotCode3_pass> ;
  foaf:name        "1dotCode3_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n(\"ef\": +<http://a.example/vc4>) -> Evidences: ef passes OR\n(\"ef\": +<http://a.example/vc3>) -> Evidences: ef is a Literal\n ef satisfies Pattern(.*ef) with lexical form ef\n----------------------------log-----------------------\n[\"ef\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc4>))),None,None,None,None)),None,None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/vc4>) -> ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))))]: ef is a Literal\n[\"ef\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None),Some(IRILabel(<http://a.example/vc2>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc4>))),None,None,None,None)),None,None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/vc4>) -> ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))))]: ef is a Literal\n[\"ef\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None),Some(IRILabel(<http://a.example/vc3>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc4>))),None,None,None,None)),None,None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/vc4>) -> ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))))]: ef is a Literal\n[\"ef\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None),Some(IRILabel(<http://a.example/vc3>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc4>))),None,None,None,None)),None,None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/vc4>) -> ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))))]: ef satisfies Pattern(.*ef) with lexical form ef\n[\"ef\",ShapeType(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>)))),Some(IRILabel(<http://a.example/vc4>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc4>))),None,None,None,None)),None,None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/vc4>) -> ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))))]: ef passes OR" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExprRefOR3_passvc3> ;
  foaf:name        "1val1vExprRefOR3_passvc3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: FractionDigits(4)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(FractionDigits(4)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(FractionDigits(4)),None)),None,None,None,None)),None,None)))))]: 1.23456 is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalFractiondigits_fail-decimal-longLead> ;
  foaf:name        "1literalFractiondigits_fail-decimal-longLead"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/n1>: +<http://a.example/S1>) -> Evidences: <http://a.example/n1> passes OR\n----------------------------log-----------------------\n[<http://a.example/n1>,ShapeType(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None)))))))]: <http://a.example/n1> passes OR" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#NOT1dotOR2dot_pass-Shape2> ;
  foaf:name        "NOT1dotOR2dot_pass-Shape2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotCodeWithEscapes1_pass> ;
  foaf:name        "1dotCodeWithEscapes1_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotShapeCode1_pass> ;
  foaf:name        "1dotShapeCode1_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/o1a> doesn't satisfy facet MaxLength(19) with length 20\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(MaxLength(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(MaxLength(19)),None)),None,None,None,None)),None,None)))))]: <http://a.example/o1a> is an IRI" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1iriMaxlength_fail-iri-long> ;
  foaf:name        "1iriMaxlength_fail-iri-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: FractionDigits(4)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(FractionDigits(4)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(FractionDigits(4)),None)),None,None,None,None)),None,None)))))]: 1.2345 is a Literal" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalFractiondigits_pass-decimal-equalLeadTrail> ;
  foaf:name        "1literalFractiondigits_pass-decimal-equalLeadTrail"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error java.lang.Exception: Error at 4:11 mismatched input ',' expecting {'}', ';', '//', '%'}\n\nError at 4:18 mismatched input '+' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n\nError at 4:26 mismatched input ')' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n\nError at 4:34 extraneous input '}' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#nPlus1-greedy_fail> ;
  foaf:name        "nPlus1-greedy_fail"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericDecimal(5.50))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxExclusive(NumericDecimal(5.50))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxExclusive(NumericDecimal(5.50))),None)),None,None,None,None)),None,None)))))]: 5.5e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMaxexclusiveDECIMALLeadTrail_fail-double-equal> ;
  foaf:name        "1doubleMaxexclusiveDECIMALLeadTrail_fail-double-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: TotalDigits(5)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None)))))]: 1.2345 is a Literal" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalTotaldigits_pass-decimal-equal> ;
  foaf:name        "1literalTotaldigits_pass-decimal-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: 0e0 doesn't belong to set List(DatatypeString(0.0,<http://www.w3.org/2001/XMLSchema#decimal>))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1DOUBLElowercase_passUC> ;
  foaf:name        "1val1DOUBLElowercase_passUC"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1card2Star_pass2> ;
  foaf:name        "1card2Star_pass2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 4.4 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMininclusiveINTEGERLead_fail-decimal-low> ;
  foaf:name        "1decimalMininclusiveINTEGERLead_fail-decimal-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.50))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(4.50))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(4.50))),None)),None,None,None,None)),None,None)))))]: 5 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveDECIMALLeadTrail_pass-integer-equalLead> ;
  foaf:name        "1integerMininclusiveDECIMALLeadTrail_pass-integer-equalLead"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxInclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 5.5 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMaxinclusiveDOUBLE_pass-float-equal> ;
  foaf:name        "1floatMaxinclusiveDOUBLE_pass-float-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/x>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#open3Somedotclosecard23_pass-p1p2p3> ;
  foaf:name        "open3Somedotclosecard23_pass-p1p2p3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: ab is a literal but should be a NonLiteral\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1nonliteralPattern_fail-lit-match> ;
  foaf:name        "1nonliteralPattern_fail-lit-match"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinExclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinExclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinExclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 4.4 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMinexclusiveINTEGER_fail-decimal-low> ;
  foaf:name        "1decimalMinexclusiveINTEGER_fail-decimal-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 6 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMaxinclusiveINTEGER_fail-integer-high> ;
  foaf:name        "1integerMaxinclusiveINTEGER_fail-integer-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: _:27fc6c43a5ed5c8ff481d8e89a38ce46 is not an Literal\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalTotaldigits_fail-bnode> ;
  foaf:name        "1literalTotaldigits_fail-bnode"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 04.50 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMininclusiveDOUBLE_pass-float-equalLeadTrail> ;
  foaf:name        "1floatMininclusiveDOUBLE_pass-float-equalLeadTrail"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: 5.5 doesn't have datatype <http://www.w3.org/2001/XMLSchema#decimal>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMaxexclusiveDECIMAL_fail-float-equal> ;
  foaf:name        "1decimalMaxexclusiveDECIMAL_fail-float-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 4.4 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMininclusivexsd-decimal_fail-decimal-low> ;
  foaf:name        "1decimalMininclusivexsd-decimal_fail-decimal-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: <http://a.example/s1> satisfies Pattern(http://a.example/s1) with lexical form http://a.example/s1\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(ShapeAnd(List(NodeConstraint(None,None,List(Pattern(http://a.example/s1)),None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(NodeConstraint(None,None,List(Pattern(http://a.example/s1)),None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))]: <http://a.example/s1> satisfies Pattern(http://a.example/s1) with lexical form http://a.example/s1" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusPattern-dot_pass-iri-match> ;
  foaf:name        "1focusPattern-dot_pass-iri-match"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: 123456 doesn't satisfy facet Length(5) with length 6\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(Length(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(Length(5)),None)),None,None,None,None)),None,None)))))]: 123456 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1datatypeLength_fail-long> ;
  foaf:name        "1datatypeLength_fail-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dot_pass-noOthers> ;
  foaf:name        "1dot_pass-noOthers"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxExclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxExclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 5.6e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMaxexclusiveINTEGER_fail-double-high> ;
  foaf:name        "1doubleMaxexclusiveINTEGER_fail-double-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 5 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMaxinclusiveINTEGER_pass-integer-equal> ;
  foaf:name        "1integerMaxinclusiveINTEGER_pass-integer-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: ab is not a BlankNode\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1bnodePattern_fail-lit-match> ;
  foaf:name        "1bnodePattern_fail-lit-match"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: 5.5e0 doesn't have datatype <http://www.w3.org/2001/XMLSchema#decimal>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMaxexclusiveDECIMAL_fail-double-equal> ;
  foaf:name        "1decimalMaxexclusiveDECIMAL_fail-double-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/n1>: +<http://a.example/S1>) -> Evidences: \n(<http://a.example/n2>: +<http://a.example/S2>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotRef1_referent,referrer> ;
  foaf:name        "1dotRef1_referent,referrer"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 5.6e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMaxinclusiveINTEGER_fail-double-high> ;
  foaf:name        "1doubleMaxinclusiveINTEGER_fail-double-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: ab doesn't belong to set List(DatatypeString(ab,<http://a.example/bloodType>))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1IRIREFDatatype_Lab> ;
  foaf:name        "1val1IRIREFDatatype_Lab"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 5.6 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMininclusiveDOUBLEintLeadTrail_pass-decimal-high> ;
  foaf:name        "1decimalMininclusiveDOUBLEintLeadTrail_pass-decimal-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: <http://a.example/o1> is NonLiteral\n <http://a.example/o1> satisfies MinLength(19) with length 19\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MinLength(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MinLength(19)),None)),None,None,None,None)),None,None)))))]: <http://a.example/o1> is NonLiteral\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MinLength(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MinLength(19)),None)),None,None,None,None)),None,None)))))]: <http://a.example/o1> satisfies MinLength(19) with length 19" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1nonliteralMinlength_pass-iri-equal> ;
  foaf:name        "1nonliteralMinlength_pass-iri-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/v1a> doesn't belong to set List(StemRange(IRIStem(<http://a.example/v>),Some(List(IRIValue(<http://a.example/v1>), IRIValue(<http://a.example/v2>), IRIValue(<http://a.example/v3>)))))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1iriStemMinusiri3_passIv1a> ;
  foaf:name        "1val1iriStemMinusiri3_passIv1a"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: cd is a Literal\n cd satisfies Pattern(.*cd.*) with lexical form cd\n cd passes OR\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None)))))]: cd is a Literal\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None)))))]: cd is a Literal\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None)))))]: cd satisfies Pattern(.*cd.*) with lexical form cd\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None)))))]: cd passes OR" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExprOR3_passvc2> ;
  foaf:name        "1val1vExprOR3_passvc2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: ab is a Literal\n ab satisfies Pattern(^ab$) with lexical form ab\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(^ab$)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(^ab$)),None)),None,None,None,None)),None,None)))))]: ab is a Literal\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(^ab$)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(^ab$)),None)),None,None,None,None)),None,None)))))]: ab satisfies Pattern(^ab$) with lexical form ab" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalPattern_fail-StartlitEnd-lit> ;
  foaf:name        "1literalPattern_fail-StartlitEnd-lit"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 04.50 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMininclusiveDECIMAL_pass-float-equalLeadTrail> ;
  foaf:name        "1floatMininclusiveDECIMAL_pass-float-equalLeadTrail"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/o1>, shape: <http://a.example/S1> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1inversedotAnnot3_missing> ;
  foaf:name        "1inversedotAnnot3_missing"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDouble(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDouble(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDouble(4.5))),None)),None,None,None,None)),None,None)))))]: 4.5e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMininclusivexsd-double_pass-double-equal> ;
  foaf:name        "1doubleMininclusivexsd-double_pass-double-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: None of the alternatives of OR(List(ShapeRef(IRILabel(<http://a.example/S2>)), ShapeRef(IRILabel(<http://a.example/S3>)), ShapeRef(IRILabel(<http://a.example/S4>)))) is valid for node <http://a.example/n2>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotRefOR3_fail> ;
  foaf:name        "1dotRefOR3_fail"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxExclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxExclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 5.5e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMaxexclusiveDECIMALint_fail-double-equal> ;
  foaf:name        "1doubleMaxexclusiveDECIMALint_fail-double-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: None of the alternatives of OR(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))) is valid for node <http://a.example/n1>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#NOT1dotOR2dotX3AND1_fail-Shape2> ;
  foaf:name        "NOT1dotOR2dotX3AND1_fail-Shape2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: <http://a.example/ab> is NonLiteral\n <http://a.example/ab> satisfies Pattern(.*ab) with lexical form http://a.example/ab\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(Pattern(.*ab)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(Pattern(.*ab)),None)),None,None,None,None)),None,None)))))]: <http://a.example/ab> is NonLiteral\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(Pattern(.*ab)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(Pattern(.*ab)),None)),None,None,None,None)),None,None)))))]: <http://a.example/ab> satisfies Pattern(.*ab) with lexical form http://a.example/ab" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1nonliteralPattern_pass-iri-match> ;
  foaf:name        "1nonliteralPattern_pass-iri-match"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/v2> doesn't belong to set List(StemRange(Wildcard(),Some(List(IRIValue(<http://a.example/v1>), IRIValue(<http://a.example/v2>), IRIValue(<http://a.example/v3>)))))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1dotMinusiri3_v2> ;
  foaf:name        "1val1dotMinusiri3_v2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/v2> doesn't belong to set List(IRIValue(<http://a.example/v1>))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1IRIREF_v2> ;
  foaf:name        "1val1IRIREF_v2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(5.00))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDecimal(5.00))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDecimal(5.00))),None)),None,None,None,None)),None,None)))))]: 5.6e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMininclusiveDECIMALintLeadTrail_pass-double-high> ;
  foaf:name        "1doubleMininclusiveDECIMALintLeadTrail_pass-double-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinExclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 4.4e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMinexclusiveDOUBLE_fail-double-low> ;
  foaf:name        "1doubleMinexclusiveDOUBLE_fail-double-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/n1>: +<http://a.example/S1>) -> Evidences: <http://a.example/n3> passes OR\n(<http://a.example/n3>: +<http://a.example/S3>) -> Evidences: \n----------------------------log-----------------------\n[<http://a.example/n1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/S2>)), ShapeRef(IRILabel(<http://a.example/S3>)), ShapeRef(IRILabel(<http://a.example/S4>))))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/S2>)), ShapeRef(IRILabel(<http://a.example/S3>)), ShapeRef(IRILabel(<http://a.example/S4>))))),None,None,None,None)),None,None), IRILabel(<http://a.example/S2>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), IRILabel(<http://a.example/S3>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), IRILabel(<http://a.example/S4>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))]: <http://a.example/n3> passes OR" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotRefOR3_passShape2> ;
  foaf:name        "1dotRefOR3_passShape2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxInclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 5 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMaxinclusiveDOUBLEint_pass-integer-equal> ;
  foaf:name        "1integerMaxinclusiveDOUBLEint_pass-integer-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: TotalDigits(5)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None)))))]: 1.23ab is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalTotaldigits_fail-malformedxsd_decimal-1_23ab> ;
  foaf:name        "1literalTotaldigits_fail-malformedxsd_decimal-1_23ab"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinExclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinExclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinExclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 6 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMinexclusiveDECIMALint_pass-integer-high> ;
  foaf:name        "1integerMinexclusiveDECIMALint_pass-integer-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: abcde is not an IRI\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1iriRefLength1_fail-lit-equal> ;
  foaf:name        "1iriRefLength1_fail-lit-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/o1> is not a BlankNode\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1bnodeLength_fail-iri-equal> ;
  foaf:name        "1bnodeLength_fail-iri-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error java.lang.Exception: Not implemented Any yet" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#0_empty> ;
  foaf:name        "0_empty"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 5.6 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMininclusiveDECIMAL_pass-decimal-high> ;
  foaf:name        "1decimalMininclusiveDECIMAL_pass-decimal-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/o> doesn't satisfy facet Length(19) with length 18\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(Length(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(Length(19)),None)),None,None,None,None)),None,None)))))]: <http://a.example/o> is NonLiteral" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1nonliteralLength_fail-iri-short> ;
  foaf:name        "1nonliteralLength_fail-iri-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/n1>: +<http://a.example/S1>) -> Evidences: \n(<http://a.example/n2>: +<http://a.example/S2>) -> Evidences: \n(<http://a.example/n3>: +<http://a.example/S3>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#3circularRef1_pass-closed> ;
  foaf:name        "3circularRef1_pass-closed"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error java.lang.Exception: Error at 4:17 mismatched input ',' expecting {'}', ';', '//', '%'}\n\nError at 4:30 extraneous input '}' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n\nError at 5:17 mismatched input ',' expecting {'{', '}', ';', '//', '*', '+', '?', '%', KW_AND, KW_OR}\n\nError at 5:27 mismatched input '*' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n\nError at 6:17 mismatched input ',' expecting {'}', ';', '//', '%'}\n\nError at 6:27 mismatched input '*' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n\nError at 7:17 mismatched input ',' expecting {'}', ';', '//', '%'}\n\nError at 7:27 mismatched input '{' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#P2T2> ;
  foaf:name        "P2T2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error es.weso.rdf.parser.RDFParserException: RDFParserException: objectFromPredicate: Not found triples with subject _:310d45194befad9e4e99e9d6bfb727a8 and predicate <http://www.w3.org/ns/shacl/test-suite#shape>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#startRefbnode_fail-missing> ;
  foaf:name        "startRefbnode_fail-missing"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 5.5 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMaxexclusivexsd-decimal_fail-decimal-equal> ;
  foaf:name        "1decimalMaxexclusivexsd-decimal_fail-decimal-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 4.4 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMininclusiveDOUBLELeadTrail_fail-float-low> ;
  foaf:name        "1floatMininclusiveDOUBLELeadTrail_fail-float-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error java.lang.Exception: Error at 3:12 no viable alternative at input '(:a.,'\n\nError at 3:12 extraneous input ',' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n\nError at 3:19 mismatched input ')' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n\nError at 3:28 extraneous input '}' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#skipped> ;
  foaf:name        "skipped"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error es.weso.rdf.parser.RDFParserException: RDFParserException: Value of predicate <http://www.w3.org/ns/shacl/test-suite#focus> must be a IRI but it is: _:cd3026580384f802547ca7089f31bdec" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusBNODELength_dot_pass> ;
  foaf:name        "1focusBNODELength_dot_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 4.5e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMininclusiveDECIMAL_pass-double-equal> ;
  foaf:name        "1doubleMininclusiveDECIMAL_pass-double-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: No candidates match. Neighs: List(), Table: CTable { constraints: Map(C1 -> Pos(NodeConstraint(None,None,List(),None)))\n\r\n paths: Map(Direct(<http://a.example/p1>) -> Set(C1))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1cardPlus_fail0> ;
  foaf:name        "1cardPlus_fail0"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericDecimal(5.00))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxExclusive(NumericDecimal(5.00))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxExclusive(NumericDecimal(5.00))),None)),None,None,None,None)),None,None)))))]: 5.5e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMaxexclusiveDECIMALintLeadTrail_fail-double-equal> ;
  foaf:name        "1doubleMaxexclusiveDECIMALintLeadTrail_fail-double-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxInclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 5.5 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMaxinclusiveDECIMAL_pass-float-equal> ;
  foaf:name        "1floatMaxinclusiveDECIMAL_pass-float-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/x>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p1>),\"p1-0\"),C1)) doesn't match regular expression\nBag {| C1 -> 1 |} doesn't match Rbe And(Or(Symbol(C1,1,1),Symbol(C2,1,1)),Symbol(C3,1,1))\nErr: Interval checker failed with value <empty(1;0)>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#openopen1dotSome1dotclose1dotclose_fail_p1> ;
  foaf:name        "openopen1dotSome1dotclose1dotclose_fail_p1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error java.lang.Exception: Not implemented Any yet" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#0focusIRI_other> ;
  foaf:name        "0focusIRI_other"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: No candidates match. Neighs: List(), Table: CTable { constraints: Map(C1 -> Pos(NodeConstraint(None,None,List(),None)))\n\r\n paths: Map(Direct(<http://a.example/p1>) -> Set(C1))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1cardOpt_pass0> ;
  foaf:name        "1cardOpt_pass0"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinExclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinExclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinExclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 4 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMinexclusiveINTEGER_fail-integer-low> ;
  foaf:name        "1integerMinexclusiveINTEGER_fail-integer-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 4.4 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMininclusiveDOUBLE_fail-decimal-low> ;
  foaf:name        "1decimalMininclusiveDOUBLE_fail-decimal-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: TotalDigits(5)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None)))))]: 1.2345 is a Literal" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalTotaldigits_pass-decimal-equalTrail> ;
  foaf:name        "1literalTotaldigits_pass-decimal-equalTrail"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: abcd passes OR\n(\"abcd\": +<http://a.example/vc2>) -> Evidences: abcd is a Literal\n abcd satisfies MaxLength(5) with length 4\n(\"abcd\": +<http://a.example/vc1>) -> Evidences: abcd is a Literal\n abcd satisfies MinLength(4) with length 4\n----------------------------log-----------------------\n[\"abcd\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: abcd is a Literal\n[\"abcd\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: abcd satisfies MinLength(4) with length 4\n[\"abcd\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None),Some(IRILabel(<http://a.example/vc2>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: abcd is a Literal\n[\"abcd\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None),Some(IRILabel(<http://a.example/vc2>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: abcd satisfies MaxLength(5) with length 4\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: abcd passes OR" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExpr1AND1OR1Ref3_pass-vc1vc2> ;
  foaf:name        "1val1vExpr1AND1OR1Ref3_pass-vc1vc2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinExclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinExclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinExclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 4.4 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMinexclusiveINTEGER_fail-float-low> ;
  foaf:name        "1floatMinexclusiveINTEGER_fail-float-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/s1>, shape: <http://a.example/S1> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotAnnot3_missing> ;
  foaf:name        "1dotAnnot3_missing"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotAnnotSTRING_LITERAL1_pass> ;
  foaf:name        "1dotAnnotSTRING_LITERAL1_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/v4> doesn't belong to set List(StemRange(IRIStem(<http://a.example/v>),Some(List(IRIValue(<http://a.example/v1>), IRIValue(<http://a.example/v2>), IRIValue(<http://a.example/v3>)))))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1iriStemMinusiri3_passIv4> ;
  foaf:name        "1val1iriStemMinusiri3_passIv4"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinExclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 4.5 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMinexclusiveDOUBLE_fail-float-equal> ;
  foaf:name        "1floatMinexclusiveDOUBLE_fail-float-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: _:8be9cf1ff869b0379d8b4bceaab4b813 doesn't satisfy facet Length(5) with length 32\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(BNodeKind),None,List(Length(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(BNodeKind),None,List(Length(5)),None)),None,None,None,None)),None,None)))))]: _:8be9cf1ff869b0379d8b4bceaab4b813 is a BlankNode" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1bnodeLength_pass-bnode-equal> ;
  foaf:name        "1bnodeLength_pass-bnode-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/s1>, shape: <http://a.example/S1> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dot_fail-missing> ;
  foaf:name        "1dot_fail-missing"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/v3> doesn't belong to set List(StemRange(IRIStem(<http://a.example/v>),Some(List(IRIValue(<http://a.example/v1>), IRIValue(<http://a.example/v2>), IRIValue(<http://a.example/v3>)))))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1iriStemMinusiri3_v3> ;
  foaf:name        "1val1iriStemMinusiri3_v3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 5 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveDOUBLELeadTrail_pass-integer-equalLead> ;
  foaf:name        "1integerMininclusiveDOUBLELeadTrail_pass-integer-equalLead"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: ab doesn't belong to set List(DatatypeString(true,<http://www.w3.org/2001/XMLSchema#boolean>))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1true_ab> ;
  foaf:name        "1val1true_ab"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: TotalDigits(5)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None)))))]: 1.23456 is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalTotaldigits_fail-decimal-long> ;
  foaf:name        "1literalTotaldigits_fail-decimal-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/x>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#open3Somedotclosecard2_pass-p2p3> ;
  foaf:name        "open3Somedotclosecard2_pass-p2p3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error es.weso.rdf.parser.RDFParserException: RDFParserException: Value of predicate <http://www.w3.org/ns/shacl/test-suite#shape> must be a IRI but it is: _:ebade3a76448de50895259e5a1726d21" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#bnode1dot_fail-missing> ;
  foaf:name        "bnode1dot_fail-missing"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxExclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxExclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 5.5e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMaxexclusiveINTEGER_fail-double-equal> ;
  foaf:name        "1doubleMaxexclusiveINTEGER_fail-double-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n(\"abcdef\": +<http://a.example/vc4>) -> Evidences: abcdef passes OR\n(\"abcdef\": +<http://a.example/vc1>) -> Evidences: abcdef is a Literal\n abcdef satisfies Pattern(ab.*) with lexical form abcdef\n----------------------------log-----------------------\n[\"abcdef\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc4>))),None,None,None,None)),None,None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/vc4>) -> ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))))]: abcdef is a Literal\n[\"abcdef\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc4>))),None,None,None,None)),None,None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/vc4>) -> ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))))]: abcdef satisfies Pattern(ab.*) with lexical form abcdef\n[\"abcdef\",ShapeType(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>)))),Some(IRILabel(<http://a.example/vc4>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc4>))),None,None,None,None)),None,None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/vc4>) -> ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))))]: abcdef passes OR" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExprRefOR3_passvc1vc2vc3> ;
  foaf:name        "1val1vExprRefOR3_passvc1vc2vc3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: abab is a Literal\n abab satisfies MinLength(4) with length 4\n abab is a Literal\n abab satisfies MaxLength(5) with length 4\n abab is a Literal\n abab satisfies Pattern((ab)+) with lexical form abab\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)))),None,None,None,None)),None,None)))))]: abab is a Literal\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)))),None,None,None,None)),None,None)))))]: abab satisfies MinLength(4) with length 4\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)))),None,None,None,None)),None,None)))))]: abab is a Literal\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)))),None,None,None,None)),None,None)))))]: abab satisfies MaxLength(5) with length 4\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)))),None,None,None,None)),None,None)))))]: abab is a Literal\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)))),None,None,None,None)),None,None)))))]: abab satisfies Pattern((ab)+) with lexical form abab" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExprAND3_pass> ;
  foaf:name        "1val1vExprAND3_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(5.00))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(5.00))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(5.00))),None)),None,None,None,None)),None,None)))))]: 6 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveDECIMALintLeadTrail_pass-integer-high> ;
  foaf:name        "1integerMininclusiveDECIMALintLeadTrail_pass-integer-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: 12345 has datatype <http://www.w3.org/2001/XMLSchema#integer>\n 12345 satisfies Length(5) with length 5\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(Length(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(Length(5)),None)),None,None,None,None)),None,None)))))]: 12345 has datatype <http://www.w3.org/2001/XMLSchema#integer>\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(Length(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(Length(5)),None)),None,None,None,None)),None,None)))))]: 12345 satisfies Length(5) with length 5" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1datatypeLength_pass> ;
  foaf:name        "1datatypeLength_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(5.00))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDecimal(5.00))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDecimal(5.00))),None)),None,None,None,None)),None,None)))))]: 4.4 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMininclusiveDECIMALintLeadTrail_fail-float-low> ;
  foaf:name        "1floatMininclusiveDECIMALintLeadTrail_fail-float-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#startCode3_pass> ;
  foaf:name        "startCode3_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error es.weso.rdf.parser.RDFParserException: RDFParserException: Value of predicate <http://www.w3.org/ns/shacl/test-suite#focus> must be a IRI but it is: _:cd3026580384f802547ca7089f31bdec" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusIRILength_dot_fail-bnodeFocusLabel-equal> ;
  foaf:name        "1focusIRILength_dot_fail-bnodeFocusLabel-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: 4.5e0 doesn't have datatype <http://www.w3.org/2001/XMLSchema#integer>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveINTEGER_fail-double-equal> ;
  foaf:name        "1integerMininclusiveINTEGER_fail-double-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: None of the alternatives of OR(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))) is valid for node <http://a.example/n1>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#NOT1dotOR2dotX3_fail-Shape2> ;
  foaf:name        "NOT1dotOR2dotX3_fail-Shape2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinExclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 5.6 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMinexclusiveDECIMAL_pass-float-high> ;
  foaf:name        "1floatMinexclusiveDECIMAL_pass-float-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: _:7b50c9d1a7b292b6602351725068b355 doesn't satisfy facet MaxLength(5) with length 32\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(BNodeKind),None,List(MaxLength(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(BNodeKind),None,List(MaxLength(5)),None)),None,None,None,None)),None,None)))))]: _:7b50c9d1a7b292b6602351725068b355 is a BlankNode" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1bnodeMaxlength_pass-bnode-equal> ;
  foaf:name        "1bnodeMaxlength_pass-bnode-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/x>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p1>),\"p1-3\"),C1), ((Direct(<http://a.example/p1>),\"p1-1\"),C1), ((Direct(<http://a.example/p1>),\"p1-2\"),C1), ((Direct(<http://a.example/p1>),\"p1-0\"),C1)) doesn't match regular expression\nBag {| C1 -> 4 |} doesn't match Rbe Repeat(Or(Or(Symbol(C1,1,1),Symbol(C2,1,1)),Symbol(C3,1,1)),2,3)\nErr: Found C1 but max. cardinality is 0. Current deriv: Symbol(C1,0,0)\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#open3Somedotclosecard23_fail-p1X4> ;
  foaf:name        "open3Somedotclosecard23_fail-p1X4"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/o1> doesn't belong to set List(StemRange(Wildcard(),Some(List(IRIValue(<http://a.example/v1>), IRIValue(<http://a.example/v2>), IRIValue(<http://a.example/v3>)))))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1refvsMinusiri3_pass> ;
  foaf:name        "1val1refvsMinusiri3_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxInclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 5.5e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMaxinclusiveDECIMAL_pass-double-equal> ;
  foaf:name        "1doubleMaxinclusiveDECIMAL_pass-double-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/x>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p3>),\"p3-0\"),C3), ((Direct(<http://a.example/p2>),\"p2-0\"),C2), ((Direct(<http://a.example/p1>),\"p1-0\"),C1)) doesn't match regular expression\nBag {| C1 -> 1, C2 -> 1, C3 -> 1 |} doesn't match Rbe Or(Symbol(C1,1,1),And(Symbol(C2,1,1),Symbol(C3,1,1)))\nErr: Interval checker failed with value [2;2]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#open1dotSomeopen2dotcloseclose_fail_p1p2p3> ;
  foaf:name        "open1dotSomeopen2dotcloseclose_fail_p1p2p3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: _:ef2ff2bd8582866c1400c004afd9f602 is NonLiteral\n _:ef2ff2bd8582866c1400c004afd9f602 satisfies MinLength(19) with length 32\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MinLength(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MinLength(19)),None)),None,None,None,None)),None,None)))))]: _:ef2ff2bd8582866c1400c004afd9f602 is NonLiteral\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MinLength(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MinLength(19)),None)),None,None,None,None)),None,None)))))]: _:ef2ff2bd8582866c1400c004afd9f602 satisfies MinLength(19) with length 32" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1nonliteralMinlength_pass-bnode-long> ;
  foaf:name        "1nonliteralMinlength_pass-bnode-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: a doesn't match Pattern(ab) with lexical form a\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab)),None)),None,None,None,None)),None,None)))))]: a is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalPattern_fail-lit-short> ;
  foaf:name        "1literalPattern_fail-lit-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/s1> doesn't match Pattern(abcdefghijklmnopqrs) with lexical form http://a.example/s1\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusPatternB-dot_fail-iri-match> ;
  foaf:name        "1focusPatternB-dot_fail-iri-match"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.50))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDecimal(4.50))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDecimal(4.50))),None)),None,None,None,None)),None,None)))))]: 4.5e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMininclusiveDECIMALLeadTrail_pass-double-equal> ;
  foaf:name        "1doubleMininclusiveDECIMALLeadTrail_pass-double-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: TotalDigits(5)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None)))))]: 123456 is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalTotaldigits_fail-integer-longLead> ;
  foaf:name        "1literalTotaldigits_fail-integer-longLead"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented ShapeExternal Attempt: node: <http://a.example/n2>, shape: <http://a.example/Sext>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#shapeExtern_pass> ;
  foaf:name        "shapeExtern_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/s>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p3>),<http://a.example/o3>),C3), ((Direct(<http://a.example/p3>),<http://a.example/o3a>),C3), ((Direct(<http://a.example/p1>),<http://a.example/o1a>),C1), ((Direct(<http://a.example/p2>),<http://a.example/o2a>),C2), ((Direct(<http://a.example/p1>),<http://a.example/o1>),C1), ((Direct(<http://a.example/p2>),<http://a.example/o2>),C2)) doesn't match regular expression\nBag {| C1 -> 2, C2 -> 2, C3 -> 2 |} doesn't match Rbe And(And(Symbol(C1,1,1),Symbol(C2,1,1)),Symbol(C3,1,1))\nErr: Interval checker failed with value [2;2]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#3groupdotExtra3_pass-iri2> ;
  foaf:name        "3groupdotExtra3_pass-iri2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/s1>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p1>),<http://a.example/o2>),C1), ((Direct(<http://a.example/p1>),<http://a.example/o1>),C1)) doesn't match regular expression\nBag {| C1 -> 2 |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [2;2]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1IRIREFExtra1p2_fail-iri2> ;
  foaf:name        "1val1IRIREFExtra1p2_fail-iri2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 4 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveINTEGER_fail-low> ;
  foaf:name        "1integerMininclusiveINTEGER_fail-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dot-base_pass-noOthers> ;
  foaf:name        "1dot-base_pass-noOthers"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/n1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotInline1_selfReference> ;
  foaf:name        "1dotInline1_selfReference"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 5.6 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMaxexclusiveDECIMAL_fail-float-high> ;
  foaf:name        "1floatMaxexclusiveDECIMAL_fail-float-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 5 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveINTEGER_pass-equal> ;
  foaf:name        "1integerMininclusiveINTEGER_pass-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: ab doesn't belong to set List(LangString(ab,@en-fr))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1LANGTAG_Lab> ;
  foaf:name        "1val1LANGTAG_Lab"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxInclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 5.6e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMaxinclusiveDECIMAL_fail-double-high> ;
  foaf:name        "1doubleMaxinclusiveDECIMAL_fail-double-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: ab is not an IRI\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1iri_fail-literal> ;
  foaf:name        "1iri_fail-literal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: abcdef passes OR\n(\"abcdef\": +<http://a.example/vc3>) -> Evidences: abcdef is a Literal\n abcdef satisfies Pattern((ab)*) with lexical form abcdef\n----------------------------log-----------------------\n[\"abcdef\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: abcdef is a Literal\n[\"abcdef\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: abcdef satisfies MinLength(4) with length 6\n[\"abcdef\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None),Some(IRILabel(<http://a.example/vc2>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: abcdef is a Literal\n[\"abcdef\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None),Some(IRILabel(<http://a.example/vc3>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: abcdef is a Literal\n[\"abcdef\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None),Some(IRILabel(<http://a.example/vc3>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: abcdef satisfies Pattern((ab)*) with lexical form abcdef\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: abcdef passes OR" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExpr1AND1OR1Ref3_failvc2vc3> ;
  foaf:name        "1val1vExpr1AND1OR1Ref3_failvc2vc3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error java.lang.Exception: Error at 4:12 mismatched input ',' expecting {'{', '}', ';', '~', '@', '&', '//', '*', '+', '?', '%', KW_CLOSED, KW_EXTRA, KW_PATTERN, KW_AND, KW_OR, KW_MININCLUSIVE, KW_MINEXCLUSIVE, KW_MAXINCLUSIVE, KW_MAXEXCLUSIVE, KW_LENGTH, KW_MINLENGTH, KW_MAXLENGTH, KW_TOTALDIGITS, KW_FRACTIONDIGITS, ATPNAME_NS, ATPNAME_LN}\n\nError at 4:21 mismatched input '+' expecting {<EOF>, '{', '~', '@', '&', KW_BASE, KW_PREFIX, KW_START, KW_CLOSED, KW_EXTRA, KW_PATTERN, KW_AND, KW_OR, KW_MININCLUSIVE, KW_MINEXCLUSIVE, KW_MAXINCLUSIVE, KW_MAXEXCLUSIVE, KW_LENGTH, KW_MINLENGTH, KW_MAXLENGTH, KW_TOTALDIGITS, KW_FRACTIONDIGITS, IRIREF, PNAME_NS, PNAME_LN, ATPNAME_NS, ATPNAME_LN, BLANK_NODE_LABEL}\n\nError at 4:31 mismatched input ')' expecting {<EOF>, '{', '~', '@', '&', KW_BASE, KW_PREFIX, KW_START, KW_CLOSED, KW_EXTRA, KW_PATTERN, KW_AND, KW_OR, KW_MININCLUSIVE, KW_MINEXCLUSIVE, KW_MAXINCLUSIVE, KW_MAXEXCLUSIVE, KW_LENGTH, KW_MINLENGTH, KW_MAXLENGTH, KW_TOTALDIGITS, KW_FRACTIONDIGITS, IRIREF, PNAME_NS, PNAME_LN, ATPNAME_NS, ATPNAME_LN, BLANK_NODE_LABEL}\n\nError at 4:40 mismatched input '*' expecting {<EOF>, '{', '~', '@', '&', KW_BASE, KW_PREFIX, KW_START, KW_CLOSED, KW_EXTRA, KW_PATTERN, KW_AND, KW_OR, KW_MININCLUSIVE, KW_MINEXCLUSIVE, KW_MAXINCLUSIVE, KW_MAXEXCLUSIVE, KW_LENGTH, KW_MINLENGTH, KW_MAXLENGTH, KW_TOTALDIGITS, KW_FRACTIONDIGITS, IRIREF, PNAME_NS, PNAME_LN, ATPNAME_NS, ATPNAME_LN, BLANK_NODE_LABEL}\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#nPlus1-greedy-rewrite> ;
  foaf:name        "nPlus1-greedy-rewrite"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: ab is a Literal\n ab satisfies Pattern(^ab) with lexical form ab\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(^ab)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(^ab)),None)),None,None,None,None)),None,None)))))]: ab is a Literal\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(^ab)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(^ab)),None)),None,None,None,None)),None,None)))))]: ab satisfies Pattern(^ab) with lexical form ab" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalPattern_fail-Startlit-lit> ;
  foaf:name        "1literalPattern_fail-Startlit-lit"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: ab doesn't belong to set List(LangString(ab,@en-fr))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1LANGTAG_pass> ;
  foaf:name        "1val1LANGTAG_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: _:a3dcd8304f6443ec95ef6c92107574de is not an IRI\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1iri_fail-bnode> ;
  foaf:name        "1iri_fail-bnode"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: <http://a.example/o> is NonLiteral\n <http://a.example/o> satisfies MaxLength(19) with length 18\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MaxLength(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MaxLength(19)),None)),None,None,None,None)),None,None)))))]: <http://a.example/o> is NonLiteral\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MaxLength(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MaxLength(19)),None)),None,None,None,None)),None,None)))))]: <http://a.example/o> satisfies MaxLength(19) with length 18" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1nonliteralMaxlength_pass-iri-short> ;
  foaf:name        "1nonliteralMaxlength_pass-iri-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinExclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinExclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinExclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 5.6 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMinexclusiveINTEGER_pass-decimal-high> ;
  foaf:name        "1decimalMinexclusiveINTEGER_pass-decimal-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxExclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxExclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 4 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMaxexclusiveDOUBLEint_pass-integer-low> ;
  foaf:name        "1integerMaxexclusiveDOUBLEint_pass-integer-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: ab$ is a Literal\n ab$ satisfies Pattern(ab) with lexical form ab$\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab)),None)),None,None,None,None)),None,None)))))]: ab$ is a Literal\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab)),None)),None,None,None,None)),None,None)))))]: ab$ satisfies Pattern(ab) with lexical form ab$" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalPattern_fail-lit-litEnd> ;
  foaf:name        "1literalPattern_fail-lit-litEnd"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 4.4 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMaxexclusiveDECIMAL_pass-float-low> ;
  foaf:name        "1floatMaxexclusiveDECIMAL_pass-float-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: ab is not a BlankNode\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1bnode_fail-literal> ;
  foaf:name        "1bnode_fail-literal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinExclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 5.6 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMinexclusiveDOUBLE_pass-decimal-high> ;
  foaf:name        "1decimalMinexclusiveDOUBLE_pass-decimal-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: _:ee0653ad2e481985e82b06687f3c25df is a BlankNode\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(BNodeKind),None,List(),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(BNodeKind),None,List(),None)),None,None,None,None)),None,None)))))]: _:ee0653ad2e481985e82b06687f3c25df is a BlankNode" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1bnode_pass-bnode> ;
  foaf:name        "1bnode_pass-bnode"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: 4.5e0 doesn't have datatype <http://www.w3.org/2001/XMLSchema#float>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMinexclusivexsd-float_fail-double-equal> ;
  foaf:name        "1floatMinexclusivexsd-float_fail-double-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: http://a.example/o1 is not an IRI\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1iriPattern_fail-lit-match> ;
  foaf:name        "1iriPattern_fail-lit-match"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/o1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1inversedot_pass-over_lexicallyEarlier> ;
  foaf:name        "1inversedot_pass-over_lexicallyEarlier"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1card2_pass2> ;
  foaf:name        "1card2_pass2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: 4.5e0 doesn't have datatype <http://www.w3.org/2001/XMLSchema#decimal>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMinexclusiveDECIMAL_fail-double-equal> ;
  foaf:name        "1decimalMinexclusiveDECIMAL_fail-double-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error java.lang.Exception: Error at 4:10 mismatched input ',' expecting {'{', '}', ';', '//', '*', '+', '?', '%', KW_AND, KW_OR}\n\nError at 4:17 extraneous input '}' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#simple-group> ;
  foaf:name        "simple-group"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MaxExclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MaxExclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 5.6 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMaxexclusiveINTEGER_fail-decimal-high> ;
  foaf:name        "1decimalMaxexclusiveINTEGER_fail-decimal-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: _:1cc2a4096f9cea4fa497039eeb50b064 doesn't satisfy facet MaxLength(19) with length 32\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MaxLength(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MaxLength(19)),None)),None,None,None,None)),None,None)))))]: _:1cc2a4096f9cea4fa497039eeb50b064 is NonLiteral" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1nonliteralMaxlength_pass-bnode-equal> ;
  foaf:name        "1nonliteralMaxlength_pass-bnode-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 5 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveINTEGERLead_pass-integer-equalLead> ;
  foaf:name        "1integerMininclusiveINTEGERLead_pass-integer-equalLead"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinExclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 4.4e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMinexclusiveDECIMAL_fail-double-low> ;
  foaf:name        "1doubleMinexclusiveDECIMAL_fail-double-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/12345> is not an Literal\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalTotaldigits_fail-iri> ;
  foaf:name        "1literalTotaldigits_fail-iri"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 5.6 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMininclusiveINTEGER_pass-decimal-high> ;
  foaf:name        "1decimalMininclusiveINTEGER_pass-decimal-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: TotalDigits(5)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None)))))]: 1.2345 is a Literal" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalTotaldigits_pass-decimal-equalLeadTrail> ;
  foaf:name        "1literalTotaldigits_pass-decimal-equalLeadTrail"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.50))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDecimal(4.50))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDecimal(4.50))),None)),None,None,None,None)),None,None)))))]: 4.4e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMininclusiveDECIMALLeadTrail_fail-double-low> ;
  foaf:name        "1doubleMininclusiveDECIMALLeadTrail_fail-double-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/x>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#open1dotSomeopen2dotcloseclose_pass_p2p3> ;
  foaf:name        "open1dotSomeopen2dotcloseclose_pass_p2p3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: cd passes OR\n(\"cd\": +<http://a.example/vc3>) -> Evidences: cd is a Literal\n cd satisfies Pattern((ab)*) with lexical form cd\n(\"cd\": +<http://a.example/vc2>) -> Evidences: cd is a Literal\n cd satisfies MaxLength(3) with length 2\n----------------------------log-----------------------\n[\"cd\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(3)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))),None,None,None,None)),None,None)))))]: cd is a Literal\n[\"cd\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MaxLength(3)),None),Some(IRILabel(<http://a.example/vc2>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(3)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))),None,None,None,None)),None,None)))))]: cd is a Literal\n[\"cd\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MaxLength(3)),None),Some(IRILabel(<http://a.example/vc2>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(3)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))),None,None,None,None)),None,None)))))]: cd satisfies MaxLength(3) with length 2\n[\"cd\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None),Some(IRILabel(<http://a.example/vc3>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(3)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))),None,None,None,None)),None,None)))))]: cd is a Literal\n[\"cd\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None),Some(IRILabel(<http://a.example/vc3>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(3)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))),None,None,None,None)),None,None)))))]: cd satisfies Pattern((ab)*) with lexical form cd\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(3)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))),None,None,None,None)),None,None)))))]: cd passes OR" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExpr1OR1AND1Ref3_failvc1vc3> ;
  foaf:name        "1val1vExpr1OR1AND1Ref3_failvc1vc3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/n1>: +<http://a.example/S1>) -> Evidences: <http://a.example/n2> passes OR\n(<http://a.example/n2>: +<http://a.example/S2>) -> Evidences: \n----------------------------log-----------------------\n[<http://a.example/n1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/S2>)), ShapeRef(IRILabel(<http://a.example/S3>)), ShapeRef(IRILabel(<http://a.example/S4>))))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/S2>)), ShapeRef(IRILabel(<http://a.example/S3>)), ShapeRef(IRILabel(<http://a.example/S4>))))),None,None,None,None)),None,None), IRILabel(<http://a.example/S2>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), IRILabel(<http://a.example/S3>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), IRILabel(<http://a.example/S4>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))]: <http://a.example/n2> passes OR" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotRefOR3_passShape1> ;
  foaf:name        "1dotRefOR3_passShape1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/v3> doesn't belong to set List(StemRange(Wildcard(),Some(List(IRIValue(<http://a.example/v1>), IRIValue(<http://a.example/v2>), IRIValue(<http://a.example/v3>)))))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1dotMinusiriStem3_v3> ;
  foaf:name        "1val1dotMinusiriStem3_v3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error java.lang.Exception: Not implemented Any yet" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#0focusIRI_empty> ;
  foaf:name        "0focusIRI_empty"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented ShapeExternal Attempt: node: <http://a.example/n1>, shape: <http://a.example/Sext>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#shapeExtern_fail> ;
  foaf:name        "shapeExtern_fail"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 4.4 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMininclusiveDOUBLEintLeadTrail_fail-decimal-low> ;
  foaf:name        "1decimalMininclusiveDOUBLEintLeadTrail_fail-decimal-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: FractionDigits(5)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(FractionDigits(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(FractionDigits(5)),None)),None,None,None,None)),None,None)))))]: 4.5e0 is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalFractiondigits_fail-double-equal> ;
  foaf:name        "1literalFractiondigits_fail-double-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 5 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveINTEGER_pass-integer-equal> ;
  foaf:name        "1integerMininclusiveINTEGER_pass-integer-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: _:7091b8375d5984b91875a13ccbf4c898 is not an IRI\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1iriPattern_fail-bnode-match> ;
  foaf:name        "1iriPattern_fail-bnode-match"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/n1>: +<http://a.example/S1>) -> Evidences: <http://a.example/n1> satisfies not(Shape(-, false, -, TripleConstraint(-, -, http://a.example/p1, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -))\n <http://a.example/n1> passes OR\n <http://a.example/n1> satisfies not(Shape(-, false, -, TripleConstraint(-, -, http://a.example/p3, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -))\n <http://a.example/n1> passes OR\n <http://a.example/n1> satisfies not(Shape(-, false, -, TripleConstraint(-, -, http://a.example/p5, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -))\n <http://a.example/n1> passes OR\n(<http://a.example/n1>: -Shape(-, false, -, TripleConstraint(-, -, http://a.example/p3, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -)) -> Error: Error: No candidates match. Neighs: List(), Table: CTable { constraints: Map(C1 -> Pos(NodeConstraint(None,None,List(),None)))\n\r\n paths: Map(Direct(<http://a.example/p3>) -> Set(C1))\n(<http://a.example/n1>: -Shape(-, false, -, TripleConstraint(-, -, http://a.example/p1, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -)) -> Error: Error: No candidates match. Neighs: List(), Table: CTable { constraints: Map(C1 -> Pos(NodeConstraint(None,None,List(),None)))\n\r\n paths: Map(Direct(<http://a.example/p1>) -> Set(C1))\n(<http://a.example/n1>: -Shape(-, false, -, TripleConstraint(-, -, http://a.example/p5, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -)) -> Error: Error: No candidates match. Neighs: List(), Table: CTable { constraints: Map(C1 -> Pos(NodeConstraint(None,None,List(),None)))\n\r\n paths: Map(Direct(<http://a.example/p5>) -> Set(C1))\n----------------------------log-----------------------\n[<http://a.example/n1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None),None,Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> doesn't satisfy Shape(-, false, -, TripleConstraint(-, -, http://a.example/p1, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -). Negation declared in <http://a.example/S1>. Error: ViolationError(No candidates match. Neighs: List(), Table: CTable { constraints: Map(C1 -> Pos(NodeConstraint(None,None,List(),None)))\n\r\n paths: Map(Direct(<http://a.example/p1>) -> Set(C1)))\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> satisfies not(Shape(-, false, -, TripleConstraint(-, -, http://a.example/p1, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -))\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> passes OR\n[<http://a.example/n1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None),None,Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> doesn't satisfy Shape(-, false, -, TripleConstraint(-, -, http://a.example/p3, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -). Negation declared in <http://a.example/S1>. Error: ViolationError(No candidates match. Neighs: List(), Table: CTable { constraints: Map(C1 -> Pos(NodeConstraint(None,None,List(),None)))\n\r\n paths: Map(Direct(<http://a.example/p3>) -> Set(C1)))\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> satisfies not(Shape(-, false, -, TripleConstraint(-, -, http://a.example/p3, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -))\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> passes OR\n[<http://a.example/n1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None),None,Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> doesn't satisfy Shape(-, false, -, TripleConstraint(-, -, http://a.example/p5, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -). Negation declared in <http://a.example/S1>. Error: ViolationError(No candidates match. Neighs: List(), Table: CTable { constraints: Map(C1 -> Pos(NodeConstraint(None,None,List(),None)))\n\r\n paths: Map(Direct(<http://a.example/p5>) -> Set(C1)))\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> satisfies not(Shape(-, false, -, TripleConstraint(-, -, http://a.example/p5, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -))\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> passes OR" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#NOT1dotOR2dotX3_pass-empty> ;
  foaf:name        "NOT1dotOR2dotX3_pass-empty"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 5 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveINTEGER_pass-equalLead> ;
  foaf:name        "1integerMininclusiveINTEGER_pass-equalLead"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: ab doesn't satisfy facet MinLength(4) with length 2\n----------------------------log-----------------------\n[\"ab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc4>))),None,None,None,None)),None,None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None), IRILabel(<http://a.example/vc4>) -> ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))))]: ab is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExprRefAND3_failvc1> ;
  foaf:name        "1val1vExprRefAND3_failvc1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 6 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveDOUBLEintLeadTrail_pass-integer-high> ;
  foaf:name        "1integerMininclusiveDOUBLEintLeadTrail_pass-integer-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/n1>: +<http://a.example/S1>) -> Evidences: <http://a.example/n1> satisfies not(Shape(-, false, -, TripleConstraint(-, -, http://a.example/p1, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -))\n <http://a.example/n1> passes OR\n(<http://a.example/n1>: -Shape(-, false, -, TripleConstraint(-, -, http://a.example/p1, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -)) -> Error: Error: Attempt: node: <http://a.example/n1>, shape: <http://a.example/S1> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0]\n----------------------------log-----------------------\n[<http://a.example/n1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None),None,Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None)))))))]: <http://a.example/n1> doesn't satisfy Shape(-, false, -, TripleConstraint(-, -, http://a.example/p1, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -). Negation declared in <http://a.example/S1>. Error: ViolationError(Attempt: node: <http://a.example/n1>, shape: <http://a.example/S1> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0])\n[<http://a.example/n1>,ShapeType(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None)))))))]: <http://a.example/n1> satisfies not(Shape(-, false, -, TripleConstraint(-, -, http://a.example/p1, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -))\n[<http://a.example/n1>,ShapeType(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None)))))))]: <http://a.example/n1> passes OR" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#NOT1dotOR2dot_pass-NoShape1> ;
  foaf:name        "NOT1dotOR2dot_pass-NoShape1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinExclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 4.5 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMinexclusiveDECIMAL_fail-decimal-equal> ;
  foaf:name        "1decimalMinexclusiveDECIMAL_fail-decimal-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 4.4e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMininclusiveDOUBLEintLeadTrail_fail-double-low> ;
  foaf:name        "1doubleMininclusiveDOUBLEintLeadTrail_fail-double-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(5.00))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(5.00))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(5.00))),None)),None,None,None,None)),None,None)))))]: 5 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveDECIMALintLeadTrail_pass-integer-equal> ;
  foaf:name        "1integerMininclusiveDECIMALintLeadTrail_pass-integer-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error java.lang.Exception: Error at 4:17 mismatched input ',' expecting {'}', ';', '//', '%'}\n\nError at 4:30 extraneous input '}' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n\nError at 5:17 mismatched input ',' expecting {'}', ';', '//', '%'}\n\nError at 5:30 extraneous input '}' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n\nError at 6:17 mismatched input ',' expecting {'}', ';', '//', '%'}\n\nError at 6:27 mismatched input '*' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n\nError at 7:17 mismatched input ',' expecting {'}', ';', '//', '%'}\n\nError at 7:27 mismatched input '{' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#PTstar-greedy-rewrite> ;
  foaf:name        "PTstar-greedy-rewrite"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: <http://a.example/o1> == <http://a.example/o1>\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),Some(List(<http://a.example/p1>)),Some(SomeOf(List(TripleConstraint(None,None,<http://a.example/p0>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o1>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),Some(0),Some(IntMax(1)),None,None)),None,None,None,None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),Some(List(<http://a.example/p1>)),Some(SomeOf(List(TripleConstraint(None,None,<http://a.example/p0>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o1>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),Some(0),Some(IntMax(1)),None,None)),None,None,None,None)),None,None,None,None)),None,None)))))]: <http://a.example/o1> == <http://a.example/o1>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1IRIREFExtra1Some_pass-iri1> ;
  foaf:name        "1val1IRIREFExtra1Some_pass-iri1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/n2> is not a BlankNode\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1bnodeRef1_fail-iri> ;
  foaf:name        "1bnodeRef1_fail-iri"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/x>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#open3Somedotclosecard23_pass-p1X2> ;
  foaf:name        "open3Somedotclosecard23_pass-p1X2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 4.5 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMininclusiveDECIMAL_pass-decimal-equal> ;
  foaf:name        "1decimalMininclusiveDECIMAL_pass-decimal-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: _:ca1fc7184e7e220c8647b100d9f014a6 doesn't satisfy facet Length(19) with length 32\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(Length(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(Length(19)),None)),None,None,None,None)),None,None)))))]: _:ca1fc7184e7e220c8647b100d9f014a6 is NonLiteral" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1nonliteralLength_fail-bnode-long> ;
  foaf:name        "1nonliteralLength_fail-bnode-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dot_pass-others_lexicallyLater> ;
  foaf:name        "1dot_pass-others_lexicallyLater"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error es.weso.rdf.parser.RDFParserException: RDFParserException: objectFromPredicate: Not found triples with subject _:bada1c737d54312e55a36ea380db9b0a and predicate <http://www.w3.org/ns/shacl/test-suite#shape>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#startInline_pass-noOthers> ;
  foaf:name        "startInline_pass-noOthers"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 5.6 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMininclusiveDOUBLELeadTrail_pass-float-high> ;
  foaf:name        "1floatMininclusiveDOUBLELeadTrail_pass-float-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 4.4 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMininclusiveINTEGER_fail-decimal-low> ;
  foaf:name        "1decimalMininclusiveINTEGER_fail-decimal-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: _:7bfead77b65b52436c79c062409c7996 doesn't match Pattern(ab) with lexical form 7bfead77b65b52436c79c062409c7996\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(BNodeKind),None,List(Pattern(ab)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(BNodeKind),None,List(Pattern(ab)),None)),None,None,None,None)),None,None)))))]: _:7bfead77b65b52436c79c062409c7996 is a BlankNode" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1bnodePattern_fail-bnode-short> ;
  foaf:name        "1bnodePattern_fail-bnode-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinExclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinExclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinExclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 5 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMinexclusiveDOUBLEint_fail-integer-equal> ;
  foaf:name        "1integerMinexclusiveDOUBLEint_fail-integer-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 04.50e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMininclusiveDECIMAL_pass-double-equalLeadTrail> ;
  foaf:name        "1doubleMininclusiveDECIMAL_pass-double-equalLeadTrail"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: ababab doesn't satisfy facet MaxLength(5) with length 6\n----------------------------log-----------------------\n[\"ababab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc4>))),None,None,None,None)),None,None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None), IRILabel(<http://a.example/vc4>) -> ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))))]: ababab is a Literal\n[\"ababab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc4>))),None,None,None,None)),None,None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None), IRILabel(<http://a.example/vc4>) -> ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))))]: ababab satisfies MinLength(4) with length 6\n[\"ababab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None),Some(IRILabel(<http://a.example/vc2>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc4>))),None,None,None,None)),None,None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None), IRILabel(<http://a.example/vc4>) -> ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))))]: ababab is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExprRefAND3_failvc2> ;
  foaf:name        "1val1vExprRefAND3_failvc2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: 4.5 doesn't have datatype <http://www.w3.org/2001/XMLSchema#decimal>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMininclusiveDECIMAL_fail-float-equal> ;
  foaf:name        "1decimalMininclusiveDECIMAL_fail-float-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: FractionDigits(4)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(FractionDigits(4)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(FractionDigits(4)),None)),None,None,None,None)),None,None)))))]: 1.23456 is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalFractiondigits_fail-decimal-longLeadTrail> ;
  foaf:name        "1literalFractiondigits_fail-decimal-longLeadTrail"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxInclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 4.4 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMaxinclusiveDECIMAL_pass-decimal-low> ;
  foaf:name        "1decimalMaxinclusiveDECIMAL_pass-decimal-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 4.4 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMaxexclusiveDOUBLE_pass-decimal-low> ;
  foaf:name        "1decimalMaxexclusiveDOUBLE_pass-decimal-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error es.weso.rdf.parser.RDFParserException: RDFParserException: Value of predicate <http://www.w3.org/ns/shacl/test-suite#focus> must be a IRI but it is: _:d7d6df691f8e377b68495939b3045226" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusMinLength-dot_fail-bnode-short> ;
  foaf:name        "1focusMinLength-dot_fail-bnode-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 5.6 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMininclusiveINTEGERLead_pass-decimal-high> ;
  foaf:name        "1decimalMininclusiveINTEGERLead_pass-decimal-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: FractionDigits(5)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(FractionDigits(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(FractionDigits(5)),None)),None,None,None,None)),None,None)))))]: 1.23456 is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalFractiondigits_fail-float-equal> ;
  foaf:name        "1literalFractiondigits_fail-float-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: true == true\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(DatatypeString(true,<http://www.w3.org/2001/XMLSchema#boolean>))))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(DatatypeString(true,<http://www.w3.org/2001/XMLSchema#boolean>))))),None,None,None,None)),None,None)))))]: true == true" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1true_pass> ;
  foaf:name        "1val1true_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1card2Star_pass3> ;
  foaf:name        "1card2Star_pass3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/n2>, shape: <http://a.example/S3> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotRefAND3_failShape2Shape3> ;
  foaf:name        "1dotRefAND3_failShape2Shape3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 4.9 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMininclusiveINTEGER_fail-low> ;
  foaf:name        "1floatMininclusiveINTEGER_fail-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error es.weso.rdf.parser.RDFParserException: RDFParserException: objectFromPredicate: Not found triples with subject _:fa1b8ebaf717ca837a4bf00fea4b0017 and predicate <http://www.w3.org/ns/shacl/test-suite#shape>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#startRefIRIREF_pass-noOthers> ;
  foaf:name        "startRefIRIREF_pass-noOthers"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/x>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotSome2dot_pass_p1> ;
  foaf:name        "1dotSome2dot_pass_p1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error java.lang.Exception: Error at 4:17 mismatched input ',' expecting {'}', ';', '//', '%'}\n\nError at 4:30 extraneous input '}' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n\nError at 5:17 mismatched input ',' expecting {'{', '}', ';', '//', '*', '+', '?', '%', KW_AND, KW_OR}\n\nError at 5:27 mismatched input '*' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n\nError at 6:17 mismatched input ',' expecting {'}', ';', '//', '%'}\n\nError at 6:27 mismatched input '*' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n\nError at 7:17 mismatched input ',' expecting {'}', ';', '//', '%'}\n\nError at 7:27 mismatched input '{' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#PstarT-greedy> ;
  foaf:name        "PstarT-greedy"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/n1>: +<http://a.example/S1>) -> Evidences: <http://a.example/n2> is an IRI\n(<http://a.example/n2>: +<http://a.example/S2>) -> Evidences: \n----------------------------log-----------------------\n[<http://a.example/n1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(IRIKind),None,List(),None), ShapeRef(IRILabel(<http://a.example/S2>))))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(IRIKind),None,List(),None), ShapeRef(IRILabel(<http://a.example/S2>))))),None,None,None,None)),None,None), IRILabel(<http://a.example/S2>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))]: <http://a.example/n2> is an IRI" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1iriRef1_pass-iri> ;
  foaf:name        "1iriRef1_pass-iri"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: ab is a Literal\n ab satisfies Pattern(ab$) with lexical form ab\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab$)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab$)),None)),None,None,None,None)),None,None)))))]: ab is a Literal\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab$)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab$)),None)),None,None,None,None)),None,None)))))]: ab satisfies Pattern(ab$) with lexical form ab" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalPattern_fail-litEnd-lit> ;
  foaf:name        "1literalPattern_fail-litEnd-lit"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: <http://a.example/v1> == <http://a.example/v1>\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/v1>))))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/v1>))))),None,None,None,None)),None,None)))))]: <http://a.example/v1> == <http://a.example/v1>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1IRIREF_pass> ;
  foaf:name        "1val1IRIREF_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 4.4e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMaxexclusiveDOUBLE_pass-double-low> ;
  foaf:name        "1doubleMaxexclusiveDOUBLE_pass-double-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: 0 == 0\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(DatatypeString(0,<http://www.w3.org/2001/XMLSchema#integer>))))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(DatatypeString(0,<http://www.w3.org/2001/XMLSchema#integer>))))),None,None,None,None)),None,None)))))]: 0 == 0" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1INTEGER_00> ;
  foaf:name        "1val1INTEGER_00"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: abcdef passes OR\n(\"abcdef\": +<http://a.example/vc1>) -> Evidences: abcdef is a Literal\n abcdef satisfies MinLength(5) with length 6\n----------------------------log-----------------------\n[\"abcdef\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(3)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))),None,None,None,None)),None,None)))))]: abcdef is a Literal\n[\"abcdef\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(3)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))),None,None,None,None)),None,None)))))]: abcdef satisfies MinLength(5) with length 6\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(3)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))),None,None,None,None)),None,None)))))]: abcdef passes OR" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExpr1OR1AND1Ref3_pass-vc1> ;
  foaf:name        "1val1vExpr1OR1AND1Ref3_pass-vc1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/s1>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p1>),\"b\"),C1), ((Direct(<http://a.example/p1>),\"a\"),C1)) doesn't match regular expression\nBag {| C1 -> 2 |} doesn't match Rbe Symbol(C1,0,1)\nErr: Interval checker failed with value [2;-]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1cardOpt_fail2> ;
  foaf:name        "1cardOpt_fail2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinExclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 4.4 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMinexclusiveDOUBLE_fail-float-low> ;
  foaf:name        "1floatMinexclusiveDOUBLE_fail-float-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 5.5 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMaxexclusiveDECIMAL_fail-decimal-equal> ;
  foaf:name        "1decimalMaxexclusiveDECIMAL_fail-decimal-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: <http://a.example/o1> is NonLiteral\n <http://a.example/o1> satisfies Length(19) with length 19\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(Length(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(Length(19)),None)),None,None,None,None)),None,None)))))]: <http://a.example/o1> is NonLiteral\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(Length(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(Length(19)),None)),None,None,None,None)),None,None)))))]: <http://a.example/o1> satisfies Length(19) with length 19" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1nonliteralLength_pass-iri-equal> ;
  foaf:name        "1nonliteralLength_pass-iri-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: abcde satisfies Length(5) with length 5\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(Length(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(Length(5)),None)),None,None,None,None)),None,None)))))]: abcde satisfies Length(5) with length 5" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1Length_pass-lit-equal> ;
  foaf:name        "1Length_pass-lit-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxExclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxExclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 5.5e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMaxexclusiveINTEGERLead_fail-double-equal> ;
  foaf:name        "1doubleMaxexclusiveINTEGERLead_fail-double-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/n1>: +<http://a.example/S1>) -> Evidences: \n(<http://a.example/n2>: +<http://a.example/S2>) -> Evidences: \n(<http://a.example/n3>: +<http://a.example/S3>) -> Evidences: \n(<http://a.example/n5>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#3circularRef1_pass-open> ;
  foaf:name        "3circularRef1_pass-open"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: false doesn't belong to set List(DatatypeString(true,<http://www.w3.org/2001/XMLSchema#boolean>))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1true_false> ;
  foaf:name        "1val1true_false"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: No candidates match. Neighs: List(), Table: CTable { constraints: Map(C1 -> Pos(NodeConstraint(None,None,List(),None)))\n\r\n paths: Map(Direct(<http://a.example/p1>) -> Set(C1))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1card2_fail0> ;
  foaf:name        "1card2_fail0"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/v1> doesn't belong to set List(StemRange(IRIStem(<http://a.example/v>),Some(List(IRIValue(<http://a.example/v1>), IRIValue(<http://a.example/v2>), IRIValue(<http://a.example/v3>)))))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1iriStemMinusiri3_v1> ;
  foaf:name        "1val1iriStemMinusiri3_v1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxInclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 4.4 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMaxinclusiveDECIMAL_pass-float-low> ;
  foaf:name        "1floatMaxinclusiveDECIMAL_pass-float-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 5.6e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMaxexclusiveDECIMAL_fail-double-high> ;
  foaf:name        "1doubleMaxexclusiveDECIMAL_fail-double-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: <http://a.example/s1> is an IRI\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(ShapeAnd(List(NodeConstraint(Some(IRIKind),None,List(),None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(NodeConstraint(Some(IRIKind),None,List(),None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))]: <http://a.example/s1> is an IRI" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusIRI_dot_pass> ;
  foaf:name        "1focusIRI_dot_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/o1> is not a BlankNode\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1bnode_fail-iri> ;
  foaf:name        "1bnode_fail-iri"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 4 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveDECIMALint_fail-integer-low> ;
  foaf:name        "1integerMininclusiveDECIMALint_fail-integer-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: ab doesn't satisfy facet MinLength(4) with length 2\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)))),None,None,None,None)),None,None)))))]: ab is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExprAND3_failvc1> ;
  foaf:name        "1val1vExprAND3_failvc1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotAnnotIRIREF_pass> ;
  foaf:name        "1dotAnnotIRIREF_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 4.5 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMininclusiveDECIMAL_pass-float-equal> ;
  foaf:name        "1floatMininclusiveDECIMAL_pass-float-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/n1>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p1>),<http://a.example/n3>),C1), ((Direct(<http://a.example/p1>),<http://a.example/n2>),C1)) doesn't match regular expression\nBag {| C1 -> 2 |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [2;2]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotInline1_overReferrer> ;
  foaf:name        "1dotInline1_overReferrer"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/v1> doesn't belong to set List(StemRange(IRIStem(<http://a.example/v>),Some(List())))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1iriStem_passv1> ;
  foaf:name        "1val1iriStem_passv1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: FractionDigits(5)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(FractionDigits(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(FractionDigits(5)),None)),None,None,None,None)),None,None)))))]: 1.2345ab is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalFractiondigits_fail-malformedxsd_decimal-1_2345ab> ;
  foaf:name        "1literalFractiondigits_fail-malformedxsd_decimal-1_2345ab"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error es.weso.rdf.parser.RDFParserException: RDFParserException: Value of predicate <http://www.w3.org/ns/shacl/test-suite#focus> must be a IRI but it is: _:496d0773e9bb207e007709e5e54b5cf8" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusMinLength-dot_pass-bnode-long> ;
  foaf:name        "1focusMinLength-dot_pass-bnode-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: No candidates match. Neighs: List(), Table: CTable { constraints: Map(C1 -> Pos(NodeConstraint(None,None,List(),None)))\n\r\n paths: Map(Direct(<http://a.example/p1>) -> Set(C1))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(ShapeAnd(List(NodeConstraint(None,None,List(Pattern(http://a.example/s1)),None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(NodeConstraint(None,None,List(Pattern(http://a.example/s1)),None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))]: <http://a.example/s1> satisfies Pattern(http://a.example/s1) with lexical form http://a.example/s1" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusPattern-dot_fail-iri-short> ;
  foaf:name        "1focusPattern-dot_fail-iri-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1cardStar_pass2> ;
  foaf:name        "1cardStar_pass2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxExclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxExclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 6 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMaxexclusiveDOUBLEint_fail-integer-high> ;
  foaf:name        "1integerMaxexclusiveDOUBLEint_fail-integer-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error es.weso.rdf.parser.RDFParserException: RDFParserException: Value of predicate <http://www.w3.org/ns/shacl/test-suite#focus> must be a IRI but it is: _:d7d6df691f8e377b68495939b3045226" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#0focusBNODE_other> ;
  foaf:name        "0focusBNODE_other"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: ab$ doesn't match Pattern(ab$) with lexical form ab$\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab$)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab$)),None)),None,None,None,None)),None,None)))))]: ab$ is a Literal" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalPattern_pass-litEnd-match> ;
  foaf:name        "1literalPattern_pass-litEnd-match"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented ShapeExternal Attempt: node: <http://a.example/n2>, shape: <http://a.example/Sext>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#shapeExternRef_fail> ;
  foaf:name        "shapeExternRef_fail"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: abcde is a literal but should be a NonLiteral\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1nonliteralLength_fail-lit-equal> ;
  foaf:name        "1nonliteralLength_fail-lit-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 5.6 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMininclusiveDOUBLELeadTrail_pass-decimal-high> ;
  foaf:name        "1decimalMininclusiveDOUBLELeadTrail_pass-decimal-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1cardPlus_pass2> ;
  foaf:name        "1cardPlus_pass2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/x>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p3>),\"p3-0\"),C3), ((Direct(<http://a.example/p2>),\"p2-0\"),C2), ((Direct(<http://a.example/p1>),\"p1-0\"),C1)) doesn't match regular expression\nBag {| C1 -> 1, C2 -> 1, C3 -> 1 |} doesn't match Rbe Or(Symbol(C1,1,1),And(Symbol(C2,1,1),Symbol(C3,1,1)))\nErr: Interval checker failed with value [2;2]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotSome2dot-oneOf_fail_p1p2p3> ;
  foaf:name        "1dotSome2dot-oneOf_fail_p1p2p3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 4.4 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMininclusiveDECIMAL_fail-decimal-low> ;
  foaf:name        "1decimalMininclusiveDECIMAL_fail-decimal-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: <http://a.example/s1> satisfies Length(19) with length 19\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(ShapeAnd(List(NodeConstraint(None,None,List(Length(19)),None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(NodeConstraint(None,None,List(Length(19)),None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))]: <http://a.example/s1> satisfies Length(19) with length 19" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusLength-dot_pass-iri-equal> ;
  foaf:name        "1focusLength-dot_pass-iri-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: <http://a.example/abc> is NonLiteral\n <http://a.example/abc> satisfies Pattern(.*ab) with lexical form http://a.example/abc\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(Pattern(.*ab)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(Pattern(.*ab)),None)),None,None,None,None)),None,None)))))]: <http://a.example/abc> is NonLiteral\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(Pattern(.*ab)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(Pattern(.*ab)),None)),None,None,None,None)),None,None)))))]: <http://a.example/abc> satisfies Pattern(.*ab) with lexical form http://a.example/abc" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1nonliteralPattern_fail-iri-long> ;
  foaf:name        "1nonliteralPattern_fail-iri-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 6 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveINTEGER_pass-high> ;
  foaf:name        "1integerMininclusiveINTEGER_pass-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/o1a> doesn't satisfy facet Length(19) with length 20\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(IRIKind),None,List(Length(19)),None), ShapeRef(IRILabel(<http://a.example/S2>))))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(IRIKind),None,List(Length(19)),None), ShapeRef(IRILabel(<http://a.example/S2>))))),None,None,None,None)),None,None), IRILabel(<http://a.example/S2>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))]: <http://a.example/o1a> is an IRI" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1iriRefLength1_fail-iri-long> ;
  foaf:name        "1iriRefLength1_fail-iri-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented ShapeExternal Attempt: node: <http://a.example/n2>, shape: <http://a.example/Sext>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#shapeExternRef_pass> ;
  foaf:name        "shapeExternRef_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: None of the alternatives of OR(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>)))) is valid for node a\n----------------------------log-----------------------\n[\"a\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc4>))),None,None,None,None)),None,None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/vc4>) -> ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))))]: a is a Literal\n[\"a\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None),Some(IRILabel(<http://a.example/vc2>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc4>))),None,None,None,None)),None,None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/vc4>) -> ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))))]: a is a Literal\n[\"a\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None),Some(IRILabel(<http://a.example/vc3>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc4>))),None,None,None,None)),None,None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/vc4>) -> ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))))]: a is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExprRefOR3_fail> ;
  foaf:name        "1val1vExprRefOR3_fail"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1card25_pass5> ;
  foaf:name        "1card25_pass5"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: _:43f1df17daf6d968ac41593f7ed9715d is not an Literal\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalPatternabEnd_fail-bnode-match> ;
  foaf:name        "1literalPatternabEnd_fail-bnode-match"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/o1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1inversedot_pass-over_lexicallyLater> ;
  foaf:name        "1inversedot_pass-over_lexicallyLater"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: No candidates match. Neighs: List(), Table: CTable { constraints: Map(C1 -> Pos(NodeConstraint(None,None,List(),None)))\n\r\n paths: Map(Direct(<http://a.example/p1>) -> Set(C1))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dot_fail-empty-err> ;
  foaf:name        "1dot_fail-empty-err"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: FractionDigits(5)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(FractionDigits(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(FractionDigits(5)),None)),None,None,None,None)),None,None)))))]: 1.23ab is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalFractiondigits_fail-malformedxsd_decimal-1_23ab> ;
  foaf:name        "1literalFractiondigits_fail-malformedxsd_decimal-1_23ab"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error java.lang.Exception: Error at 4:17 mismatched input ',' expecting {'}', ';', '//', '%'}\n\nError at 4:30 extraneous input '}' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n\nError at 5:17 mismatched input ',' expecting {'{', '}', ';', '//', '*', '+', '?', '%', KW_AND, KW_OR}\n\nError at 5:27 mismatched input '*' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n\nError at 6:17 mismatched input ',' expecting {'}', ';', '//', '%'}\n\nError at 6:27 mismatched input '*' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n\nError at 7:17 mismatched input ',' expecting {'}', ';', '//', '%'}\n\nError at 7:27 mismatched input '{' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#PstarTstar> ;
  foaf:name        "PstarTstar"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: abcde is not a BlankNode\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1bnodeLength_fail-lit-equal> ;
  foaf:name        "1bnodeLength_fail-lit-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: <http://a.example/o1> is NonLiteral\n <http://a.example/o1> satisfies MaxLength(19) with length 19\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MaxLength(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MaxLength(19)),None)),None,None,None,None)),None,None)))))]: <http://a.example/o1> is NonLiteral\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MaxLength(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MaxLength(19)),None)),None,None,None,None)),None,None)))))]: <http://a.example/o1> satisfies MaxLength(19) with length 19" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1nonliteralMaxlength_pass-iri-equal> ;
  foaf:name        "1nonliteralMaxlength_pass-iri-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: FractionDigits(5)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(FractionDigits(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(FractionDigits(5)),None)),None,None,None,None)),None,None)))))]: 1.2345 is a Literal" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalFractiondigits_pass-decimal-short> ;
  foaf:name        "1literalFractiondigits_pass-decimal-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/s1a> doesn't satisfy facet Length(19) with length 20\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusLength-dot_fail-iri-long> ;
  foaf:name        "1focusLength-dot_fail-iri-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: TotalDigits(5)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None)))))]: 1.234 is a Literal" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalTotaldigits_pass-decimal-short> ;
  foaf:name        "1literalTotaldigits_pass-decimal-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: ab doesn't have datatype <http://a.example/dt1>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1datatype_missing> ;
  foaf:name        "1datatype_missing"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s>: +<http://a.example/S1>) -> Evidences: <http://a.example/o3> == <http://a.example/o3>\n <http://a.example/o2> == <http://a.example/o2>\n <http://a.example/o1> == <http://a.example/o1>\n----------------------------log-----------------------\n[<http://a.example/s>,ShapeType(Shape(None,Some(false),Some(List(<http://a.example/p1>, <http://a.example/p2>, <http://a.example/p3>)),Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o1>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o2>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o3>))))),None,None,None,None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),Some(List(<http://a.example/p1>, <http://a.example/p2>, <http://a.example/p3>)),Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o1>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o2>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o3>))))),None,None,None,None)),None,None,None,None)),None,None)))))]: <http://a.example/o3> == <http://a.example/o3>\n[<http://a.example/s>,ShapeType(Shape(None,Some(false),Some(List(<http://a.example/p1>, <http://a.example/p2>, <http://a.example/p3>)),Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o1>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o2>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o3>))))),None,None,None,None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),Some(List(<http://a.example/p1>, <http://a.example/p2>, <http://a.example/p3>)),Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o1>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o2>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o3>))))),None,None,None,None)),None,None,None,None)),None,None)))))]: <http://a.example/o2> == <http://a.example/o2>\n[<http://a.example/s>,ShapeType(Shape(None,Some(false),Some(List(<http://a.example/p1>, <http://a.example/p2>, <http://a.example/p3>)),Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o1>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o2>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o3>))))),None,None,None,None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),Some(List(<http://a.example/p1>, <http://a.example/p2>, <http://a.example/p3>)),Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o1>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o2>))))),None,None,None,None), TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o3>))))),None,None,None,None)),None,None,None,None)),None,None)))))]: <http://a.example/o1> == <http://a.example/o1>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#3groupdot3Extra_pass-iri1> ;
  foaf:name        "3groupdot3Extra_pass-iri1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxInclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 5.6e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMaxinclusiveDOUBLE_fail-double-high> ;
  foaf:name        "1doubleMaxinclusiveDOUBLE_fail-double-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 5 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMininclusiveINTEGERLead_pass-equal> ;
  foaf:name        "1floatMininclusiveINTEGERLead_pass-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 4.4 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMaxexclusiveDOUBLE_pass-float-low> ;
  foaf:name        "1floatMaxexclusiveDOUBLE_pass-float-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/o1a> doesn't satisfy facet Length(19) with length 20\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(Length(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(Length(19)),None)),None,None,None,None)),None,None)))))]: <http://a.example/o1a> is an IRI" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1iriLength_fail-iri-long> ;
  foaf:name        "1iriLength_fail-iri-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxInclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 5.5e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMaxinclusiveDOUBLE_pass-double-equal> ;
  foaf:name        "1doubleMaxinclusiveDOUBLE_pass-double-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error es.weso.rdf.parser.RDFParserException: RDFParserException: objectFromPredicate: Not found triples with subject _:16275fd22b965cd6b052e0534a6db77a and predicate <http://www.w3.org/ns/shacl/test-suite#shape>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#startSpaceEqualInline_pass-noOthers> ;
  foaf:name        "startSpaceEqualInline_pass-noOthers"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxInclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 4.4 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMaxinclusiveDOUBLE_pass-decimal-low> ;
  foaf:name        "1decimalMaxinclusiveDOUBLE_pass-decimal-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxExclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxExclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 4 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMaxexclusiveDECIMALint_pass-integer-low> ;
  foaf:name        "1integerMaxexclusiveDECIMALint_pass-integer-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/n1>: +<http://a.example/S1>) -> Evidences: \n(<http://a.example/n2>: +<http://a.example/S3>) -> Evidences: \n(<http://a.example/n2>: +<http://a.example/S2>) -> Evidences: \n(<http://a.example/n2>: +<http://a.example/S4>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotRefAND3_passShape1Shape2Shape3> ;
  foaf:name        "1dotRefAND3_passShape1Shape2Shape3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/n1>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p1>),<http://a.example/n3>),C1), ((Direct(<http://a.example/p1>),<http://a.example/n2>),C1)) doesn't match regular expression\nBag {| C1 -> 2 |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [2;2]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotRef1_overReferrer,overReferent> ;
  foaf:name        "1dotRef1_overReferrer,overReferent"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/o> doesn't satisfy facet Length(19) with length 18\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(Length(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(Length(19)),None)),None,None,None,None)),None,None)))))]: <http://a.example/o> is an IRI" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1iriLength_fail-iri-short> ;
  foaf:name        "1iriLength_fail-iri-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: ab is a Literal\n ab satisfies Pattern(ab) with lexical form ab\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab)),None)),None,None,None,None)),None,None)))))]: ab is a Literal\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab)),None)),None,None,None,None)),None,None)))))]: ab satisfies Pattern(ab) with lexical form ab" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalPattern_pass-lit-match> ;
  foaf:name        "1literalPattern_pass-lit-match"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: abcd doesn't satisfy facet MinLength(5) with length 4\n----------------------------log-----------------------\n[\"abcd\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None),Some(BNodeLabel(_:vc1)),Schema(None,None,None,None,Some(Map(BNodeLabel(_:vc1) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(BNodeLabel(_:vc1))),None,None,None,None)),None,None)))))]: abcd is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExprRefbnode1_fail-lit-short> ;
  foaf:name        "1val1vExprRefbnode1_fail-lit-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/o1a> doesn't satisfy facet MaxLength(19) with length 20\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MaxLength(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MaxLength(19)),None)),None,None,None,None)),None,None)))))]: <http://a.example/o1a> is NonLiteral" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1nonliteralMaxlength_fail-iri-long> ;
  foaf:name        "1nonliteralMaxlength_fail-iri-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: _:b1167a403089b3e9372b1d64872896f2 is not an IRI\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1iriRef1_fail-bnode> ;
  foaf:name        "1iriRef1_fail-bnode"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotClosed_pass> ;
  foaf:name        "1dotClosed_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 4.5 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMininclusiveDOUBLE_pass-float-equal> ;
  foaf:name        "1floatMininclusiveDOUBLE_pass-float-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/s1>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p1>),\"a\"),C1), ((Direct(<http://a.example/p1>),\"c\"),C1), ((Direct(<http://a.example/p1>),\"e\"),C1), ((Direct(<http://a.example/p1>),\"f\"),C1), ((Direct(<http://a.example/p1>),\"d\"),C1), ((Direct(<http://a.example/p1>),\"b\"),C1)) doesn't match regular expression\nBag {| C1 -> 6 |} doesn't match Rbe Symbol(C1,0,1)\nErr: Interval checker failed with value [6;-]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1cardOpt_pass6> ;
  foaf:name        "1cardOpt_pass6"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: ab doesn't have datatype <http://www.w3.org/2001/XMLSchema#integer>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1datatypeLength_fail-missing> ;
  foaf:name        "1datatypeLength_fail-missing"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxInclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MaxInclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 5.6 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMaxinclusiveDECIMAL_fail-decimal-high> ;
  foaf:name        "1decimalMaxinclusiveDECIMAL_fail-decimal-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: TotalDigits(5)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None)))))]: 1.2345 is a Literal" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalTotaldigits_pass-decimal-equalLead> ;
  foaf:name        "1literalTotaldigits_pass-decimal-equalLead"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/n1>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p1>),<http://a.example/n3>),C1), ((Direct(<http://a.example/p1>),<http://a.example/n2>),C1)) doesn't match regular expression\nBag {| C1 -> 2 |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [2;2]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotInline1_overReferrer,overReferent> ;
  foaf:name        "1dotInline1_overReferrer,overReferent"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 5.5e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMaxexclusiveDECIMAL_fail-double-equal> ;
  foaf:name        "1doubleMaxexclusiveDECIMAL_fail-double-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n(\"ab\": +<http://a.example/vc4>) -> Evidences: ab passes OR\n(\"ab\": +<http://a.example/vc1>) -> Evidences: ab is a Literal\n ab satisfies Pattern(ab.*) with lexical form ab\n----------------------------log-----------------------\n[\"ab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc4>))),None,None,None,None)),None,None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/vc4>) -> ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))))]: ab is a Literal\n[\"ab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc4>))),None,None,None,None)),None,None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/vc4>) -> ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))))]: ab satisfies Pattern(ab.*) with lexical form ab\n[\"ab\",ShapeType(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>)))),Some(IRILabel(<http://a.example/vc4>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc4>))),None,None,None,None)),None,None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/vc4>) -> ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))))]: ab passes OR" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExprRefOR3_passvc1> ;
  foaf:name        "1val1vExprRefOR3_passvc1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MaxExclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MaxExclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 4.4 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMaxexclusiveINTEGER_pass-decimal-low> ;
  foaf:name        "1decimalMaxexclusiveINTEGER_pass-decimal-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: abcde is a Literal\n abcde satisfies Length(5) with length 5\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Length(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Length(5)),None)),None,None,None,None)),None,None)))))]: abcde is a Literal\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Length(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Length(5)),None)),None,None,None,None)),None,None)))))]: abcde satisfies Length(5) with length 5" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalLength_pass-lit-equal> ;
  foaf:name        "1literalLength_pass-lit-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: 5 doesn't have datatype <http://www.w3.org/2001/XMLSchema#integer>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveINTEGER_fail-byte-equal> ;
  foaf:name        "1integerMininclusiveINTEGER_fail-byte-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#startCode1fail_abort> ;
  foaf:name        "startCode1fail_abort"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: abcde is not an IRI\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1iriLength_fail-lit-equal> ;
  foaf:name        "1iriLength_fail-lit-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/x>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#open3Somedotclosecard2_pass-p1X2> ;
  foaf:name        "open3Somedotclosecard2_pass-p1X2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/s1>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p1>),\"b\"),C1), ((Direct(<http://a.example/p1>),\"a\"),C1), ((Direct(<http://a.example/p1>),\"c\"),C1)) doesn't match regular expression\nBag {| C1 -> 3 |} doesn't match Rbe Symbol(C1,2,2)\nErr: Interval checker failed with value <empty(2;1)>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1card2_fail3> ;
  foaf:name        "1card2_fail3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error es.weso.rdf.parser.RDFParserException: RDFParserException: Value of predicate <http://www.w3.org/ns/shacl/test-suite#focus> must be a IRI but it is: _:cd3026580384f802547ca7089f31bdec" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusMinLength-dot_pass-bnode-equal> ;
  foaf:name        "1focusMinLength-dot_pass-bnode-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxInclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 5 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMaxinclusiveDECIMALint_pass-integer-equal> ;
  foaf:name        "1integerMaxinclusiveDECIMALint_pass-integer-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error es.weso.rdf.parser.RDFParserException: RDFParserException: Value of predicate <http://www.w3.org/ns/shacl/test-suite#focus> must be a IRI but it is: _:496d0773e9bb207e007709e5e54b5cf8" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusMaxLength-dot_fail-bnode-long> ;
  foaf:name        "1focusMaxLength-dot_fail-bnode-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 5 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveDOUBLEintLeadTrail_pass-integer-equal> ;
  foaf:name        "1integerMininclusiveDOUBLEintLeadTrail_pass-integer-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: <http://a.example/o1> is an IRI\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(),None)),None,None,None,None)),None,None)))))]: <http://a.example/o1> is an IRI" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1iri_pass-iri> ;
  foaf:name        "1iri_pass-iri"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(5.00))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDecimal(5.00))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDecimal(5.00))),None)),None,None,None,None)),None,None)))))]: 5.6 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMininclusiveDECIMALintLeadTrail_pass-float-high> ;
  foaf:name        "1floatMininclusiveDECIMALintLeadTrail_pass-float-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/x>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#open3groupdotclosecard23Annot3Code2-p1p2p3X3> ;
  foaf:name        "open3groupdotclosecard23Annot3Code2-p1p2p3X3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinExclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinExclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinExclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 5 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMinexclusiveDECIMALint_fail-integer-equal> ;
  foaf:name        "1integerMinexclusiveDECIMALint_fail-integer-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/o> doesn't match Pattern(http://a.example/o1) with lexical form http://a.example/o\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(Pattern(http://a.example/o1)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(Pattern(http://a.example/o1)),None)),None,None,None,None)),None,None)))))]: <http://a.example/o> is an IRI" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1iriPattern_fail-iri-short> ;
  foaf:name        "1iriPattern_fail-iri-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1cardPlus_pass6> ;
  foaf:name        "1cardPlus_pass6"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/s1> is not a BlankNode\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusBNODE_dot_fail-iriFocusLabel-equal> ;
  foaf:name        "1focusBNODE_dot_fail-iriFocusLabel-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: abc passes OR\n(\"abc\": +<http://a.example/vc3>) -> Evidences: abc is a Literal\n abc satisfies Pattern((ab)*) with lexical form abc\n----------------------------log-----------------------\n[\"abc\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: abc is a Literal\n[\"abc\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None),Some(IRILabel(<http://a.example/vc3>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: abc is a Literal\n[\"abc\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None),Some(IRILabel(<http://a.example/vc3>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: abc satisfies Pattern((ab)*) with lexical form abc\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)))), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: abc passes OR" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExpr1AND1OR1Ref3_failvc1vc3> ;
  foaf:name        "1val1vExpr1AND1OR1Ref3_failvc1vc3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 6 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveDECIMALint_pass-integer-high> ;
  foaf:name        "1integerMininclusiveDECIMALint_pass-integer-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: FractionDigits(5)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(FractionDigits(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(FractionDigits(5)),None)),None,None,None,None)),None,None)))))]: 1.23456 is a Literal" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalFractiondigits_pass-decimal-equal> ;
  foaf:name        "1literalFractiondigits_pass-decimal-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 5.6 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMaxexclusiveDOUBLE_fail-float-high> ;
  foaf:name        "1floatMaxexclusiveDOUBLE_fail-float-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotNoCode3_pass> ;
  foaf:name        "1dotNoCode3_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/x>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p1>),\"p1-0\"),C1)) doesn't match regular expression\nBag {| C1 -> 1 |} doesn't match Rbe Repeat(Or(Or(Symbol(C1,1,1),Symbol(C2,1,1)),Symbol(C3,1,1)),2,2)\nErr: Non nullable expression: And(Symbol(C1,0,0),Or(Or(Symbol(C1,1,1),Symbol(C2,1,1)),Symbol(C3,1,1))), bag: {| C1 -> 1 |}, rbe: Repeat(Or(Or(Symbol(C1,1,1),Symbol(C2,1,1)),Symbol(C3,1,1)),2,2), open: false\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#open3Somedotclosecard2_fail-p1> ;
  foaf:name        "open3Somedotclosecard2_fail-p1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: <http://a.example/s1> satisfies MinLength(19) with length 19\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(ShapeAnd(List(NodeConstraint(None,None,List(MinLength(19)),None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(NodeConstraint(None,None,List(MinLength(19)),None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))]: <http://a.example/s1> satisfies MinLength(19) with length 19" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusMinLength-dot_pass-iri-equal> ;
  foaf:name        "1focusMinLength-dot_pass-iri-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1card2Star_pass6> ;
  foaf:name        "1card2Star_pass6"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.50))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDecimal(4.50))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDecimal(4.50))),None)),None,None,None,None)),None,None)))))]: 5.6e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMininclusiveDECIMALLeadTrail_pass-double-high> ;
  foaf:name        "1doubleMininclusiveDECIMALLeadTrail_pass-double-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: ab doesn't belong to set List(LangString(ab,@en-fr))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1LANGTAG_LabLTen> ;
  foaf:name        "1val1LANGTAG_LabLTen"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: 4.5 doesn't have datatype <http://www.w3.org/2001/XMLSchema#decimal>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMinexclusiveDECIMAL_fail-float-equal> ;
  foaf:name        "1decimalMinexclusiveDECIMAL_fail-float-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/o1> is not an Literal\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalPattern19_fail-iri-match> ;
  foaf:name        "1literalPattern19_fail-iri-match"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.50))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(4.50))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(4.50))),None)),None,None,None,None)),None,None)))))]: 6 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveDECIMALLeadTrail_pass-integer-high> ;
  foaf:name        "1integerMininclusiveDECIMALLeadTrail_pass-integer-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: ab is a literal but should be a NonLiteral\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1nonliteral_fail-literal> ;
  foaf:name        "1nonliteral_fail-literal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error java.lang.Exception: CTable: Not implemented table generation for inclusion" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#2EachInclude1_pass> ;
  foaf:name        "2EachInclude1_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinExclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinExclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinExclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 5 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMinexclusiveINTEGER_fail-integer-equal> ;
  foaf:name        "1integerMinexclusiveINTEGER_fail-integer-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: _:e1078325da2ba7559c4b104d63866022 doesn't match Pattern(ab) with lexical form e1078325da2ba7559c4b104d63866022\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(BNodeKind),None,List(Pattern(ab)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(BNodeKind),None,List(Pattern(ab)),None)),None,None,None,None)),None,None)))))]: _:e1078325da2ba7559c4b104d63866022 is a BlankNode" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1bnodePattern_pass-bnode-match> ;
  foaf:name        "1bnodePattern_pass-bnode-match"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(5.00))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(5.00))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(5.00))),None)),None,None,None,None)),None,None)))))]: 5.6 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMininclusiveDECIMALintLeadTrail_pass-decimal-high> ;
  foaf:name        "1decimalMininclusiveDECIMALintLeadTrail_pass-decimal-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error java.lang.Exception: CTable: Not implemented table generation for inclusion" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#2EachInclude1-after_pass> ;
  foaf:name        "2EachInclude1-after_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxExclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxExclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 5.5e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMaxexclusiveDOUBLEintLeadTrail_fail-double-equal> ;
  foaf:name        "1doubleMaxexclusiveDOUBLEintLeadTrail_fail-double-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinExclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinExclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinExclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 4 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMinexclusiveDECIMALint_fail-integer-low> ;
  foaf:name        "1integerMinexclusiveDECIMALint_fail-integer-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: 4.5 doesn't have datatype <http://www.w3.org/2001/XMLSchema#integer>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveINTEGER_fail-decimal-equal> ;
  foaf:name        "1integerMininclusiveINTEGER_fail-decimal-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: No candidates match. Neighs: List(), Table: CTable { constraints: Map(C1 -> Pos(NodeConstraint(None,None,List(),None)))\n\r\n paths: Map(Direct(<http://a.example/p1>) -> Set(C1))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dot_fail-empty> ;
  foaf:name        "1dot_fail-empty"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: 0.0e0 doesn't belong to set List(DatatypeString(0.0,<http://www.w3.org/2001/XMLSchema#decimal>))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1DOUBLElowercase_0_0e0> ;
  foaf:name        "1val1DOUBLElowercase_0_0e0"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 5.6 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMininclusiveINTEGERLead_pass-float-high> ;
  foaf:name        "1floatMininclusiveINTEGERLead_pass-float-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 5 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveDOUBLEintLeadTrail_pass-integer-equalLead> ;
  foaf:name        "1integerMininclusiveDOUBLEintLeadTrail_pass-integer-equalLead"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: _:2a1f210b27a0887e44f8fb77f30133c6 is NonLiteral\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(),None)),None,None,None,None)),None,None)))))]: _:2a1f210b27a0887e44f8fb77f30133c6 is NonLiteral" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1nonliteral_pass-bnode> ;
  foaf:name        "1nonliteral_pass-bnode"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MaxInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MaxInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 4.4 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMaxinclusiveINTEGER_pass-float-low> ;
  foaf:name        "1floatMaxinclusiveINTEGER_pass-float-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/n1>: +<http://a.example/S1>) -> Evidences: \n(<http://a.example/n2>: +_:S2) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1refbnode1_pass> ;
  foaf:name        "1refbnode1_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: false == false\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(DatatypeString(false,<http://www.w3.org/2001/XMLSchema#boolean>))))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(DatatypeString(false,<http://www.w3.org/2001/XMLSchema#boolean>))))),None,None,None,None)),None,None)))))]: false == false" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1false_pass> ;
  foaf:name        "1val1false_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: TotalDigits(5)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None)))))]: 1.23456 is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalTotaldigits_fail-decimal-longTrail> ;
  foaf:name        "1literalTotaldigits_fail-decimal-longTrail"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: ab doesn't have datatype <http://www.w3.org/2001/XMLSchema#integer>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveINTEGER_fail-string-equal> ;
  foaf:name        "1integerMininclusiveINTEGER_fail-string-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/x>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p3>),\"p3-0\"),C3), ((Direct(<http://a.example/p2>),\"p2-0\"),C2), ((Direct(<http://a.example/p1>),\"p1-0\"),C1)) doesn't match regular expression\nBag {| C1 -> 1, C2 -> 1, C3 -> 1 |} doesn't match Rbe Or(Symbol(C1,1,1),And(Symbol(C2,1,1),Symbol(C3,1,1)))\nErr: Interval checker failed with value [2;2]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotSome2dot-someOf_fail_p1p2p3> ;
  foaf:name        "1dotSome2dot-someOf_fail_p1p2p3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n(\"abab\": +<http://a.example/vc4>) -> Evidences: \n(\"abab\": +<http://a.example/vc2>) -> Evidences: abab is a Literal\n abab satisfies MaxLength(5) with length 4\n(\"abab\": +<http://a.example/vc1>) -> Evidences: abab is a Literal\n abab satisfies MinLength(4) with length 4\n(\"abab\": +<http://a.example/vc3>) -> Evidences: abab is a Literal\n abab satisfies Pattern((ab)+) with lexical form abab\n----------------------------log-----------------------\n[\"abab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc4>))),None,None,None,None)),None,None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None), IRILabel(<http://a.example/vc4>) -> ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))))]: abab is a Literal\n[\"abab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc4>))),None,None,None,None)),None,None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None), IRILabel(<http://a.example/vc4>) -> ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))))]: abab satisfies MinLength(4) with length 4\n[\"abab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None),Some(IRILabel(<http://a.example/vc2>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc4>))),None,None,None,None)),None,None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None), IRILabel(<http://a.example/vc4>) -> ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))))]: abab is a Literal\n[\"abab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None),Some(IRILabel(<http://a.example/vc2>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc4>))),None,None,None,None)),None,None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None), IRILabel(<http://a.example/vc4>) -> ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))))]: abab satisfies MaxLength(5) with length 4\n[\"abab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None),Some(IRILabel(<http://a.example/vc3>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc4>))),None,None,None,None)),None,None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None), IRILabel(<http://a.example/vc4>) -> ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))))]: abab is a Literal\n[\"abab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None),Some(IRILabel(<http://a.example/vc3>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc4>))),None,None,None,None)),None,None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None), IRILabel(<http://a.example/vc4>) -> ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))))]: abab satisfies Pattern((ab)+) with lexical form abab" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExprRefAND3_pass> ;
  foaf:name        "1val1vExprRefAND3_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n(\"cd\": +<http://a.example/vc4>) -> Evidences: cd passes OR\n(\"cd\": +<http://a.example/vc2>) -> Evidences: cd is a Literal\n cd satisfies Pattern(.*cd.*) with lexical form cd\n----------------------------log-----------------------\n[\"cd\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc4>))),None,None,None,None)),None,None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/vc4>) -> ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))))]: cd is a Literal\n[\"cd\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None),Some(IRILabel(<http://a.example/vc2>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc4>))),None,None,None,None)),None,None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/vc4>) -> ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))))]: cd is a Literal\n[\"cd\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None),Some(IRILabel(<http://a.example/vc2>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc4>))),None,None,None,None)),None,None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/vc4>) -> ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))))]: cd satisfies Pattern(.*cd.*) with lexical form cd\n[\"cd\",ShapeType(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>)))),Some(IRILabel(<http://a.example/vc4>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeRef(IRILabel(<http://a.example/vc4>))),None,None,None,None)),None,None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/vc4>) -> ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))))]: cd passes OR" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExprRefOR3_passvc2> ;
  foaf:name        "1val1vExprRefOR3_passvc2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: ^ab$ is a Literal\n ^ab$ satisfies Pattern(ab) with lexical form ^ab$\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab)),None)),None,None,None,None)),None,None)))))]: ^ab$ is a Literal\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab)),None)),None,None,None,None)),None,None)))))]: ^ab$ satisfies Pattern(ab) with lexical form ^ab$" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalPattern_fail-lit-StartlitEnd> ;
  foaf:name        "1literalPattern_fail-lit-StartlitEnd"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: 4.5 doesn't have datatype <http://www.w3.org/2001/XMLSchema#float>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMinexclusivexsd-float_fail-decimal-equal> ;
  foaf:name        "1floatMinexclusivexsd-float_fail-decimal-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/x>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#openopen1dotSome1dotclose1dotclose_pass_p2p3> ;
  foaf:name        "openopen1dotSome1dotclose1dotclose_pass_p2p3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinExclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinExclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinExclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 4.4e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMinexclusiveINTEGER_fail-double-low> ;
  foaf:name        "1doubleMinexclusiveINTEGER_fail-double-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: _:3ab2096708fc05809c9b0bbfa692d2cb is not an Literal\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalLength_fail-bnode-equal> ;
  foaf:name        "1literalLength_fail-bnode-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1cardStar_pass1> ;
  foaf:name        "1cardStar_pass1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/v1> doesn't belong to set List(StemRange(Wildcard(),Some(List(IRIValue(<http://a.example/v1>), IRIValue(<http://a.example/v2>), IRIValue(<http://a.example/v3>)))))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1dotMinusiriStem3_v1> ;
  foaf:name        "1val1dotMinusiriStem3_v1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: _:ac64ec9314e3f3587157f428d435ff73 is a BlankNode\n _:ac64ec9314e3f3587157f428d435ff73 satisfies MinLength(5) with length 32\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(BNodeKind),None,List(MinLength(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(BNodeKind),None,List(MinLength(5)),None)),None,None,None,None)),None,None)))))]: _:ac64ec9314e3f3587157f428d435ff73 is a BlankNode\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(BNodeKind),None,List(MinLength(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(BNodeKind),None,List(MinLength(5)),None)),None,None,None,None)),None,None)))))]: _:ac64ec9314e3f3587157f428d435ff73 satisfies MinLength(5) with length 32" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1bnodeMinlength_pass-bnode-long> ;
  foaf:name        "1bnodeMinlength_pass-bnode-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/n1>, shape: <http://a.example/S1> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1refbnode1_fail-g1-arc> ;
  foaf:name        "1refbnode1_fail-g1-arc"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: <http://a.example/o1> is an IRI\n <http://a.example/o1> satisfies Pattern(http://a.example/o1) with lexical form http://a.example/o1\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(Pattern(http://a.example/o1)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(Pattern(http://a.example/o1)),None)),None,None,None,None)),None,None)))))]: <http://a.example/o1> is an IRI\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(Pattern(http://a.example/o1)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(Pattern(http://a.example/o1)),None)),None,None,None,None)),None,None)))))]: <http://a.example/o1> satisfies Pattern(http://a.example/o1) with lexical form http://a.example/o1" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1iriPattern_pass-iri-match> ;
  foaf:name        "1iriPattern_pass-iri-match"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: abcde is a Literal\n abcde satisfies MaxLength(5) with length 5\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None)),None,None,None,None)),None,None)))))]: abcde is a Literal\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None)),None,None,None,None)),None,None)))))]: abcde satisfies MaxLength(5) with length 5" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalMaxlength_pass-lit-equal> ;
  foaf:name        "1literalMaxlength_pass-lit-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: <http://a.example/o1a> is an IRI\n <http://a.example/o1a> satisfies Pattern(http://a.example/o1) with lexical form http://a.example/o1a\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(Pattern(http://a.example/o1)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(Pattern(http://a.example/o1)),None)),None,None,None,None)),None,None)))))]: <http://a.example/o1a> is an IRI\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(Pattern(http://a.example/o1)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(Pattern(http://a.example/o1)),None)),None,None,None,None)),None,None)))))]: <http://a.example/o1a> satisfies Pattern(http://a.example/o1) with lexical form http://a.example/o1a" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1iriPattern_fail-iri-long> ;
  foaf:name        "1iriPattern_fail-iri-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error es.weso.rdf.parser.RDFParserException: RDFParserException: objectFromPredicate: Not found triples with subject _:1bb0a7ff4d4888c62c26df37f9a8da25 and predicate <http://www.w3.org/ns/shacl/test-suite#shape>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#startRefIRIREF_pass-others_lexicallyEarlier> ;
  foaf:name        "startRefIRIREF_pass-others_lexicallyEarlier"
] .

<http://www.di.uniovi.es/~labra#me>
        foaf:homepage  "http://www.di.uniovi.es/~labra" ;
        foaf:name      "Jose Emilio Labra Gayo" .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 6 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveINTEGER_pass-integer-high> ;
  foaf:name        "1integerMininclusiveINTEGER_pass-integer-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotShapeNoCode1_pass> ;
  foaf:name        "1dotShapeNoCode1_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/s1>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p1>),<http://a.example/o2>),C1), ((Direct(<http://a.example/p1>),<http://a.example/o1>),C1)) doesn't match regular expression\nBag {| C1 -> 2 |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [2;2]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val2IRIREFExtra1_fail-iri2> ;
  foaf:name        "1val2IRIREFExtra1_fail-iri2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxExclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxExclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 6 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMaxexclusiveINTEGER_fail-integer-high> ;
  foaf:name        "1integerMaxexclusiveINTEGER_fail-integer-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/s1>, shape: <http://a.example/S1> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dot-base_fail-missing> ;
  foaf:name        "1dot-base_fail-missing"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: None of the alternatives of OR(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))) is valid for node <http://a.example/n1>\n----------------------------log-----------------------\n[<http://a.example/n1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None),None,Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> doesn't satisfy Shape(-, false, -, TripleConstraint(-, -, http://a.example/p1, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -). Negation declared in <http://a.example/S1>. Error: ViolationError(Attempt: node: <http://a.example/n1>, shape: <http://a.example/S1> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0])\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> satisfies not(Shape(-, false, -, TripleConstraint(-, -, http://a.example/p1, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -))\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> passes OR\n[<http://a.example/n1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None),None,Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> doesn't satisfy Shape(-, false, -, TripleConstraint(-, -, http://a.example/p3, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -). Negation declared in <http://a.example/S1>. Error: ViolationError(Attempt: node: <http://a.example/n1>, shape: <http://a.example/S1> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0])\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> satisfies not(Shape(-, false, -, TripleConstraint(-, -, http://a.example/p3, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -))\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> passes OR\n[<http://a.example/n1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None),None,Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> doesn't satisfy Shape(-, false, -, TripleConstraint(-, -, http://a.example/p5, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -). Negation declared in <http://a.example/S1>. Error: ViolationError(Attempt: node: <http://a.example/n1>, shape: <http://a.example/S1> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0])\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> satisfies not(Shape(-, false, -, TripleConstraint(-, -, http://a.example/p5, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -))\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> passes OR" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#NOT1dotOR2dotX3AND1_fail-empty> ;
  foaf:name        "NOT1dotOR2dotX3AND1_fail-empty"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/v> doesn't belong to set List(StemRange(IRIStem(<http://a.example/v>),Some(List(IRIValue(<http://a.example/v1>), IRIValue(<http://a.example/v2>), IRIValue(<http://a.example/v3>)))))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1iriStemMinusiriStem3_passIv> ;
  foaf:name        "1val1iriStemMinusiriStem3_passIv"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/s1>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p1>),\"a\"),C1)) doesn't match regular expression\nBag {| C1 -> 1 |} doesn't match Rbe Symbol(C1,2,5)\nErr: Interval checker failed with value <empty(1;0)>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1card25_fail1> ;
  foaf:name        "1card25_fail1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: <http://a.example/o> is an IRI\n <http://a.example/o> satisfies MaxLength(19) with length 18\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(MaxLength(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(MaxLength(19)),None)),None,None,None,None)),None,None)))))]: <http://a.example/o> is an IRI\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(MaxLength(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(IRIKind),None,List(MaxLength(19)),None)),None,None,None,None)),None,None)))))]: <http://a.example/o> satisfies MaxLength(19) with length 18" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1iriMaxlength_pass-iri-short> ;
  foaf:name        "1iriMaxlength_pass-iri-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: ab is a Literal\n ab satisfies Pattern(ab.*) with lexical form ab\n ab passes OR\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None)))))]: ab is a Literal\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None)))))]: ab satisfies Pattern(ab.*) with lexical form ab\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None)))))]: ab passes OR" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExprOR3_passvc1> ;
  foaf:name        "1val1vExprOR3_passvc1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error java.lang.Exception: Not implemented Any yet" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#0focusBNODE_other_fail-iriFocusLabel> ;
  foaf:name        "0focusBNODE_other_fail-iriFocusLabel"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: TotalDigits(2)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(2)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(2)),None)),None,None,None,None)),None,None)))))]: 64 is a Literal" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalTotaldigits_pass-byte-equal> ;
  foaf:name        "1literalTotaldigits_pass-byte-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error es.weso.rdf.parser.RDFParserException: RDFParserException: Value of predicate <http://www.w3.org/ns/shacl/test-suite#focus> must be a IRI but it is: _:d7d6df691f8e377b68495939b3045226" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusBNODELength_dot_fail-short> ;
  foaf:name        "1focusBNODELength_dot_fail-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: ab is a Literal\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(),None)),None,None,None,None)),None,None)))))]: ab is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literal_pass-literal> ;
  foaf:name        "1literal_pass-literal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 4.4e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMininclusiveINTEGERLead_fail-double-low> ;
  foaf:name        "1doubleMininclusiveINTEGERLead_fail-double-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error es.weso.rdf.parser.RDFParserException: RDFParserException: Value of predicate <http://www.w3.org/ns/shacl/test-suite#focus> must be a IRI but it is: _:cd3026580384f802547ca7089f31bdec" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusLength-dot_pass-bnode-equal> ;
  foaf:name        "1focusLength-dot_pass-bnode-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: _:f7ac79b4762f182bdc2678ea1d07c72e doesn't match Pattern(.*ab) with lexical form f7ac79b4762f182bdc2678ea1d07c72e\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(Pattern(.*ab)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(Pattern(.*ab)),None)),None,None,None,None)),None,None)))))]: _:f7ac79b4762f182bdc2678ea1d07c72e is NonLiteral" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1nonliteralPattern_pass-bnode-match> ;
  foaf:name        "1nonliteralPattern_pass-bnode-match"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: _:067d105dda04c3ff9f11ee43df84a6c2 is not an Literal\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalFractiondigits_fail-bnode> ;
  foaf:name        "1literalFractiondigits_fail-bnode"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinExclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 4.4 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMinexclusiveDECIMAL_fail-float-low> ;
  foaf:name        "1floatMinexclusiveDECIMAL_fail-float-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinExclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinExclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinExclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 6 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMinexclusiveINTEGER_pass-integer-high> ;
  foaf:name        "1integerMinexclusiveINTEGER_pass-integer-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: abcdef is a Literal\n abcdef satisfies Pattern(ab.*) with lexical form abcdef\n abcdef passes OR\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None)))))]: abcdef is a Literal\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None)))))]: abcdef satisfies Pattern(ab.*) with lexical form abcdef\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None)))))]: abcdef passes OR" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExprOR3_passvc1vc2vc3> ;
  foaf:name        "1val1vExprOR3_passvc1vc2vc3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxExclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxExclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 5 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMaxexclusiveDECIMALint_fail-integer-equal> ;
  foaf:name        "1integerMaxexclusiveDECIMALint_fail-integer-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/n2>, shape: <http://a.example/S2> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotRefAND3_failAll> ;
  foaf:name        "1dotRefAND3_failAll"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.50))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(4.50))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(4.50))),None)),None,None,None,None)),None,None)))))]: 5.6 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMininclusiveDECIMALLeadTrail_pass-decimal-high> ;
  foaf:name        "1decimalMininclusiveDECIMALLeadTrail_pass-decimal-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/n2>, shape: <http://a.example/S2> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotRef1_missingReferent> ;
  foaf:name        "1dotRef1_missingReferent"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: baba is a Literal\n baba satisfies MinLength(4) with length 4\n baba is a Literal\n baba satisfies MaxLength(5) with length 4\n baba is a Literal\n baba satisfies Pattern((ab)+) with lexical form baba\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)))),None,None,None,None)),None,None)))))]: baba is a Literal\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)))),None,None,None,None)),None,None)))))]: baba satisfies MinLength(4) with length 4\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)))),None,None,None,None)),None,None)))))]: baba is a Literal\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)))),None,None,None,None)),None,None)))))]: baba satisfies MaxLength(5) with length 4\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)))),None,None,None,None)),None,None)))))]: baba is a Literal\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)))),None,None,None,None)),None,None)))))]: baba satisfies Pattern((ab)+) with lexical form baba" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExprAND3_failvc3> ;
  foaf:name        "1val1vExprAND3_failvc3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/s1>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p1>),<http://a.example/o2>),C1), ((Direct(<http://a.example/p1>),<http://a.example/o1>),C1)) doesn't match regular expression\nBag {| C1 -> 2 |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [2;2]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1IRIREFExtra1_pass-iri2> ;
  foaf:name        "1val1IRIREFExtra1_pass-iri2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: ab doesn't belong to set List(DatatypeString(false,<http://www.w3.org/2001/XMLSchema#boolean>))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1false_ab> ;
  foaf:name        "1val1false_ab"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/s1a> doesn't satisfy facet MaxLength(19) with length 20\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1focusMaxLength-dot_fail-iri-long> ;
  foaf:name        "1focusMaxLength-dot_fail-iri-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/s>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p3>),<http://a.example/o3>),C3), ((Direct(<http://a.example/p3>),<http://a.example/o3a>),C3), ((Direct(<http://a.example/p1>),<http://a.example/o1a>),C1), ((Direct(<http://a.example/p2>),<http://a.example/o2a>),C2), ((Direct(<http://a.example/p1>),<http://a.example/o1>),C1), ((Direct(<http://a.example/p2>),<http://a.example/o2>),C2)) doesn't match regular expression\nBag {| C1 -> 2, C2 -> 2, C3 -> 2 |} doesn't match Rbe And(And(Symbol(C1,1,1),Symbol(C2,1,1)),Symbol(C3,1,1))\nErr: Interval checker failed with value [2;2]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#3groupdot3Extra_pass-iri2> ;
  foaf:name        "3groupdot3Extra_pass-iri2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: None of the alternatives of OR(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>)))))) is valid for node abab\n----------------------------log-----------------------\n[\"abab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(3)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))),None,None,None,None)),None,None)))))]: abab is a Literal\n[\"abab\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(MaxLength(3)),None),Some(IRILabel(<http://a.example/vc2>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(MaxLength(3)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)*)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeAnd(List(ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))))),None,None,None,None)),None,None)))))]: abab is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExpr1OR1AND1Ref3_failvc1vc2> ;
  foaf:name        "1val1vExpr1OR1AND1Ref3_failvc1vc2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: 5.5 doesn't have datatype <http://www.w3.org/2001/XMLSchema#double>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMaxinclusiveDECIMAL_fail-float-equal> ;
  foaf:name        "1doubleMaxinclusiveDECIMAL_fail-float-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: TotalDigits(2)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(2)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(2)),None)),None,None,None,None)),None,None)))))]: 5 is a Literal" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalTotaldigits_pass-byte-short> ;
  foaf:name        "1literalTotaldigits_pass-byte-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotNoCode1_pass> ;
  foaf:name        "1dotNoCode1_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/s1>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p1>),_:e9cb992907f832d2b496bd1c62047cdf),C1), ((Direct(<http://a.example/p1>),<http://a.example/o1>),C1)) doesn't match regular expression\nBag {| C1 -> 2 |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [2;2]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val2IRIREFExtra1_pass-iri-bnode> ;
  foaf:name        "1val2IRIREFExtra1_pass-iri-bnode"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: FractionDigits(5)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(FractionDigits(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(FractionDigits(5)),None)),None,None,None,None)),None,None)))))]: 1.2345 is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalFractiondigits_fail-malformedxsd_integer-1_2345> ;
  foaf:name        "1literalFractiondigits_fail-malformedxsd_integer-1_2345"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: No candidates match. Neighs: List(), Table: CTable { constraints: Map(C1 -> Pos(NodeConstraint(None,None,List(),None)))\n\r\n paths: Map(Inverse(<http://a.example/p1>) -> Set(C1))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1inversedot_fail-empty> ;
  foaf:name        "1inversedot_fail-empty"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: FractionDigits(4)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(FractionDigits(4)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(FractionDigits(4)),None)),None,None,None,None)),None,None)))))]: 1.2345 is a Literal" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalFractiondigits_pass-decimal-equalTrail> ;
  foaf:name        "1literalFractiondigits_pass-decimal-equalTrail"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/o1> is not an Literal\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalLength_fail-iri-equal> ;
  foaf:name        "1literalLength_fail-iri-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxExclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxExclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 4.4e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMaxexclusiveINTEGER_pass-double-low> ;
  foaf:name        "1doubleMaxexclusiveINTEGER_pass-double-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error java.lang.Exception: Error at 4:11 mismatched input ',' expecting {'}', ';', '//', '%'}\n\nError at 4:18 mismatched input '+' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n\nError at 4:26 mismatched input ')' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n\nError at 4:34 extraneous input '}' expecting {<EOF>, KW_BASE, KW_PREFIX, KW_START, KW_AND, KW_OR, IRIREF, PNAME_NS, PNAME_LN, BLANK_NODE_LABEL}\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#nPlus1> ;
  foaf:name        "nPlus1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/n1>, shape: <http://a.example/S1> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotInline1_missingSelfReference> ;
  foaf:name        "1dotInline1_missingSelfReference"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericDecimal(5.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MaxExclusive(NumericDecimal(5.5))),None)),None,None,None,None)),None,None)))))]: 4.4e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMaxexclusiveDECIMAL_pass-double-low> ;
  foaf:name        "1doubleMaxexclusiveDECIMAL_pass-double-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 4.5 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMininclusiveDOUBLE_pass-decimal-equal> ;
  foaf:name        "1decimalMininclusiveDOUBLE_pass-decimal-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinExclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 4.5e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMinexclusiveDOUBLE_fail-double-equal> ;
  foaf:name        "1doubleMinexclusiveDOUBLE_fail-double-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 4 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveINTEGER_fail-integer-low> ;
  foaf:name        "1integerMininclusiveINTEGER_fail-integer-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/n1>: +<http://a.example/S1>) -> Evidences: \n(<http://a.example/n2>: +<http://a.example/S2>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotRef1_overMatchesReferent> ;
  foaf:name        "1dotRef1_overMatchesReferent"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/x>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p3>),\"p3-0\"),C3)) doesn't match regular expression\nBag {| C3 -> 1 |} doesn't match Rbe And(Or(Symbol(C1,1,1),Symbol(C2,1,1)),Symbol(C3,1,1))\nErr: Interval checker failed with value <empty(1;0)>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#openopen1dotSome1dotclose1dotclose_fail_p3> ;
  foaf:name        "openopen1dotSome1dotclose1dotclose_fail_p3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: _:309720054695752bd87b767deaccf5f1 doesn't satisfy facet MaxLength(19) with length 32\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MaxLength(19)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(MaxLength(19)),None)),None,None,None,None)),None,None)))))]: _:309720054695752bd87b767deaccf5f1 is NonLiteral" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1nonliteralMaxlength_pass-bnode-short> ;
  foaf:name        "1nonliteralMaxlength_pass-bnode-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: None of the alternatives of OR(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None))) is valid for node a\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None)))))]: a is a Literal\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None)))))]: a is a Literal\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None)))),None,None,None,None)),None,None)))))]: a is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExprOR3_fail> ;
  foaf:name        "1val1vExprOR3_fail"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: abcde is a Literal\n abcde satisfies MinLength(5) with length 5\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None)),None,None,None,None)),None,None)))))]: abcde is a Literal\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(MinLength(5)),None)),None,None,None,None)),None,None)))))]: abcde satisfies MinLength(5) with length 5" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalMinlength_pass-lit-equal> ;
  foaf:name        "1literalMinlength_pass-lit-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxInclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 6 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMaxinclusiveDECIMALint_fail-integer-high> ;
  foaf:name        "1integerMaxinclusiveDECIMALint_fail-integer-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1card25_pass2> ;
  foaf:name        "1card25_pass2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: TotalDigits(5)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None)))))]: 1.2345 is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalTotaldigits_fail-malformedxsd_integer-1_2345> ;
  foaf:name        "1literalTotaldigits_fail-malformedxsd_integer-1_2345"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinExclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinExclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 4.5 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMinexclusiveDOUBLE_fail-decimal-equal> ;
  foaf:name        "1decimalMinexclusiveDOUBLE_fail-decimal-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/x>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#open3Somedotclosecard23_pass-p2p3> ;
  foaf:name        "open3Somedotclosecard23_pass-p2p3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/o1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1inversedotAnnot3_pass> ;
  foaf:name        "1inversedotAnnot3_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: 1234 doesn't satisfy facet Length(5) with length 4\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(Length(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(Length(5)),None)),None,None,None,None)),None,None)))))]: 1234 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1datatypeLength_fail-short> ;
  foaf:name        "1datatypeLength_fail-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +S1:) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotNS2Comment_pass-noOthers> ;
  foaf:name        "1dotNS2Comment_pass-noOthers"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: 1.234 doesn't have datatype <http://a.example/dt1>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1datatype_wrongDatatype> ;
  foaf:name        "1datatype_wrongDatatype"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/s1>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p1>),\"a\"),C1)) doesn't match regular expression\nBag {| C1 -> 1 |} doesn't match Rbe Symbol(C1,2,2)\nErr: Interval checker failed with value <empty(1;0)>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1card2_fail1> ;
  foaf:name        "1card2_fail1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#decimal>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 4.4 has datatype <http://www.w3.org/2001/XMLSchema#decimal>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1decimalMininclusiveDOUBLELeadTrail_fail-decimal-low> ;
  foaf:name        "1decimalMininclusiveDOUBLELeadTrail_fail-decimal-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: None of the alternatives of OR(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))) is valid for node <http://a.example/n1>\n----------------------------log-----------------------\n[<http://a.example/n1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None),None,Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> doesn't satisfy Shape(-, false, -, TripleConstraint(-, -, http://a.example/p1, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -). Negation declared in <http://a.example/S1>. Error: ViolationError(Attempt: node: <http://a.example/n1>, shape: <http://a.example/S1> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0])\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> satisfies not(Shape(-, false, -, TripleConstraint(-, -, http://a.example/p1, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -))\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> passes OR\n[<http://a.example/n1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None),None,Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> doesn't satisfy Shape(-, false, -, TripleConstraint(-, -, http://a.example/p3, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -). Negation declared in <http://a.example/S1>. Error: ViolationError(Attempt: node: <http://a.example/n1>, shape: <http://a.example/S1> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0])\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> satisfies not(Shape(-, false, -, TripleConstraint(-, -, http://a.example/p3, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -))\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> passes OR\n[<http://a.example/n1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None),None,Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> doesn't satisfy Shape(-, false, -, TripleConstraint(-, -, http://a.example/p5, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -). Negation declared in <http://a.example/S1>. Error: ViolationError(Attempt: node: <http://a.example/n1>, shape: <http://a.example/S1> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0])\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> satisfies not(Shape(-, false, -, TripleConstraint(-, -, http://a.example/p5, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -))\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None), Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> passes OR" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#NOT1dotOR2dotX3AND1_fail-NoShape1> ;
  foaf:name        "NOT1dotOR2dotX3AND1_fail-NoShape1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: ^ab doesn't match Pattern(^ab) with lexical form ^ab\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(^ab)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(Pattern(^ab)),None)),None,None,None,None)),None,None)))))]: ^ab is a Literal" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalPattern_pass-Startlit-match> ;
  foaf:name        "1literalPattern_pass-Startlit-match"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: _:39a92e41d29139cb0b4a22c1b984749f is a BlankNode\n _:39a92e41d29139cb0b4a22c1b984749f satisfies MinLength(5) with length 32\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(BNodeKind),None,List(MinLength(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(BNodeKind),None,List(MinLength(5)),None)),None,None,None,None)),None,None)))))]: _:39a92e41d29139cb0b4a22c1b984749f is a BlankNode\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(BNodeKind),None,List(MinLength(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(BNodeKind),None,List(MinLength(5)),None)),None,None,None,None)),None,None)))))]: _:39a92e41d29139cb0b4a22c1b984749f satisfies MinLength(5) with length 32" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1bnodeMinlength_fail-bnode-short> ;
  foaf:name        "1bnodeMinlength_fail-bnode-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxInclusive(NumericDecimal(5.0))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxInclusive(NumericDecimal(5.0))),None)),None,None,None,None)),None,None)))))]: 4 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMaxinclusiveDECIMALint_pass-integer-low> ;
  foaf:name        "1integerMaxinclusiveDECIMALint_pass-integer-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error es.weso.rdf.parser.RDFParserException: RDFParserException: Value of predicate <http://www.w3.org/ns/shacl/test-suite#focus> must be a IRI but it is: _:d7d6df691f8e377b68495939b3045226" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#0focusIRI_other_fail-bnodeFocusLabel> ;
  foaf:name        "0focusIRI_other_fail-bnodeFocusLabel"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#double>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 4.5e0 has datatype <http://www.w3.org/2001/XMLSchema#double>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1doubleMininclusiveDOUBLELeadTrail_pass-double-equal> ;
  foaf:name        "1doubleMininclusiveDOUBLELeadTrail_pass-double-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +ex:S1) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotLNex_pass-noOthers> ;
  foaf:name        "1dotLNex_pass-noOthers"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/n1>, shape: <http://a.example/S2> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotRef1_missingSelfReference> ;
  foaf:name        "1dotRef1_missingSelfReference"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MaxExclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MaxExclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 4.4 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMaxexclusiveINTEGER_pass-float-low> ;
  foaf:name        "1floatMaxexclusiveINTEGER_pass-float-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MaxExclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxExclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MaxExclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 5 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMaxexclusiveINTEGER_fail-integer-equal> ;
  foaf:name        "1integerMaxexclusiveINTEGER_fail-integer-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: 0e0 doesn't belong to set List(DatatypeString(0.0,<http://www.w3.org/2001/XMLSchema#decimal>))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1DOUBLElowercase_pass> ;
  foaf:name        "1val1DOUBLElowercase_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: 0.0e0 doesn't belong to set List(DatatypeString(0.0,<http://www.w3.org/2001/XMLSchema#decimal>))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1DOUBLE_0_0e0> ;
  foaf:name        "1val1DOUBLE_0_0e0"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +S1:) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotNS2_pass-noOthers> ;
  foaf:name        "1dotNS2_pass-noOthers"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: <http://a.example/o1> == <http://a.example/o1>\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),Some(List(<http://a.example/p2>)),Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o1>))))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),Some(List(<http://a.example/p2>)),Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o1>))))),None,None,None,None)),None,None)))))]: <http://a.example/o1> == <http://a.example/o1>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1IRIREFExtra1p2_pass-iri1> ;
  foaf:name        "1val1IRIREFExtra1p2_pass-iri1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericInt(5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericInt(5))),None)),None,None,None,None)),None,None)))))]: 4.4 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMininclusiveINTEGERLead_fail-float-low> ;
  foaf:name        "1floatMininclusiveINTEGERLead_fail-float-low"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: <http://a.example/o1> == <http://a.example/o1>\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),Some(List(<http://a.example/p1>)),Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o1>))))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),Some(List(<http://a.example/p1>)),Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(IRIValue(<http://a.example/o1>))))),None,None,None,None)),None,None)))))]: <http://a.example/o1> == <http://a.example/o1>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1IRIREFExtra1_pass-iri1> ;
  foaf:name        "1val1IRIREFExtra1_pass-iri1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/x>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#openopen1dotSome1dotclose1dotclose_pass_p1p3> ;
  foaf:name        "openopen1dotSome1dotclose1dotclose_pass_p1p3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error es.weso.rdf.parser.RDFParserException: RDFParserException: Value of predicate <http://www.w3.org/ns/shacl/test-suite#focus> must be a IRI but it is: _:59daac6f721a3dd296a5de8b61d5801c" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#0focusIRI_empty_fail-bnodeFocusLabel> ;
  foaf:name        "0focusIRI_empty_fail-bnodeFocusLabel"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1cardStar_pass6> ;
  foaf:name        "1cardStar_pass6"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/s1>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p1>),<http://a.example/o1>),C1)) doesn't match regular expression\nBag {| C1 -> 1 |} doesn't match Rbe And(Symbol(C1,1,1),Symbol(C2,1,1))\nErr: Interval checker failed with value <empty(1;0)>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#2dot_fail-empty-err> ;
  foaf:name        "2dot_fail-empty-err"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDouble(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDouble(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDouble(4.5))),None)),None,None,None,None)),None,None)))))]: 4.5 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMininclusivexsd-float_pass-float-equal> ;
  foaf:name        "1floatMininclusivexsd-float_pass-float-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/a> doesn't match Pattern(.*ab) with lexical form http://a.example/a\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(Pattern(.*ab)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(Pattern(.*ab)),None)),None,None,None,None)),None,None)))))]: <http://a.example/a> is NonLiteral" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1nonliteralPattern_fail-iri-short> ;
  foaf:name        "1nonliteralPattern_fail-iri-short"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: _:f962012b220082ca5892f4391f511c58 doesn't match Pattern(.*ab) with lexical form f962012b220082ca5892f4391f511c58\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(Pattern(.*ab)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(NonLiteralKind),None,List(Pattern(.*ab)),None)),None,None,None,None)),None,None)))))]: _:f962012b220082ca5892f4391f511c58 is NonLiteral" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1nonliteralPattern_fail-bnode-long> ;
  foaf:name        "1nonliteralPattern_fail-bnode-long"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/x>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p1>),\"p1-0\"),C1)) doesn't match regular expression\nBag {| C1 -> 1 |} doesn't match Rbe Repeat(Or(Or(Symbol(C1,1,1),Symbol(C2,1,1)),Symbol(C3,1,1)),2,3)\nErr: Non nullable expression: And(Symbol(C1,0,0),Repeat(Or(Or(Symbol(C1,1,1),Symbol(C2,1,1)),Symbol(C3,1,1)),1,2)), bag: {| C1 -> 1 |}, rbe: Repeat(Or(Or(Symbol(C1,1,1),Symbol(C2,1,1)),Symbol(C3,1,1)),2,3), open: false\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#open3Somedotclosecard23_fail-p1> ;
  foaf:name        "open3Somedotclosecard23_fail-p1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#integer>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 5 has datatype <http://www.w3.org/2001/XMLSchema#integer>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1integerMininclusiveDECIMAL_pass-integer-equal> ;
  foaf:name        "1integerMininclusiveDECIMAL_pass-integer-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/n1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotInline1_referrer,referent> ;
  foaf:name        "1dotInline1_referrer,referent"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/v1> doesn't belong to set List(StemRange(Wildcard(),Some(List(IRIValue(<http://a.example/v1>), IRIValue(<http://a.example/v2>), IRIValue(<http://a.example/v3>)))))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1refvsMinusiri3_v1> ;
  foaf:name        "1val1refvsMinusiri3_v1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/s1>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p1>),<http://a.example/o2>),C2), ((Direct(<http://a.example/p1>),<http://a.example/o1>),C2)) doesn't match regular expression\nBag {| C2 -> 2 |} doesn't match Rbe Or(Symbol(C1,1,1),And(Symbol(C2,1,1),Symbol(C3,0,1)))\nErr: Interval checker failed with value [2;2]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1IRIREFExtra1Some_pass-iri2> ;
  foaf:name        "1val1IRIREFExtra1Some_pass-iri2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: 5.5e0 doesn't have datatype <http://www.w3.org/2001/XMLSchema#float>\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMaxinclusivexsd-float_fail-double-equal> ;
  foaf:name        "1floatMaxinclusivexsd-float_fail-double-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.50))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDecimal(4.50))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDecimal(4.50))),None)),None,None,None,None)),None,None)))))]: 5.6 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMininclusiveDECIMALLeadTrail_pass-float-high> ;
  foaf:name        "1floatMininclusiveDECIMALLeadTrail_pass-float-high"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: TotalDigits(5)\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(Some(LiteralKind),None,List(TotalDigits(5)),None)),None,None,None,None)),None,None)))))]: 1.23456 is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1literalTotaldigits_fail-decimal-longLeadTrail> ;
  foaf:name        "1literalTotaldigits_fail-decimal-longLeadTrail"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: ef passes OR\n(\"ef\": +<http://a.example/vc3>) -> Evidences: ef is a Literal\n ef satisfies Pattern(.*ef) with lexical form ef\n----------------------------log-----------------------\n[\"ef\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None),Some(IRILabel(<http://a.example/vc1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: ef is a Literal\n[\"ef\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None),Some(IRILabel(<http://a.example/vc2>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: ef is a Literal\n[\"ef\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None),Some(IRILabel(<http://a.example/vc3>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: ef is a Literal\n[\"ef\",ShapeType(NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None),Some(IRILabel(<http://a.example/vc3>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: ef satisfies Pattern(.*ef) with lexical form ef\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/vc1>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(ab.*)),None), IRILabel(<http://a.example/vc2>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*cd.*)),None), IRILabel(<http://a.example/vc3>) -> NodeConstraint(Some(LiteralKind),None,List(Pattern(.*ef)),None), IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeOr(List(ShapeRef(IRILabel(<http://a.example/vc1>)), ShapeRef(IRILabel(<http://a.example/vc2>)), ShapeRef(IRILabel(<http://a.example/vc3>))))),None,None,None,None)),None,None)))))]: ef passes OR" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExpr1OR1OR1Ref3_passvc3> ;
  foaf:name        "1val1vExpr1OR1OR1Ref3_passvc3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: ababab doesn't satisfy facet MaxLength(5) with length 6\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)))),None,None,None,None)),None,None)))))]: ababab is a Literal\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)))),None,None,None,None)),None,None)))))]: ababab satisfies MinLength(4) with length 6\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(ShapeAnd(List(NodeConstraint(Some(LiteralKind),None,List(MinLength(4)),None), NodeConstraint(Some(LiteralKind),None,List(MaxLength(5)),None), NodeConstraint(Some(LiteralKind),None,List(Pattern((ab)+)),None)))),None,None,None,None)),None,None)))))]: ababab is a Literal" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1vExprAND3_failvc2> ;
  foaf:name        "1val1vExprAND3_failvc2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: ab == \"ab\"^^<http://a.example/bloodType>\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(DatatypeString(ab,<http://a.example/bloodType>))))),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),Some(List(DatatypeString(ab,<http://a.example/bloodType>))))),None,None,None,None)),None,None)))))]: ab == \"ab\"^^<http://a.example/bloodType>" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1IRIREFDatatype_pass> ;
  foaf:name        "1val1IRIREFDatatype_pass"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Attempt: node: <http://a.example/s1>, shape: <http://a.example/S1> Candidate line List(((Direct(<http://a.example/p1>),<http://a.example/o2>),C1), ((Direct(<http://a.example/p1>),<http://a.example/o1>),C1)) doesn't match regular expression\nBag {| C1 -> 2 |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [2;2]\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1dotExtra1_fail-iri2> ;
  foaf:name        "1dotExtra1_fail-iri2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Error es.weso.rdf.parser.RDFParserException: RDFParserException: objectFromPredicate: Not found triples with subject _:e101285e223751195316a487773b5c79 and predicate <http://www.w3.org/ns/shacl/test-suite#shape>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#startEqualSpaceInline_pass-noOthers> ;
  foaf:name        "startEqualSpaceInline_pass-noOthers"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/s1>: +<http://a.example/S1>) -> Evidences: \n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1card25_pass3> ;
  foaf:name        "1card25_pass3"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "OK. Result: \n(<http://a.example/n1>: +<http://a.example/S1>) -> Evidences: <http://a.example/n1> passes OR\n <http://a.example/n1> satisfies not(Shape(-, false, -, TripleConstraint(-, -, http://a.example/p3, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -))\n <http://a.example/n1> passes OR\n <http://a.example/n1> satisfies not(Shape(-, false, -, TripleConstraint(-, -, http://a.example/p5, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -))\n <http://a.example/n1> passes OR\n(<http://a.example/n1>: -Shape(-, false, -, TripleConstraint(-, -, http://a.example/p5, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -)) -> Error: Error: Attempt: node: <http://a.example/n1>, shape: <http://a.example/S1> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0]\n(<http://a.example/n1>: -Shape(-, false, -, TripleConstraint(-, -, http://a.example/p3, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -)) -> Error: Error: Attempt: node: <http://a.example/n1>, shape: <http://a.example/S1> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0]\n----------------------------log-----------------------\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> passes OR\n[<http://a.example/n1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None),None,Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> doesn't satisfy Shape(-, false, -, TripleConstraint(-, -, http://a.example/p3, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -). Negation declared in <http://a.example/S1>. Error: ViolationError(Attempt: node: <http://a.example/n1>, shape: <http://a.example/S1> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0])\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> satisfies not(Shape(-, false, -, TripleConstraint(-, -, http://a.example/p3, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -))\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> passes OR\n[<http://a.example/n1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None),None,Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> doesn't satisfy Shape(-, false, -, TripleConstraint(-, -, http://a.example/p5, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -). Negation declared in <http://a.example/S1>. Error: ViolationError(Attempt: node: <http://a.example/n1>, shape: <http://a.example/S1> Candidate line List() doesn't match regular expression\nBag {|  |} doesn't match Rbe Symbol(C1,1,1)\nErr: Interval checker failed with value [0;0])\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> satisfies not(Shape(-, false, -, TripleConstraint(-, -, http://a.example/p5, Some(NodeConstraint(-, -, List(), -)), -, -, -, -), -, -))\n[<http://a.example/n1>,ShapeType(ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))))),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> ShapeAnd(List(ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p2>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p3>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p4>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None))), ShapeOr(List(ShapeNot(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None)), Shape(None,Some(false),None,Some(EachOf(List(TripleConstraint(None,None,<http://a.example/p5>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None), TripleConstraint(None,None,<http://a.example/p6>,Some(NodeConstraint(None,None,List(),None)),None,None,None,None)),None,None,None,None)),None,None)))))))))]: <http://a.example/n1> passes OR" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#NOT1dotOR2dotX3_pass-Shape2> ;
  foaf:name        "NOT1dotOR2dotX3_pass-Shape2"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.5))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDecimal(4.5))),None)),None,None,None,None)),None,None)))))]: 4.5 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMininclusiveDOUBLELeadTrail_pass-float-equal> ;
  foaf:name        "1floatMininclusiveDOUBLELeadTrail_pass-float-equal"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: <http://a.example/v1> doesn't belong to set List(StemRange(IRIStem(<http://a.example/v>),Some(List(IRIValue(<http://a.example/v1>), IRIValue(<http://a.example/v2>), IRIValue(<http://a.example/v3>)))))\n----------------------------log-----------------------\n" ;
                     earl:outcome    earl:passed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1val1iriStemMinusiriStem3_v1> ;
  foaf:name        "1val1iriStemMinusiriStem3_v1"
] .

[ a                earl:Assertion ;
  earl:assertedBy  <http://www.di.uniovi.es/~labra#me> ;
  earl:mode        earl:automatic ;
  earl:result      [ a               earl:TestResult ;
                     dc:date         "2017-01-04T07:28:17"^^<http://www.w3.org/2001/XMLSchema#dateTime> ;
                     dc:description  "Not OK. Error: \nError: Not implemented checkFacet: MinInclusive(NumericDecimal(4.50))\n----------------------------log-----------------------\n[<http://a.example/s1>,ShapeType(Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDecimal(4.50))),None)),None,None,None,None)),None,None),Some(IRILabel(<http://a.example/S1>)),Schema(None,None,None,None,Some(Map(IRILabel(<http://a.example/S1>) -> Shape(None,Some(false),None,Some(TripleConstraint(None,None,<http://a.example/p1>,Some(NodeConstraint(None,Some(<http://www.w3.org/2001/XMLSchema#float>),List(MinInclusive(NumericDecimal(4.50))),None)),None,None,None,None)),None,None)))))]: 04.50 has datatype <http://www.w3.org/2001/XMLSchema#float>" ;
                     earl:outcome    earl:failed
                   ] ;
  earl:subject     <https://github.com/labra/shaclex/> ;
  earl:test        <http://www.w3.org/2013/TurtleTests/manifest.ttl#file:///C:/src/shapes/shaclex/src/test/resources/shexTest/validation/manifest.ttl#1floatMininclusiveDECIMALLeadTrail_pass-float-equalLeadTrail> ;
  foaf:name        "1floatMininclusiveDECIMALLeadTrail_pass-float-equalLeadTrail"
] .
